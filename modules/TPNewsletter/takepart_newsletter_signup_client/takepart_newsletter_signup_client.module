<?php

/**
 * hook permission
 */
function takepart_newsletter_signup_client_permission() {
  return array(
    'view newsletter campaign' => array(
      'title' => t('View newsletter campaign entity'),
    ),
    'add newsletter campaign' => array(
      'title' => t('Add newsletter campaign entity'),
    ),
    'edit newsletter campaign' => array(
      'title' => t('Edit newsletter campaign entity'),
    ),
  );
}

/**
 * Implementation of hook_entity_info
 *
 */
function takepart_newsletter_signup_client_entity_info() {
  return array(
    'takepart_newsletter_campaign' => array(
      'label' => t("TakePart Newsletter Campaign"),
      'base table' => 'takepart_newsletter_campaign',
      'load hook' => 'tp_newsletter_campaign_load',
      'uri callback' => 'tp_newsletter_campaign_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'label' => 'takepart_newsletter_campaign',
        'id' => 'ncid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE
        ),
      ),
    ),
  );
}

/**
 * load callback for entity
 *
 */
function tp_newsletter_campaign_load($ncid = NULL, $reset = FALSE) {
  $ids = (isset($ncid) ? array($ncid) : FALSE);
  $campaigns = tp_newsletter_campaign_load_multiple($ids, NULL, $reset);
  return $campaigns[$ncid];
}

/**
 * define a function for loading multiple entities at once so entity_load can be leveraged
 */
function tp_newsletter_campaign_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  $loaded = entity_load('takepart_newsletter_campaign', $ids, $conditions, $reset);
  return $loaded;
}


/**
 * Implementation of hook_theme()
 */
function takepart_newsletter_signup_client_theme() {
  return array(
    'newsletter_signup_block' => array(
      'variables' => array('form_id' => NULL, 'promo_text' => NULL, 'signup_form' => NULL),
      'template' => 'newsletter-signup-block',
    ),
  );
}


/**
 * Implementation of hook_perms()
 */
function takepart_newsletter_signup_client_perm() {
  return array('administer newsletter email collector client');
}


/**
 * Implementation of hook_menu()
 */
function takepart_newsletter_signup_client_menu() {

  $items = array();
  // entity 
  $items['admin/structure/newsletter-campaign'] = array(
    'title' => 'Administer Newsletter Campaigns',
    'description' => 'Adjust the structure of this entity, add fields',
    'page callback' => 'tp_newsletter_campaign_list',
    'access arguments' => array('administer site configuration'),
  );
  $items['newsletter-campaign'] = array(
    'title' => 'Newsletter Campaign Instances',
    'description' => 'List all Newsletter Campaigns, Landing Page for campaign management.',
    'page callback' => 'tp_newsletter_campaign_list',
    'access arguments' => array('view newsletter campaign'),
  );
  
  $items['newsletter-campaign/add'] = array(
    'title' => 'Add a Newsletter Campaign',
    'description' => 'Add a new Newsletter campaign instance',
    'page callback' => 'tp_newsletter_campaign_add',
    'access arguments' => array('add newsletter campaign'),
  );

  $items['newsletter-campaign/%tp_newsletter_campaign/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an instance of this entity',
    'page callback' => 'tp_newsletter_campaign_edit',
    'page arguments' => array(1),
    'access arguments' => array('edit newsletter campaign'),
    'type' => MENU_CALLBACK,
  );
  
  
  // client settings
  $items['newsletter-campaign/submit-campaign'] = array(
    'title' => t('Newsletter Form Submission'),
    'access arguments' => array('access content'),
    'page callback' => 'takepart_newsletter_signup_client_newsletter_signup_form_submit_from_ajax',
    'file' => 'takepart_newsletter_signup_client.forms.inc'
  );
  
   $items['admin/config/services/takepart-newsletter-signup-client'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => t('TakePart Newsletter Signup client'),
    'description' => t('Settings for newsletter signup client'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('takepart_newsletter_signup_client_admin_settings'),
    'access arguments' => array('administer newsletter email collector client'),
    'file' => 'takepart_newsletter_signup_admin.inc',
  );
  
  return $items; 
}


/**
 * Implementation of hook_block_info()
 */
function takepart_newsletter_signup_client_block_info() {
  $campaigns = entity_load('takepart_newsletter_campaign'); 
  

   
  if (!empty($campaigns)) {
    foreach($campaigns as $campaign) {
      $blocks[$campaign->ncid] = array(
        'info' => t($campaign->title . " (Newsletter Campaign)"),
        'cache' => DRUPAL_NO_CACHE,
        
      );
    }
  }
 
  return $blocks;
}

/**
 * Implementation of hook_block()
 * remove for d7
 */
function takepart_newsletter_signup_client_block($op = 'list', $delta = 0, $edit = array())
{ 
   if ($op == "list") {
    $blocks = array();
    //$campaigns = takepart_newsletter_signup_client_get_active_campaigns();
    $campaigns = entity_load('tp_newsletter_campaign');
        
    if (!empty($campaigns)) {
      foreach($campaigns as $campaign) {
        $blocks[$campaign->nid] = array(
          'info' => t($campaign->title . " (Newsletter Campaign)"),
        );
      }
    }
    
    return $blocks;
  }
  else if ($op == 'view') {   
    return _takepart_newsletter_signup_client_block_view($delta);
  }
}



/**
 * return html to display in block; called from $op = view in hook_block
 */
function takepart_newsletter_signup_client_block_view($delta) {
  $path = drupal_get_path('module', 'takepart_newsletter_signup_client');
  drupal_add_js($path .'/takepart_newsletter_signup.js', 'module');
  drupal_add_css($path .'/takepart_newsletter_signup.css');

  $content = '';
  
  if (is_numeric($delta)) {
    $result = entity_load('takepart_newsletter_campaign', array($delta));
    $camp = $result[$delta];
    
    $form_vars = array(
      'form_id' => $camp->campaign_id,
      'promo_text' => $camp->promo_message,
      'signup_form' => drupal_get_form('takepart_newsletter_signup_client_newsletter_signup_form', $camp->campaign_id)
    );
    
    $content = theme('newsletter_signup_block', $form_vars);
  }
  
  $block = array();
  $block['content'] = $content;
  $block['subject'] = $camp->header;
  
  return $block;
}

/**
 * The newsletter form
 *
 * @param $form_state array - required by api; not used
 * @param $campaign_id string - campaign id for subscription
 *
 * @return array - raw form array
 */
function takepart_newsletter_signup_client_newsletter_signup_form($form, &$form_state, $campaign_id) {
  
  $form = array();
  
  // adds ajax functionality to the block
  drupal_add_js('
    function takepart_newsletter_update_css(textBox) {
      textBox.style[\'color\'] = "black";
      textBox.bgColor = "white";
    }', 'inline'
  );

  drupal_add_js('jQuery(document).ready(function(context) {   
        jQuery("#wrapper-form-'.$campaign_id.' .form-submit", context).click(function(e) {
          console.log("got click");
          e.preventDefault();
          if (takepart_newsletter_isValidEmailAddress(jQuery("#wrapper-form-'.$campaign_id.' [name=email]").val(), "'.$campaign_id.'")) {
             jQuery.post("/newsletter-campaign/submit-campaign", jQuery("#wrapper-form-'.$campaign_id.' form").serialize(), 
             function(result) {
               jQuery("#takepart-newsletter-'.$campaign_id.'-body").hide();
               jQuery("#takepart-newsletter-'.$campaign_id.'-results").html(result.message).text();
             }, "json");
           }
          
         return false;
        }); 
      }
    );', 'inline'
  );


  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => ' Enter email address',
    '#size' => 60,
    '#maxlength' => 128,
    '#attributes' => array('onclick' => 'this.value=""; takepart_newsletter_update_css(this)'),
  );
  
  $form['campaign_id'] = array(
    '#type' => 'hidden',
    '#value' => $campaign_id,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  return $form;
}



/**
 * Valide the form values
 *
 * @param $form array - raw post values
 *
 * @return string - message if error, empty string if not
 */
function takepart_newsletter_signup_client_newsletter_signup_form_validate_from_ajax(&$form) {

  if (!valid_email_address($form['email'])) {
    return t('Invalid address, please try again');
  }
  
  $form['email'] = check_plain($form['email'] );
  $form['campaign_id'] = check_plain($form['campaign_id']);
  
  return '';
}


/**
 * Ajax form handler
 * returns a JSON string 
 */      
function takepart_newsletter_signup_client_newsletter_signup_form_submit_from_ajax() { 
  $form = $_POST;
  
  $message = takepart_newsletter_signup_client_newsletter_signup_form_validate_from_ajax($form);
  
  if ($message) {
    print drupal_json_output(array(0, $message));
    exit();
  }
   
  $email = $form['email'];
  $campaign_id = $form['campaign_id'];
  
  if (!variable_get('takepart_newsletter_signup_client_direct_save', 0)) {
    $result = takepart_newsletter_signup_client_call_webservice($email, $campaign_id);
  } 
  else {
    $result = takepart_newsletter_save_campaign($email, $campaign_id, 's');
  }
  if ($result['status'] == 1 ) {
    $nid = takepart_newsletter_signup_client_get_campaign_nid($campaign_id);
    
    if ($nid) {
      $campaign = node_load($nid);
      $message = $campaign->field_newsletter_thanks_text[0]['value'];
    }

    $result = array('status' => $result['status'], 'message' => $message);
  }
  print drupal_json_output($result);
  
  exit();
}


/**
 *  Calls webservice at www.takepart.com to save email address
 *
 * @param $email string - email address
 * @param $campaign_id string - campaign id for subscription
 *
 * @return string - error message if problem; empty strin if ok
 */
function takepart_newsletter_signup_client_call_webservice($email, $campaign_id) {
  $kid = variable_get('takepart_newsletter_signup_client_api_key', 0);
  $timestamp = (string)time();
  $domain =  variable_get('takepart_newsletter_signup_client_domain', '');
  
  $code = md5(uniqid(rand(), true));
  $nonce = substr($code, 0, 10);
  
  $hash_parameters = array( $timestamp, $domain, $nonce, 'takepart_newsletter_signup.subscribe' );
  $hash = hash_hmac("sha256", implode(';', $hash_parameters), $kid);

  $request_url = variable_get('takepart_newsletter_signup_client_service_url', '').'?';
  $request_url .= "h=$hash&d=$domain&t=$timestamp&n=$nonce&e=$email&c=$campaign_id";
  
  $result = FALSE;
  try {
    $result = drupal_http_request($request_url, array(), 'POST');
    if ($result->code == 200) {
      #the JSON starts with Insert which needs to be removed be fore it can be decoded
      $data = json_decode(preg_replace("/^Insert/","", $result->data), TRUE);
      if (isset($data['status'])) {
        return $data;
      }
    }
    watchdog('newsletter service', 'Error from webservice: '.$result->error.' - '.$request_url);
    return array('success'=>0, 'message'=>t('Problem saving email, please try again later.'));
  }
  catch(Exception $ex) {
    watchdog('newsletter service', 'Error from webservice: '.$ex->getMessage());
    return array('success'=>0, 'message' => t('Problem saving email, please try again later.'));
  }

  return array('success'=>0, 'message' => t('Problem saving email, please try again later.'));
}


/**
 *  Return a list of campaign nodes (nid and titles)
 *
 *  @return array - contains object with nid and title properties
 */
 
/* not used currently
function takepart_newsletter_signup_client_get_active_campaigns() {
  $campaigns = array();
  
  $results = db_query("SELECT title, nid FROM {node} WHERE type = 'newsletter_campaign' AND status = 1 ORDER BY title");
  
  while($result = db_fetch_object($results)) {
    $campaigns[] = $result;
  }
  
  return $campaigns;
}
*/


/**
 *  Look up the campaign node id based on pluris campaign id
 *
 *  @param $campaign_id string - campaign id from pluris
 *
 *  @return int - node id from drupal node
 */
/* not used.
function takepart_newsletter_signup_client_get_campaign_nid($campaign_id) {
  $query = db_query("SELECT n.nid FROM {node} n INNER JOIN {content_type_newsletter_campaign} c ON n.vid = c.vid WHERE c.field_newsletter_campaign_id_value = '%s'", $campaign_id);
  return $query->fetchField();
}
*/

/** 
 * Entity related callbacks
 */

function tp_newsletter_campaign_list() {

  $campaigns = tp_newsletter_campaign_load_multiple(FALSE); // load them all
  $h = array(t('Name'), t('Campaign ID'), t("Header"), t("Promo Msg"), t("Thank You Msg"), '');
  $t = array();
  foreach($campaigns as $camp) {
    $row = array();
    $row[] = l($camp->title, 'newsletter-campaign/' . $camp->ncid);
    $row[] = $camp->campaign_id;
    $row[] = $camp->header;
    $row[] = $camp->promo_message;
    $row[] = $camp->thankyou_message;
    $row[] = l('Edit', 'newsletter-campaign/' . $camp->ncid ."/edit");
    $t[] = $row;
  }

  $table = theme('table', array('header' => $h, 'rows' => $t));
  $camp_links[] = array(
    'title' => t('Add new Newsletter Campaign'),
    'href'  => 'newsletter-campaign/add',
  );
  $camp_links[] = array(
    'title' => t('Client Configuration'),
    'href'  => 'admin/config/services/takepart-newsletter-signup-client',
  );
  
  if (module_exists('takepart_newsletter_signup')) {
    $camp_links[] = array(
      'title' => t('Server Configuration'),
      'href'  => 'admin/config/services/takepart-newsletter-signup-service',
    );    
  }


  $links_data = array(
    'heading' => array('text' => t('Administration'), 'level' => 'h2'),
    'links' => $camp_links,
    'attributes' => array('class' => 'tp-newsletter-admin')
  );
  
  $links = theme_links($links_data);
  
  return $links ."<p></p><h2>Current Newsletter Campaigns</h2>". $table;
}
 
function tp_newsletter_campaign_admin() {
  return t('Not sure i need an Admin page'); 
}

function tp_newsletter_campaign_view() {
}

function tp_newsletter_campaign_add() {
  $campaign = tp_campaign_newsletter_default();
  return drupal_get_form('tp_newsletter_campaign_form', $campaign);
}

/**
 * campaign edit callback
 */
function tp_newsletter_campaign_edit($campaign) {
  drupal_set_title( t("<em>Edit newsletter campaign</em> @title", array('@title' => $campaign->title)), PASS_THROUGH);
  return drupal_get_form('tp_newsletter_campaign_form', $campaign);
}

/**
 * Entity edit form
 *
 */
function tp_newsletter_campaign_form($form, &$form_state, $campaign) {
  $form = array();
  
  if ($campaign->ncid) {
    $form['ncid'] = array(
      '#type' => 'hidden',
      '#default_value' => $campaign->ncid,
    );
  }
  
  $form['tpnc_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#description' => t('The Newsletter Campaign title'),
    '#max_length' => 50,
    '#default_value' => $campaign->title,  
  );
  
  $form['tpnc_header'] = array(
    '#type' => 'textfield',
    '#title' => t('Header'),
    '#description' => t('This text will appear as the header of the block.'),
    '#max_length' => 255,
    '#default_value' => $campaign->header,  
  );
  $form['tpnc_promo_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Promo message'),
    '#description' => t('This text will appear above the email input box.'),
    '#default_value' => $campaign->promo_message,
  );
  $form['tpnc_campaign_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign ID'),
    '#description' => t('Campaign Code generated from the Pluris system.'),
    '#max_length' => 40,
    '#default_value' => $campaign->campaign_id,  
  
  );
  $form['tpnc_thankyou_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank you message'),
    '#description' => t('Text to display in signup block after a user has successfully submitted their email.'),
    '#default_value' => $campaign->thankyou_message,  
  );
  
  // attach any fieldable fields, most notable a file field.
  field_attach_form('takepart_newsletter_campaign', $campaign, $form, $form_state);
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#default_value' => t('Save'),
  );
  
  return $form;
}

function tp_newsletter_campaign_form_submit($form, &$form_state) {
  $campaign = tp_campaign_newsletter_default();
  $update = NULL;
  
  if (!empty($form_state['values']['ncid'])) {
    $update = 'ncid';
    $campaign->ncid = $form_state['values']['ncid'];
  }
  
  $campaign->title            = $form_state['values']['tpnc_title'];
  $campaign->header           = $form_state['values']['tpnc_header'];
  $campaign->promo_message    = $form_state['values']['tpnc_promo_message'];
  $campaign->campaign_id      = $form_state['values']['tpnc_campaign_id'];
  $campaign->thankyou_message = $form_state['values']['tpnc_thankyou_message'];

  field_attach_submit('takepart_newsletter_campaign', $campaign, $form, $form_state);
  
  if ($update) {
    drupal_write_record('takepart_newsletter_campaign', $campaign, $update);
    field_attach_update('takepart_newsletter_campaign', $campaign, $form, $form_state);
  }
  else {
    drupal_write_record('takepart_newsletter_campaign', $campaign);
    $update = 'ncid';
    drupal_write_record('takepart_newsletter_campaign', $campaign, $update);
    field_attach_insert('takepart_newsletter_campaign', $campaign, $form, $form_state);
  }

  drupal_goto('newsletter-campaign');
}

/**
 * define a title callback specified in hook menu
 */
function tp_newsletter_campaign_title($campaign) {
  drupal_set_title(t('Newsletter Campaign @camp', array('@camp' => $campaign->title)));
}

function tp_newsletter_campaign_uri($newsletter_campaign_entity_instance) {
  return array('path' => 'tp_newsletter_campaign/' . $newsletter_campaign_entity_instance->ncid);
}

function tp_campaign_newsletter_default() {
  $campaign = new stdclass();
  $campaign->ncid = NULL;
  $campaign->title = NULL;
  $campaign->header = NULL;
  $campaign->promo_message = NULL;
  $campaign->campaign_id = NULL;
  $campaign->thankyou_message = NULL;
  
  return $campaign;
}