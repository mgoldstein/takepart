<?php

/**
 * Implements hook_permission()
 */
function takepart_signupforms_permission() {
  return array(
    'administer takepart_signupforms fields' => array(
      'title' => t('Administer signup forms'),
      'description' => t('Allow users to configure signup forms and fields on content types'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter()
 */
function takepart_signupforms_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {

  // alter the field ui edit form to include the bsd signup configuration
  form_load_include($form_state, 'inc', 'date', 'date_admin');
  form_load_include($form_state, 'inc', 'takepart_signupforms', 'takepart_signupforms.admin');
  return _takepart_signupforms_field_settings_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_menu()
 */
function takepart_signupforms_menu() {

  $items = array();

  // configuration page
  $items['admin/config/content/signup-forms'] = array(
    'title' => 'Blue State Digital Signup Form Settings',
    'description' => 'Configure Blue State Digital Signup form settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('takepart_signupforms_admin'),
    'access arguments' => array('administer takepart_signupforms fields'),
    'file' => 'takepart_signupforms.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_entity_insert()
 */
function takepart_signupforms_entity_insert($entity, $type) {
  takepart_signupforms_send_insert($entity, $type);
}

function takepart_signupforms_send_insert($entity, $type, &$errors = NULL) {
  $info = entity_get_info($type);

  if ((!empty($info['entity keys'])) && (!empty($info['entity keys']['bundle']))) {

    // get the field settings for the entity's bundle
    $bundleProperty = $info['entity keys']['bundle'];
    $settings = _takepart_signupforms_bundle_settings($type, $entity->{$bundleProperty});

    if ($settings) {

      $signup = array();
      foreach ($settings['forms'] as $form_id => $fields) {

        // add the form to the signup
        $signup[$form_id] = _takepart_signupforms_build_signup_form(
          $entity, $fields, $form_id);
      }

      // send the signup to BSD
      return takepart_bsd_signup_process_signup($signup, $errors);
    }
  }

  return FALSE;
}

/**
 * Implements hook_entity_update()
 */
function takepart_signupforms_entity_update($entity, $type) {
  takepart_signupforms_send_update($entity, $type);
}

function takepart_signupforms_send_update($entity, $type, &$errors = NULL) {

  $info = entity_get_info($type);

  if ((!empty($info['entity keys'])) && (!empty($info['entity keys']['bundle']))) {

    // get the field settings for the entity's bundle
    $bundleProperty = $info['entity keys']['bundle'];
    $settings = _takepart_signupforms_bundle_settings($type, $entity->{$bundleProperty});

    // also check if the bundles has any fields that send updates
    if ($settings && ($settings['total_update_count'] > 0)) {

      $signup = array();
      foreach ($settings['forms'] as $form_id => $fields) {

        if ($settings['update_counts'][$form_id] > 0) {

          // add the form to the signup
          $signup[$form_id] = _takepart_signupforms_build_signup_form(
            $entity, $fields, $form_id);
        }
      }

      // send the signup to BSD
      return takepart_bsd_signup_process_signup($signup, $errors);
    }
  }

  return FALSE;
}

function _takepart_signupforms_build_signup_form($entity, $fields, $form_id) {

  // get the BSD fields for this form
  $bsd_fields = takepart_bsd_signup_list_form_fields($form_id);

  foreach ($fields as $field_id => $field_list) {

    foreach ($field_list as $field) {

      $property = $field['field_name'];
      if ((!empty($bsd_fields[$field_id])) && isset($entity->{$property})) {

        $language = isset($entity->language) ? $entity->language : LANGUAGE_NONE;

        switch ($field['type']) {

          // TODO: map more field types to BSD fields
          case 'text':
          case 'text_long':
          case 'text_with_summary':
          case 'date':
          case 'datetime':
          case 'list_boolean':
          case 'list_integer':
          case 'list_text':
          case 'zip_code':
          case 'partner_code':

            if (! isset($bsd_fields[$field_id]['value'])) {

              // first time the field value is being set
              if ($field['cardinality'] == 1) {
                $bsd_fields[$field_id]['value'] = array(
                  'type' => 'value',
                  'value' => (string)$entity->{$property}[$language][0]['value'],
                );
              }
              else {
                $items = array();
                foreach ($entity->{$property}[$language] as $index => $data) {
                  $items[] = (string)$data['value'];
                }
                if (count($items) > 0) {
                  $bsd_fields[$field_id]['value'] = array(
                    'type' => 'items',
                    'items' => $items,
                  );
                }
              }
            }
            else {

              // more than one Drupal field contributes to this value
              if ($field['cardinality'] == 1) {

                // make sure the previous field(s) had the same cardinality
                if ($bsd_fields[$field_id]['value']['type'] == 'value') {
                  $current_value = $bsd_fields[$field_id]['value']['value'];
                  $current_value .= " " . (string)$entity->{$property}[$language][0]['value'];
                  $bsd_fields[$field_id]['value']['value'] = $current_value;
                }
                else {
                  $message = 'Mismatched cardinality for property @property';
                  $variables = array('@property' => $property);
                  watchdog('takepart_signupforms', $message, $variables);
                }
              }
              else {

                // make sure the previous field(s) had the same cardinality
                if ($bsd_fields[$field_id]['value']['type'] == 'items') {
                  $items = array();
                  foreach ($entity->{$property}[$language] as $index => $data) {
                    $items[] = (string)$data['value'];
                  }
                  $bsd_fields[$field_id]['value']['items'] += $items;
                }
                else {
                  $message = 'Mismatched cardinality for property @property';
                  $variables = array('@property' => $property);
                  watchdog('takepart_signupforms', $message, $variables);
                }
              }
            }
            break;

          default:
            $message = 'Unmapped field type @type';
            watchdog('takepart_signupforms', $message, array('@type' => $field['type']));
            break;
        }
      }
    }
  }

  return $bsd_fields;
}

function _takepart_signupforms_bundle_settings($entity_type, $bundle, $reset = FALSE) {

  static $settings;

  // skip getting the settings if this call is within the same page load
  if (!isset($settings) || $reset) {

    // try the cached settings first
    if (!$reset && ($cache = cache_get('takepart_signupforms:bundle_settings')) && !empty($cache->data)) {
      $settings = unserialize($cache->data);
    }
    else {

      $settings = array();

      // select all settings for all fields on enabled bundles
      $query = db_select('takepart_signupforms_fields', 'f');
      $query->join('takepart_signupforms_bundles', 'b', 'f.bundle_id = b.id');
      $query->join('field_config', 'c', 'f.field_name = c.field_name');
      $query->fields('f', array('field_name', 'form_id', 'field_id', 'send_updates'))
        ->fields('b', array('entity_type', 'bundle'))
        ->fields('c', array('type', 'cardinality'))
        ->condition('b.enabled', 1, '=')
        ->condition('f.form_id', 0, '!=')
        ->condition('f.field_id', 0, '!=')
        ->condition('c.active', 1, '=')
        ->condition('c.deleted', 0, '=');

      $results = $query->execute();
      while ($result = $results->fetchAssoc()) {

        // build a composite key to flatten the array a bit
        $key = $result['entity_type'] . ':' . $result['bundle'];

        // create the initial bundle structure the first time a bundle is encountered
        if (! isset($settings[$key])) {
          $settings[$key] = array(
            'forms' => array(),
            'update_counts' => array(),
            'total_update_count' => 0,
          );
        }

        $form_id = $result['form_id'];
        $field_id = $result['field_id'];

        // create the initial form structure the first time a form is encountered (per bundle)
        if (! isset($settings[$key]['forms'][$form_id])) {
          $settings[$key]['forms'][$form_id] = array();
        }
        if (! isset($settings[$key]['update_counts'][$form_id])) {
          $settings[$key]['update_counts'][$form_id] = 0;
        }

        // create the initial field array the first time a field is encountered (per form)
        if (! isset($settings[$key]['forms'][$form_id][$field_id])) {
          $settings[$key]['forms'][$form_id][$field_id] = array();
        }

        // add the field settings
        $settings[$key]['forms'][$form_id][$field_id][] = array(
          'field_name' => $result['field_name'],
          'type' => $result['type'],
          'cardinality' => $result['cardinality'],
          'send_updates' => $result['send_updates'],
        );

        // keep a count of the number of fields that should also be sent on update
        if ($result['send_updates']) {
          $settings[$key]['update_counts'][$form_id] += 1;
          $settings[$key]['total_updates_count'] += 1;
        }
      }

      // cache the settings for later use
      cache_set('takepart_signupforms:bundle_settings', serialize($settings));
    }
  }

  // return the settings for the field if there are any
  $key = $entity_type . ':' . $bundle;
  if (isset($settings[$key])) {
    return $settings[$key];
  }
  return FALSE;
}
