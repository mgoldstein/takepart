<?php

/**
 * Implements hook_url_inbound_alter().
 */
function takepart_galleries_url_inbound_alter(&$path, $original_path, $path_language) {
  $dirs = explode('/', $path);
  if($dirs[0] == 'photos') {
    $nodeurl = drupal_lookup_path('source', dirname($path));
    $path = $nodeurl;
  }
}


/**
 * Implements hook_entity_update().
 */
function takepart_galleries_entity_update($entity, $type) {

  if($type=='file') {

    if(isset($entity->{'field_page_name'})) {

      $sql = 'SELECT
      file_managed.filename as filename,
      field_data_field_gallery_images.entity_id as entity_id,
      field_data_field_page_name.field_page_name_value as url
      FROM
      {file_managed}
      RIGHT OUTER JOIN field_data_field_gallery_images ON file_managed.fid = field_data_field_gallery_images.field_gallery_images_fid
      LEFT JOIN field_data_field_page_name ON file_managed.fid = field_data_field_page_name.entity_id
      where fid = :fid';
       
      $fid = $entity->field_page_name['fid'];

      $result = db_query($sql, array(':fid' => $fid), array('target' => 'slave'))->fetchAll(PDO::FETCH_ASSOC);

      foreach ($result as $row) {
         
        $links = array(
            'id' => $entity->fid,
            'type' => 'takepart_galleries',
            'loc' => $entity->field_page_name['und'] . '/' . $row['url'],
            'language' => 'und',
            'access' => 1,
            'status' => 1,
            'status_override' => 0,
            'lastmod' => time(),
            'priority' => 0.5,
            'priority_override' => 0,
            'priority_default' => 0.5,
            'changefreq' => 4600,
            'priority' => 0.5,
        );

        xmlsitemap_link_save($links);
      }

    }
  }
}

/**
 * Implementation of hook_menu().
 */
function takepart_galleries_menu() {

  $items = array();

  $items['galleries_json_nid/%'] = array(
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'page callback' => '_takepart_galleries_mappings_json',
      'page arguments' => array(1),
  );

  return $items;
}

/**
 * Fixes URLs
 */
function _takepart_galleries_fix_urls(&$item, $key) {
  module_load_include('inc','pathauto');

  if(isset($item['title'])) {
    if(!isset($item['url'])) {
      $item['url'] = pathauto_cleanstring($item['title']);
    }
  }
  if(!isset($item['url'])) {
    if(isset($item['filename'])) {
	  $item['filename'] = htmlspecialchars_decode($item['filename'], ENT_QUOTES);
      $filename = strtok($item['filename'], ".");
      if($filename) {
        $item['url'] = strtolower($filename);
      }
    }
  }
}

/**
 * Return JSON for specified gallery
 */
function _takepart_galleries_mappings_json($nid) {
  return drupal_json_output(_takepart_galleries_mappings($nid));
}

/**
 * Return JSON for specified gallery
 */
function _takepart_galleries_mappings($nid) {

  
  if(!isset($GLOBALS["_takepart_galleries_mappings_return"])) {
  
    if($nid) {
  
      $sql = 'SELECT
    file_managed.uri AS filename,
      field_data_field_gallery_images.entity_id AS entity_id,
      field_data_field_page_name.field_page_name_value AS url,
    field_data_field_image_title.field_image_title_value as title,
    field_data_field_media_caption.field_media_caption_value as caption
      FROM
      {file_managed}
      RIGHT OUTER JOIN field_data_field_gallery_images ON file_managed.fid = field_data_field_gallery_images.field_gallery_images_fid
      LEFT JOIN field_data_field_page_name ON file_managed.fid = field_data_field_page_name.entity_id
    LEFT JOIN field_data_field_media_caption ON file_managed.fid = field_data_field_media_caption.entity_id
      LEFT JOIN field_data_field_image_title ON field_data_field_image_title.entity_id = file_managed.fid
      where field_data_field_gallery_images.entity_id = :nid';
       
      $result = db_query($sql, array(':nid' => $nid), array('target' => 'slave'))->fetchAll(PDO::FETCH_ASSOC);
  
      array_walk($result, '_takepart_galleries_fix_urls');

      $GLOBALS["_takepart_galleries_mappings_return"] = $result;
      return $result;
    }
    
  } else {
       return $GLOBALS["_takepart_galleries_mappings_return"];
  }
}

/**
 * Implements hook_omniture_variables().
 */
function takepart_galleries_omniture_variables() {
  $node = menu_get_object();

  $return = array();
  $folders = explode('/', $_SERVER['REQUEST_URI']);
  $first_folder = $folders[1];
  $second_folder = @$folders[2];
  $third_folder = @$folders[3];
  if ( $first_folder == 'photos' ) {
    $field_display_cover = field_get_items('node', $node, 'field_display_cover');
    $field_display_cover = ( $field_display_cover ) ? $field_display_cover[0]['value'] : false;

    if ( $third_folder == 'next-gallery' ) {
      $return = $return + (array('s.linkTrackEvents'=>'event14,event16','s.events'=>'event14,event16','s.eVar16'=>'Up Next Gallery Cover'));
    } elseif ( $third_folder || (!$field_display_cover && $second_folder) ) {
      $return = $return + (array('s.linkTrackEvents'=>'event14,event15','s.events'=>'event14,event15','s.eVar16'=>'Photo'));
    } elseif ( $second_folder ) {
      $return = $return + (array('s.linkTrackEvents'=>'event14','s.events'=>'event14','s.eVar16'=>'Gallery Cover'));
    }
    return array("variables" => $return);
  }
}

/*
 * Unset duplicate header values and set og:image to match the current slide
 */
function takepart_galleries_html_head_alter(&$head_elements) {

	// Update the og: meta values if you're on a sub-page
	$node = menu_get_object();

	$path = $_SERVER["REQUEST_URI"];
	$path = preg_replace('/\?.*/', '', $path);
	$dirs = explode('/', $path);
	if(($dirs[1] == 'photos') && (count($dirs) > 3) && $dirs[3] ) {
		foreach ($head_elements as $key => $element) {
			if (isset($element['#id']) &&
				(
					($element['#id'] == 'metatag_og:url') ||
					($element['#id'] == 'metatag_og:image') ||
					($element['#id'] == 'metatag_og:description') ||
					($element['#id'] == 'metatag_og:title')
				)
			) {
				unset($head_elements[$key]);
			}
		}
	}

	if(!empty($node) && is_object($node) && isset($node->field_gallery_images)) {
		// Ripped off from takepart_gallery_support.module -
		// Get the slideshow, get the slide title, convert it to a url-style string, and check it against arg(2)
		// Then return the updated value to the og:image key in $head_elements
		$slides = field_get_items('node', $node, 'field_gallery_images');
		$field_sponsored = field_get_items('node', $node, 'field_sponsored');
		
		if ($slides) {
			foreach ($slides as $delta => $item) {
		        //ensures that the fid is set
		        if (isset($item['fid'])) {
					//load the file
					$file = file_load($item['fid']);
					$slide = array();

					$items = field_get_items('file', $file, 'field_image_title');

					$slide['title'] = trim($items[0]['safe_value']);

					module_load_include('inc','pathauto');

					if($slide['title']) {
						$slide['data-token'] = pathauto_cleanstring($slide['title']);
					} else {
						$slide['data-token'] = pathauto_cleanstring($file->filename);
					}

					// Update the meta tags to match only the current slide
					if($slide['data-token'] == $dirs[3]) {

						$desc = field_get_items('file', $file, 'field_media_caption');
						$slide['desc'] = strip_tags($desc[0]['safe_value']);

						// Check sponsored content field. Append promoted label if present
						$slidetitle = ($field_sponsored) ? $slide['title'] . " (Promoted)" : $slide['title'];
						
				        // Facebook
						$head_elements['metatag_og:image_0']['#value'] = file_create_url($file->uri);
						$head_elements['metatag_og:title_0']['#value'] = $slidetitle;
						$head_elements['metatag_og:description_0']['#value'] = $slide['desc'];
						$head_elements['metatag_og:url_0']['#value'] .= '/'.$slide['data-token'];

						// Twitter
						// $head_elements['metatag_twitter:title_0']['#value'] = $slide['title'];
						$head_elements['metatag_twitter:url_0']['#value'] .= '/'.$slide['data-token'];

					}

					// Append meta tags for each image in the gallery to the Twitter card
					$head_elements['metatag_twitter:image'.$delta.':src'] = array(
						'#theme' => 'metatag_property',
						'#tag' => 'meta',
						'#id' => 'metatag_twitter:image'.$delta.':src',
						'#name' => 'twitter:image'.$delta.':src',
						'#value' => file_create_url($file->uri),
						'#type' => 'html_tag',
						'#weight' => (700 + $delta),
					);
		        }
			}
		}

		// Generate an empty og:description if there is no field_subhead value
		// This happens in galleries with no subhead and no cover slide
		if( !$head_elements['metatag_og:description_0']['#id'] ) {
			$head_elements['metatag_og:description_0'] = array(
				'#theme' => 'metatag_property',
				'#tag' => 'meta',
				'#id' => 'metatag_og:description_0',
				'#name' => 'og:description',
				'#value' => $slide['desc'],
				'#type' => 'html_tag',
			);
		}
	
		// Change the Twitter card type
		$head_elements['metatag_twitter:card_0']['#value'] = 'gallery';
	}
}
