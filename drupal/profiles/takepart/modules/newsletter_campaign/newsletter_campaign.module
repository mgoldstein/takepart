<?php

/**
 * Newsletter Campaign Entity.
 */
class NewsletterCampaign extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'newsletter_campaign');
  }

  protected function defaultUri() {
    $info = $this->entityInfo();
    if (isset($info['admin ui']) && isset($info['admin ui']['path'])) {
      $base = $info['admin ui']['path'];
      return array('path' => $base . '/manage/' . (string) $this->identifier());
    }
    return NULL;
  }

  public function signup($email) {

    // Build the email signup.
    $signup = array(
      $this->bsd_form_id => array(
        $this->bsd_field_id => array(
          'value' => array(
            'type' => 'value',
            'value' => $email,
          ),
        ),
      ),
    );

    // Send the email signup.
    try {
      $api = bluestatedigital_get_api('signup');
      $api->processSignup($signup);
      return TRUE;
    }
    catch (BlueStateDigitalApiException $ex) {
      $message = 'Error sending email signup [@code] @body';
      watchdog('newsletter_campaign', $message, array(
        '@code' => $ex->getResponseCode(),
        '@body' => $ex->getResponseBody(),
      ));
    }
    return FALSE;
  }
}

/**
 * Newsletter Campaign Entity Controller.
 */
class NewsletterCampaignController extends EntityApiController {

  public function create(array $values = array()) {
    $values += array(
      'ncid' => '',
      'title' => '',
      'header' => '',
      'promo_message' => '',
      'thankyou_message' => '',
      'campaign_id' => '',
      'bsd_form_id' => 0,
      'bsd_field_id' => 0,
      'is_new' => TRUE,
    );
    return parent::create($values);
  }
}

/**
 * Newsletter Campaign Admin UI Controller.
 */
class NewsletterCampaignUIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage newsletter campaigns.';
    return $items;
  }

  public function overviewTable($conditions = array()) {
    $render = parent::overviewTable($conditions);
    $headers = $render['#header'];
    $label = array_shift($headers);
    $extra_headers = array(
      t('Signup Form ID'),
      t('Header'),
      t('Promo Message'),
      t('Thank You Message'),
    );
    $render['#header'] = array_merge(array($label), $extra_headers, $headers);
    return $render;
  }

  protected function overviewTableRow($conditions, $id, $entity, $additional_cols = array()) {
    $allowed_tags = array('a', 'i', 'strong', 'u', 'em', 'b', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'div', 'span');
    $additional_cols[] = empty($entity->bsd_form_id) ? '' : (string) $entity->bsd_form_id;
    $additional_cols[] = filter_xss($entity->header, $allowed_tags);
    $additional_cols[] = filter_xss($entity->promo_message, $allowed_tags);
    $additional_cols[] = filter_xss($entity->thankyou_message, $allowed_tags);
    return parent::overviewTableRow($conditions, $id, $entity, $additional_cols);
  }
}

/**
 * Implements hook_permission().
 */
function newsletter_campaign_permission() {
  // Return permissions for the standard API Entity operations.
  return array(
    'view newsletter campaign' => array(
      'title' => t('View newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'update newsletter campaign' => array(
      'title' => t('Update newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'create newsletter campaign' => array(
      'title' => t('Create newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'delete newsletter campaign' => array(
      'title' => t('Delete newsletter campaigns'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback.
 */
function newsletter_campaign_access($op, $campaign = NULL, $account = NULL) {
  // Block unknown operations.
  if (in_array($op, array('view', 'update', 'create', 'delete'))) {
    return user_access("$op newsletter campaign", $account);
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function newsletter_campaign_entity_info() {
  return array(
    'newsletter_campaign' => array(
      'label' => t("TakePart Newsletter"),
      'entity class' => 'NewsletterCampaign',
      'controller class' => 'NewsletterCampaignController',
      'base table' => 'newsletter_campaign',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'ncid',
        'label' => 'title',
      ),
      'uri callback' => 'entity_class_uri',
      'access callback' => 'newsletter_campaign_access',
      'module' => 'newsletter_campaign',
      'admin ui' => array(
        'path' => 'admin/structure/newsletter-campaign',
        'controller class' => 'NewsletterCampaignUIController',
      ),
    ),
  );
}

/**
 * Newsletter Campaign entity form.
 */
function newsletter_campaign_form($form, &$form_state, $campaign,
  $op = 'edit') {

  $form_state['newsletter_campaign'] = $campaign;

  // update the label and reset the type if we are cloning the type
  if (!isset($form_state['values']) && $op == 'clone') {
    $campaign->title .= ' (cloned)';
    $campaign->ncid = '';
    $campaign->is_new = TRUE;
  }

  $defaults = array(
    'title' => $campaign->title,
    'header' => $campaign->header,
    'promo_message' => $campaign->promo_message,
    'thankyou_message' => $campaign->thankyou_message,
    'bsd_form_id' => $campaign->bsd_form_id,
    'bsd_field_id' => $campaign->bsd_field_id,
  );

  $values = array();
  foreach ($defaults as $name => $value) {
    if (isset($form_state['values'][$name])) {
      $values[$name] = $form_state['values'][$name];
    }
    else {
      $values[$name] = $value;
    }
  }

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $values['title'],
    '#description' => t('The human-readable name of the newsletter campaign'),
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['header'] = array(
    '#title' => t('Header'),
    '#type' => 'textfield',
    '#default_value' => $values['header'],
    '#description' => t('Text to use as the header of the newsletter signup block.'),
    '#required' => TRUE,
    '#size' => 60,
  );

  $form['promo_message'] = array(
    '#title' => t('Promo message'),
    '#type' => 'textarea',
    '#default_value' => $values['promo_message'],
    '#description' => t('Message to display before a user submits their email. Supports HTML tags a, i, strong, u, em, b, ul, ol, li, dl, dt, dd, p, br, div, and span.'),
    '#rows' => 4,
  );

  $form['thankyou_message'] = array(
    '#title' => t('Thank you message'),
    '#type' => 'textarea',
    '#default_value' => $values['thankyou_message'],
    '#description' => t('Message to display after a user submits their email. Supports HTML tags a, i, strong, u, em, b, ul, ol, li, dl, dt, dd, p, br, div, and span.'),
    '#required' => TRUE,
    '#rows' => 4,
  );

  $form['bluestatedigital'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blue State Digital'),
    '#description' => t('Blue State Digital signup form and field configuration.'),
    '#tree' => FALSE,
  );

  $form['bluestatedigital']['bsd_form_id']
    = bluestatedigital_forms_signup_form_id($values['bsd_form_id']);
  $form['bluestatedigital']['bsd_form_id'] += array(
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'newsletter_campaign_form_email_field_callback',
      'wrapper' => 'newsletter-campaign-form-email-field-wrapper',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading fields ...'),
      ),
    ),
  );

  $form['bluestatedigital']['bsd_field_id']
    = bluestatedigital_forms_signup_field_id($values['bsd_form_id'],
      $values['bsd_field_id']);
  $form['bluestatedigital']['bsd_field_id'] += array(
    '#prefix' => '<div id="newsletter-campaign-form-email-field-wrapper">',
    '#suffix' => '</div>',
  );

  $form['actions'] = array('#type' => 'actions');
  $submit = array();
  if (! empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save campaign'),
    '#weight' => 40,
    '#submit' => $submit + array('newsletter_campaign_form_submit'),
  );

  // only add the delete button if we are editting an existing signature type
  if (! empty($campaign->ncid)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete campaign'),
      '#submit' => $submit + array('newsletter_campaign_form_submit_delete'),
      '#weight' => 45,
    );
  }

  $form['actions']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Cancel'), 'admin/structure/newsletter-campaign'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * AJAX callback for Blue State Digital signup form field.
 */
function newsletter_campaign_form_email_field_callback($form, $form_state) {
  return $form['bluestatedigital']['bsd_field_id'];
}

/**
 * Newsletter Campaign entity form save (submit) handler
 */
function newsletter_campaign_form_submit(&$form, &$form_state) {

  // build the newsletter campaign entity from the form
  $campaign = entity_ui_form_submit_build_entity($form, $form_state);

  // save the newsletter campaign
  $status = $campaign->save();
  if ($status == SAVED_UPDATED) {
    drupal_set_message(t('The newsletter campaign %name has been updated.',
      array('%name' => $campaign->title)));
  }
  else if ($status == SAVED_NEW) {
    drupal_set_message(t('The newsletter campaign %name has been added.',
      array('%name' => $campaign->title)));
  }

  // go back to the list of newsletter campaigns
  $form_state['redirect'] = 'admin/structure/newsletter-campaign';
}

/**
 * Newsletter Campaign entity form delete (submit) handler
 */
function newsletter_campaign_form_submit_delete(&$form, &$form_state) {

  // go to the delete confirmation page
  $form_state['redirect'] = array(
    'admin/structure/newsletter-campaign/manage/'
      . (string) $form_state['newsletter_campaign']->ncid . '/delete',
    array(
      'query' => array(
        'destination' => 'admin/structure/newsletter-campaign',
      ),
    ),
  );
}

/**
 * Implementation of hook_theme()
 */
function newsletter_campaign_theme() {
  return array(
    'newsletter_signup_block' => array(
      'variables' => array(
        'form_id' => NULL,
        'promo_text' => NULL,
        'signup_form' => NULL
      ),
      'template' => 'theme/newsletter-signup-block',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function newsletter_campaign_block_info() {
  $blocks = array();
  foreach (entity_load('newsletter_campaign') as $campaign) {
    $blocks[$campaign->ncid] = array(
      'info' => t('@title (Newsletter Campaign)',
        array('@title' => $campaign->title)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function newsletter_campaign_block_view($delta) {

  $content = '';
  $subject = '';

  if (is_numeric($delta)) {

    $campaign = reset(entity_load('newsletter_campaign', array($delta)));
    if ($campaign !== FALSE) {

      $path = drupal_get_path('module', 'newsletter_campaign');
      drupal_add_js($path . '/js/newsletter_campaign_block.js');
      drupal_add_css($path . '/css/newsletter_campaign_block.css');

      $allowed_tags = array('a', 'i', 'strong', 'u', 'em', 'b', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'div', 'span');
      $promo_message = isset($campaign->promo_message)
        ? $campaign->promo_message : '';
      $variables = array(
        'form_id' => (string ) $campaign->ncid,
        'promo_text' => filter_xss($promo_message, $allowed_tags),
        'signup_form' => drupal_get_form('newsletter_campaign_signup_form',
          $campaign),
      );
      $content = theme('newsletter_signup_block', $variables);
      $subject = filter_xss($campaign->header, $allowed_tags);
    }
  }

  return array(
    'content' => $content,
    'subject' => $subject,
  );
}

function newsletter_campaign_signup_form($form, &$form_state, $campaign) {

  $form_state['newsletter_campaign'] = $campaign;

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => 'Your Email',
    '#size' => 60,
    '#maxlength' => 128,
  );

  $submit_src = drupal_get_path('theme', 'takepart3') . '/images/submit_off.png';
  $hover_src = drupal_get_path('theme', 'takepart3') . '/images/submit_on.png';
  $form['newsletter_campaign_signup'] = array(
    '#type' => 'image_button',
    '#src' => $submit_src,
    '#attributes' => array(
      'class' => array('rollover-image-off'),
    ),
    '#prefix' => '<img src="/'. $hover_src . '" class="rollover-image-on" />',
    '#value' => t('Submit'),
    '#submit' => array('newsletter_campaign_signup_form_submit'),
    '#ajax' => array(
      'callback' => 'newsletter_campaign_signup_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  return $form;
}

function newsletter_campaign_signup_form_submit($form, &$form_state) {

  $email = $form_state['values']['email'];
  if (valid_email_address($email)) {
    $form_state['newsletter_campaign_email_is_valid'] = TRUE;
    $campaign = $form_state['newsletter_campaign'];
    $form_state['newsletter_campaign_signup_successful']
      = $campaign->signup($email);
  }
  else {
    $form_state['newsletter_campaign_email_is_valid'] = FALSE;
    $form_state['newsletter_campaign_signup_sucessful'] = FALSE;
  }
}

function newsletter_campaign_signup_form_callback($form, $form_state) {

  $campaign = $form_state['newsletter_campaign'];
  $form_id = (string) $campaign->ncid;
  $message_selector = "#takepart-newsletter-{$form_id}-results";
  $content_selector = "#takepart-newsletter-{$form_id}-body";
  $commands = array();

  if (!empty($form_state['newsletter_campaign_email_is_valid'])) {

    // Email was valid, no need to resubmit so hide the form.
    $commands[] = ajax_command_invoke($content_selector, 'hide');

    if (!empty($form_state['newsletter_campaign_signup_successful'])) {
      // Fire the analytics events.
      $commands[] = ajax_command_invoke($message_selector, 'trigger', array(
        'newsletter_signup', array(check_plain($campaign->title)),
      ));
      // Thank the user for their signup.
      $allowed_tags = array('a', 'i', 'strong', 'u', 'em', 'b', 'ul', 'ol', 'li', 'dl', 'dt', 'dd', 'p', 'br', 'div', 'span');
      $message .= filter_xss($campaign->thankyou_message, $allowed_tags);
    }
    else {
      // Inform the user that email signup failed.
      $message = t('We were unable to process your subscription at this time,'
        . ' please try again later.');
    }
  }
  else {
    // Inform the user that the email address is invalid.
    $message = t('Email address is invalid.');
  }

  // Always send back a response message.
  $commands[] = ajax_command_html($message_selector, $message);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Process a signup for a newsletter campaign given the campaign's id.
 *
 * @param int $ncid
 *   The id of the newsletter campaign.
 * @param string $email
 *   The email to signup.
 *
 * @return boolean
 *   TRUE if the signup was successful, false otherwise.
 */
function newsletter_campaign_signup($ncid, $email) {

  $campaign = reset(entity_load('newsletter_campaign', array($ncid)));
  if ($campaign !== FALSE) {
    return $campaign->signup($email);
  }
  return FALSE;
}


/**
 * Direct signup forms.
 ******************************************************************************/
function newsletter_campaign_signup_form_filter($var) {
  return ($var == 'None' || preg_match('/^\[[0-9]+\] Email/', $var));
}

function newsletter_campaign_preprocess_markup($markup) {
  $allowed_tags = '<a><b><i><strong><em><br><br/><img><p><ul><ol><li>'
    . '<blockquote><hr><hr/><h1><h2><h3><h4><h5><h6>';
  $markup = strip_tags($markup, $allowed_tags);
  $markup = str_replace(array("\r\n", "\r"), "\n", $markup);
  $markup = str_replace("\n\n\n", '</p><p>', $markup);
  $markup = str_replace("\n\n", '<br/>', $markup);
  return $markup;
}

function newsletter_campaign_email_only_signup_configuration($form, $config) {

  $form['email_signup_form_id']
    = bluestatedigital_forms_signup_form_id($config['email_signup_form_id']);
  $form['email_signup_form_id']['#title'] = t('Email Newsletter');
  $options = $form['email_signup_form_id']['#options'];
  $form['email_signup_form_id']['#options']
    = array_filter($options, 'newsletter_campaign_signup_form_filter');

  $form['header'] = array(
    '#type' => 'textarea',
    '#title' => t('Header'),
    '#default_value' => $config['header'],
  );

  $form['email_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Label'),
    '#default_value' => $config['email_label'],
  );

  $form['submit_caption'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit Caption'),
    '#default_value' => $config['submit_caption'],
  );

  $form['footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer'),
    '#default_value' => $config['footer'],
  );

  $form['thank_you_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank You'),
    '#default_value' => $config['thank_you_message'],
  );

  return $form;
}

function newsletter_campaign_email_only_signup_form($form, &$form_state, $config) {

  $config += array(
    'email_label' => t('Email'),
    'submit_caption' => t('Submit'),
    'thank_you_message' => t("Thanks for subscribing! We're so excited to have you on board."),
  );

  $form_state['newsletter_campaign_direct_signup'] = array(
    'selector' => '#newsletter-campaign-email-only-signup-form',
    'config' => $config,
  );

  $form['#validate'] = array('newsletter_campaign_direct_signup_form_validate');
  $form['#submit'] = array('newsletter_campaign_direct_signup_form_submit');

  $form['header'] = array(
    '#type' => 'markup',
    '#markup' => newsletter_campaign_preprocess_markup($config['header']),
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => $config['email_label'],
    '#required' => TRUE,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $config['submit_caption'],
    '#weight' => 40,
    '#ajax' => array(
      'callback' => 'newsletter_campaign_direct_signup_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  $form['footer'] = array(
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => newsletter_campaign_preprocess_markup($config['footer']),
  );

  return $form;
}

function newsletter_campaign_mobile_only_signup_configuration($form, $config) {

  Waterfall::Api()->post('authenticate', array(
    'username' => 'TakePart',
    'password' => 'sms4takepart',
  ));
  $us_flows = array('' => t('-- None --'));
  foreach (PhoneCampaigns::US()->flows() as $flow) {
    $us_flows[$flow->id] = $flow->name;
  }
  $canada_flows = array('' => t('-- None --'));
  foreach (PhoneCampaigns::Canada()->flows() as $flow) {
    $canada_flows[$flow->id] = $flow->name;
  }
  Waterfall::Api()->post('authenticate/logout');

  $form['us_mobile_flow_id'] = array(
    '#type' => 'select',
    '#title' => t('US Mobile Flow'),
    '#options' => $us_flows,
    '#required' => FALSE,
    '#default_value' => $config['us_mobile_flow_id'],
  );

  $form['canada_mobile_flow_id'] = array(
    '#type' => 'select',
    '#title' => t('Canadian Mobile Flow'),
    '#options' => $canada_flows,
    '#required' => FALSE,
    '#default_value' => $config['canada_mobile_flow_id'],
  );

  $form['header'] = array(
    '#type' => 'textarea',
    '#title' => t('Header'),
    '#default_value' => $config['header'],
  );

  $form['mobile_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile Label'),
    '#default_value' => $config['mobile_label'],
  );

  $form['submit_caption'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit Caption'),
    '#default_value' => $config['submit_caption'],
  );

  $form['footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer'),
    '#default_value' => $config['footer'],
  );

  $form['thank_you_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank You'),
    '#default_value' => $config['thank_you_message'],
  );

  return $form;
}

function newsletter_campaign_mobile_only_signup_form($form, &$form_state, $config) {

  $config += array(
    'mobile_label' => t('Mobile'),
    'submit_caption' => t('Submit'),
    'thank_you_message' => t("Thanks for subscribing! We're so excited to have you on board."),
  );

  $form_state['newsletter_campaign_direct_signup'] = array(
    'selector' => '#newsletter-campaign-mobile-only-signup-form',
    'config' => $config,
  );

  $form['#validate'] = array('newsletter_campaign_direct_signup_form_validate');
  $form['#submit'] = array('newsletter_campaign_direct_signup_form_submit');

  $form['header'] = array(
    '#type' => 'markup',
    '#markup' => newsletter_campaign_preprocess_markup($config['header']),
  );

  $form['mobile'] = array(
    '#type' => 'fieldset',
    '#title' => $config['mobile_label'],
    '#tree' => TRUE,
  );

  $form['mobile']['areacode'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
  );

  $form['mobile']['exchange'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
  );

  $form['mobile']['number'] = array(
    '#type' => 'textfield',
    '#maxlength' => 4,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $config['submit_caption'],
    '#weight' => 40,
    '#ajax' => array(
      'callback' => 'newsletter_campaign_direct_signup_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  $form['footer'] = array(
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => newsletter_campaign_preprocess_markup($config['footer']),
  );

  return $form;
}

function newsletter_campaign_email_mobile_signup_configuration($form, $config) {

  Waterfall::Api()->post('authenticate', array(
    'username' => 'TakePart',
    'password' => 'sms4takepart',
  ));
  $us_flows = array('' => t('-- None --'));
  foreach (PhoneCampaigns::US()->flows() as $flow) {
    $us_flows[$flow->id] = $flow->name;
  }
  $canada_flows = array('' => t('-- None --'));
  foreach (PhoneCampaigns::Canada()->flows() as $flow) {
    $canada_flows[$flow->id] = $flow->name;
  }
  Waterfall::Api()->post('authenticate/logout');

  $form['email_signup_form_id']
    = bluestatedigital_forms_signup_form_id($config['email_signup_form_id']);
  $form['email_signup_form_id']['#title'] = t('Email Newsletter');
  $options = $form['email_signup_form_id']['#options'];
  $form['email_signup_form_id']['#options']
    = array_filter($options, 'newsletter_campaign_signup_form_filter');

  $form['us_mobile_flow_id'] = array(
    '#type' => 'select',
    '#title' => t('US Mobile Flow'),
    '#options' => $us_flows,
    '#required' => FALSE,
    '#default_value' => $config['us_mobile_flow_id'],
  );

  $form['canada_mobile_flow_id'] = array(
    '#type' => 'select',
    '#title' => t('Canadian Mobile Flow'),
    '#options' => $canada_flows,
    '#required' => FALSE,
    '#default_value' => $config['canada_mobile_flow_id'],
  );

  $form['header'] = array(
    '#type' => 'textarea',
    '#title' => t('Header'),
    '#default_value' => $config['header'],
  );

  $form['email_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Email Label'),
    '#default_value' => $config['email_label'],
  );

  $form['mobile_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile Label'),
    '#default_value' => $config['mobile_label'],
  );

  $form['submit_caption'] = array(
    '#type' => 'textfield',
    '#title' => t('Submit Caption'),
    '#default_value' => $config['submit_caption'],
  );

  $form['footer'] = array(
    '#type' => 'textarea',
    '#title' => t('Footer'),
    '#default_value' => $config['footer'],
  );

  $form['thank_you_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Thank You'),
    '#default_value' => $config['thank_you_message'],
  );

  return $form;
}

function newsletter_campaign_email_mobile_signup_form($form, &$form_state, $config) {

  $config += array(
    'email_label' => t('Email'),
    'mobile_label' => t('Mobile'),
    'submit_caption' => t('Submit'),
    'thank_you_message' => t("Thanks for subscribing! We're so excited to have you on board."),
  );

  $form_state['newsletter_campaign_direct_signup'] = array(
    'selector' => '#newsletter-campaign-email-mobile-signup-form',
    'config' => $config,
  );

  $form['#validate'] = array('newsletter_campaign_direct_signup_form_validate');
  $form['#submit'] = array('newsletter_campaign_direct_signup_form_submit');

  $form['header'] = array(
    '#type' => 'markup',
    '#markup' => newsletter_campaign_preprocess_markup($config['header'])
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => $config['email_label'],
    '#required' => TRUE,
  );

  $form['mobile'] = array(
    '#type' => 'fieldset',
    '#title' => $config['mobile_label'],
    '#tree' => TRUE,
  );

  $form['mobile']['areacode'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
  );

  $form['mobile']['exchange'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
  );

  $form['mobile']['number'] = array(
    '#type' => 'textfield',
    '#maxlength' => 4,
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $config['submit_caption'],
    '#weight' => 40,
    '#ajax' => array(
      'callback' => 'newsletter_campaign_direct_signup_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  $form['footer'] = array(
    '#type' => 'markup',
    '#weight' => 100,
    '#markup' => newsletter_campaign_preprocess_markup($config['footer']),
  );

  return $form;
}

function newsletter_campaign_direct_signup_form_validate($form, &$form_state) {

  $args = $form_state['newsletter_campaign_direct_signup'];
  $selector = $args['selector'];

  /* Validate the email */
  if ($selector != '#newsletter-campaign-mobile-only-signup-form') {
    $email = $form_state['values']['email'];
    if ($email !== '' && !valid_email_address($email)) {
      form_set_error('email', t('Invalid email address.'));
    }
  }

  /* Validate the phone number */
  if ($selector != '#newsletter-campaign-email-only-signup-form') {

    $mobile = $form_state['values']['mobile'];
    $areacode_empty = $mobile['areacode'] === '';
    $exchange_empty = $mobile['exchange'] === '';
    $number_empty = $mobile['number'] === '';

    if ($areacode_empty === $exchange_empty && $exchange_empty === $number_empty) {
      if (!$areacode_empty) {
        $areacode_3_digits = preg_match('/^[0-9]{3}$/', $mobile['areacode']);
        $exchange_3_digits = preg_match('/^[0-9]{3}$/', $mobile['exchange']);
        $number_4_digits = preg_match('/^[0-9]{4}$/', $mobile['number']);
        if (!$areacode_3_digits || !$exchange_3_digits || !$number_4_digits) {
          form_set_error('mobile', t('Invalid mobile number.'));
        }
      }
      elseif ($selector == '#newsletter-campaign-mobile-only-signup-form') {
        form_set_error('mobile', t('Mobile number is required.'));
      }
    }
    else {
      form_set_error('mobile', t('Incomplete mobile number.'));
    }
  }
}

function newsletter_campaign_direct_signup_form_callback($form, $form_state) {

  // Standard form submission stuff.
  $commands = array();
  $commands[] = ajax_command_replace(NULL, drupal_render($form));
  $commands[] = ajax_command_prepend(NULL, theme('status_messages'));

  $errors = form_get_errors();
  if (empty($errors)) {

    $args = $form_state['newsletter_campaign_direct_signup'];
    $selector = $args['selector'];
    $config = $args['config'];

    $message = newsletter_campaign_preprocess_markup($config['thank_you_message']);
    $message = '<div class="thank-you-message"><p>' . $message . '</p></div>';

    $commands[] = ajax_command_replace($selector, $message);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function newsletter_campaign_direct_signup_form_submit($form, &$form_state) {

  $args = $form_state['newsletter_campaign_direct_signup'];
  $selector = $args['selector'];
  $config = $args['config'];

  $send_email = $selector != '#newsletter-campaign-mobile-only-signup-form';
  $send_phone = $selector != '#newsletter-campaign-email-only-signup-form';

  $have_form_id = !empty($config['email_signup_form_id']);
  $have_us_flow_id = !empty($config['us_mobile_flow_id']);
  $have_canada_flow_id = !empty($config['canada_mobile_flow_id']);

  $email = $form_state['values']['email'];
  $phone = implode('', array(
    $form_state['values']['mobile']['areacode'],
    $form_state['values']['mobile']['exchange'],
    $form_state['values']['mobile']['number'],
  ));

  /* Send the email to BSD */
  if ($send_email && $have_form_id) {
    try {

      $api = bluestatedigital_get_api('signup');

      $fields = $api->listFormFields($config['email_signup_form_id']);

      $email_field_id = 0;
      $phone_field_id = 0;
      foreach ($fields as $id => $field) {
        if ($field['description'] == 'Email') {
          $email_field_id = $id;
        }
        if ($field['description'] == 'Phone') {
          $phone_field_id = $id;
        }
      }

      $fields[$email_field_id]['value'] = array(
        'type' => 'value',
        'value' => $email,
      );
      if (!empty($phone)) {
        $fields[$phone_field_id]['value'] = array(
          'type' => 'value',
          'value' => $phone,
        );
      }

      $signup = array($config['email_signup_form_id'] => $fields);
      $api->processSignup($signup);
    }
    catch (BlueStateDigitalApiException $ex) {
      $message = 'Error sending email signup [@code] @body';
      watchdog('newsletter_campaign', $message, array(
        '@code' => $ex->getResponseCode(),
        '@body' => $ex->getResponseBody(),
      ));
    }
  }

  /* Send the mobile number to Waterfall */
  if ($send_phone) {
    $area_code = $form_state['values']['mobile']['areacode'];
    if (PhoneCampaigns::IsCanadianAreaCode($area_code) && $have_canada_flow_id) {
      Waterfall::Api()->post('authenticate', array(
        'username' => 'TakePart',
        'password' => 'sms4takepart',
      ));
      PhoneCampaigns::Canada()->initiateFlow($config['canada_mobile_flow_id'], $phone);
      Waterfall::Api()->post('authenticate/logout');
    }
    elseif ($have_us_flow_id) {
      Waterfall::Api()->post('authenticate', array(
        'username' => 'TakePart',
        'password' => 'sms4takepart',
      ));
      PhoneCampaigns::US()->initiateFlow($config['us_mobile_flow_id'], $phone);
      Waterfall::Api()->post('authenticate/logout');
    }
  }
}
