<?php
/**
 * hook permission
 */
function newsletter_campaign_permission() {
  return array(
    'view newsletter campaign' => array(
      'title' => t('View newsletter campaign entity'),
    ),
    'add newsletter campaign' => array(
      'title' => t('Add newsletter campaign entity'),
    ),
    'edit newsletter campaign' => array(
      'title' => t('Edit newsletter campaign entity'),
    ),
  );
}

/**
 * Implementation of hook_entity_info
 *
 */
function newsletter_campaign_entity_info() {
  return array(
    'newsletter_campaign' => array(
      'label' => t("TakePart Newsletter"),
      'base table' => 'newsletter_campaign',
      'controller class' => 'EntityAPIController',
      'load hook' => 'newsletter_campaign_load',
      'uri callback' => '_newsletter_campaign_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'label' => 'title',
        'id' => 'ncid',
      ),
      'view modes' => array(
        'full' => array(
          'label' => t('Full'),
          'custom settings' => FALSE
        ),
      ),
      'bundles' => array(
        'newsletter_campaign' => array(
          'label' => t('Default bundle'),
          'admin' => array(
            'path' => 'admin/structure/newsletter-campaign',
            'access arguments' => array('administer site configuration'),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_menu()
 */
function newsletter_campaign_menu() {

  $items = array();
  // entity 
  $items['admin/structure/newsletter-campaign'] = array(
    'title' => 'Newsletter Campaigns',
    'description' => 'Adjust the structure of this entity, add fields',
    'page callback' => '_newsletter_campaign_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/structure/newsletter-campaign/list'] = array(
    'title' => 'Newsletter Campaign Instances',
    'description' => 'List all Newsletter Campaigns, Landing Page for campaign management.',
    'page callback' => '_newsletter_campaign_list',
    'access arguments' => array('view newsletter campaign'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  /*
  $items['admin/structure/newsletter-campaign/signups'] = array(
    'title' => 'Signups',
    'description' => 'List all signups',
    'page callback' => '_newsletter_signups_list',
    'access arguments' => array('view newsletter campaign'),
    'type' => MENU_LOCAL_TASK
  );
  */
  $items['admin/structure/newsletter-campaign/settings'] = array(
    'title' => 'Settings',
    'description' => 'Global newsletter settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_newsletter_campaign_settings'),
    'access arguments' => array('view newsletter campaign'),
    'file' => 'campaign.crud.inc',   
    'weight' => 100, 
    'type' => MENU_LOCAL_TASK
  );
    
  $items['admin/structure/newsletter-campaign/add'] = array(
    'title' => 'Add a Newsletter Campaign',
    'description' => 'Add a new Newsletter campaign instance',
    'page callback' => '_newsletter_campaign_add',
    'access arguments' => array('add newsletter campaign'),
    'file' => 'campaign.crud.inc',
  );

  $items['admin/structure/newsletter-campaign/%newsletter_campaign/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit an instance of this entity',
    'page callback' => '_newsletter_campaign_edit',
    'page arguments' => array(3),
    'access arguments' => array('edit newsletter campaign'),
    'file' => 'campaign.crud.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/structure/newsletter-campaign/%newsletter_campaign/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete an instance of this entity',
    'page callback' => '_newsletter_campaign_delete',
    'page arguments' => array(3),
    'access arguments' => array('edit newsletter campaign'),
    'file' => 'campaign.crud.inc',
    'type' => MENU_CALLBACK,
  );  
  
  
  $items['newsletter-campaign/submit-campaign'] = array(
    'title' => t('Newsletter Form Submission'),
    'access arguments' => array('access content'),
    'page callback' => '_newsletter_signup_form_submit_from_ajax',
    'file' => 'signup.ajax.bsd.inc',
    'type' => MENU_CALLBACK,    
  );
  
  $items['newsletter-campaign/unsubscribe'] = array(
    'title' => t('Newsletter Form Submission'),
    'access arguments' => array('access content'),
    'page callback' => '_newsletter_unsubscribe_all',
    'file' => 'signup.ajax.bsd.inc',
    'type' => MENU_NORMAL_ITEM,    
  );

  $items['newsletter-unsubscribe'] = array(
    'title' => t('Newsletter Form Submission'),
    'access arguments' => array('access content'),
    'page callback' => '_newsletter_unsubscribe',
    'file' => 'signup.ajax.bsd.inc',
    'type' => MENU_NORMAL_ITEM,    
  );
  $items['newsletter-unsubscribe/success'] = array(
    'title' => t('Newsletter Unsubscribe'),
    'access arguments' => array('access content'),
    'page callback' => '_newsletter_unsubscribe_success',
    'file' => 'signup.ajax.bsd.inc',
    'type' => MENU_NORMAL_ITEM,    
  );
  
  // newsletter-unsubscribe-problem
  
  // newsletter-unsubscribe-problem
  // newsletter-unsubscribe-confirmation
  
  return $items;
}

/**
 * load callback for entity
 *
 */
function newsletter_campaign_load($ncid = NULL, $reset = FALSE) {
  $ids = (isset($ncid) ? array($ncid) : FALSE);
  $campaigns = newsletter_campaign_load_multiple($ids, NULL, $reset);
  return $campaigns[$ncid];
}

/**
 * define a function for loading multiple entities at once so entity_load can be leveraged
 */
function newsletter_campaign_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  $loaded = entity_load('newsletter_campaign', $ids, $conditions, $reset);
  return $loaded;
}




/**
 * Implementation of hook_block_info()
 */
function newsletter_campaign_block_info() {
  
  try {
    $campaigns = entity_load('newsletter_campaign');
  } catch (Exception $ex) {
    watchdog('newsletter_campaign_block', $ex->getMessage());
    return array();
  }
  
  $blocks = array();
  
  if (!empty($campaigns)) {
    foreach($campaigns as $campaign) {
      $blocks[$campaign->ncid] = array(
        'info' => t($campaign->title . " (Newsletter Campaign)"),
        'cache' => DRUPAL_NO_CACHE,
      );
    }
  }
 
  return $blocks;
}

/**
 * return html to display in block; called from $op = view in hook_block
 */
function newsletter_campaign_block_view($delta) {
  $path = drupal_get_path('module', 'newsletter_campaign');
  drupal_add_js($path .'/js/newsletter_campaign_block.js');
  drupal_add_js($path .'/js/newsletter_campaign_omniture.js');
  
  drupal_add_css($path .'/css/newsletter_campaign_block.css');

  $content = '';
  
  if (is_numeric($delta)) {
    
    try {
      $result = entity_load('newsletter_campaign', array($delta));
    } catch (Exception $ex) {
      watchdog('newsletter_campaign_block_view', $ex->getMessage());
      return array();
    }    
    
    $camp = $result[$delta];
    
    $allowed_tags = array('i', 'strong', 'u');
    
    $form_vars = array(
      'form_id' => check_plain($camp->campaign_id),
      'promo_text' => filter_xss($camp->promo_message, $allowed_tags),
      'header_text' => filter_xss($camp->header, $allowed_tags),
      'signup_form' => drupal_get_form('newsletter_campaign_signup_form', $camp->campaign_id, $camp->signup_form_id, $camp->title)
    );
    
    $content = theme('newsletter_signup_block', $form_vars);
  }
  
  $block = array();
  $block['content'] = $content;
  $block['subject'] = filter_xss($camp->header, $allowed_tags);
  
  return $block;
}

/**
 * Implementation of hook_theme()
 */
function newsletter_campaign_theme() {
  return array(
    'newsletter_signup_block' => array(
      'variables' => array('form_id' => NULL, 'promo_text' => NULL, 'header_text' => NULL, 'signup_form' => NULL),
      'template' => 'newsletter-signup-block',
    ),
  );
}

/**
 * implement hook_form_alter
 * add in submit handler for processing profile opt-in
 */
function newsletter_campaign_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form_user = $form['#user'];
  $lang   = $form['field_registration_email_opt_in']['#language'];
  $opt_in = empty($form_user->field_registration_email_opt_in[$lang][0]['value']) ? FALSE : TRUE;

  // remove the checkbox if already opt'd in, since we have the link to 
  // kick off unsubscription.
  if ($opt_in) {
    unset($form['field_registration_email_opt_in']);
  }
  else { 
    // not opt'd in, so unsub link not necessary.
    unset($form['unsubscribe_link']);
    // add handling for extra profile handling   
    $form['#submit'][]    = '_newsletter_campaign_profile_opt_in_submit';
    $form['#validate'][]  = '_newsletter_campaign_profile_opt_in_validate';  
  }
}

/**
 * implement hook_form_alter
 * add in submit handler for processing registration opt-in
 */
function newsletter_campaign_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][]    = '_newsletter_campaign_registration_opt_in_submit';
  $form['#validate'][]  = '_newsletter_campaign_registration_opt_in_validate';
}

/** 
 * menu callbacks
 */

/**
 * callback for the list page
 */
function _newsletter_campaign_list() {

  $campaigns = newsletter_campaign_load_multiple(FALSE); // load them all
  $h = array(t('Name'), t('Campaign ID'), t('Signup Form ID'), t("Header"), t("Promo Msg"), t("Thank You Msg"), '');
  $t = array();
  foreach($campaigns as $camp) {
    $row = array();
    $row[] = l($camp->title, 'admin/structure/newsletter-campaign/'. $camp->ncid .'/edit');
    $row[] = check_plain($camp->campaign_id);
    $row[] = check_plain($camp->signup_form_id);
    $row[] = filter_xss_admin($camp->header);
    $row[] = filter_xss_admin($camp->promo_message);
    $row[] = filter_xss_admin($camp->thankyou_message);
    $edit   = l('Edit', 'admin/structure/newsletter-campaign/' . $camp->ncid ."/edit");
    $delete = l('X', 'admin/structure/newsletter-campaign/'. $camp->ncid .'/delete', array('attributes' => array('title' => 'Delete')));
    $row[] = "<div style='width:4em'>" .$edit ." | ". $delete . "</div>"; 
    $t[] = $row;
  }

  $table = theme('table', array('header' => $h, 'rows' => $t));
  $camp_links[] = array(
    'title' => t('Add new Newsletter Campaign'),
    'href'  => 'admin/structure/newsletter-campaign/add',
  );

  $links_data = array(
    'heading' => array('text' => t('Administration'), 'level' => 'h2'),
    'links' => $camp_links,
    'attributes' => array('class' => 'tp-newsletter-admin')
  );
  
  $links = theme_links($links_data);
  
  return $links ."<p></p><h2>Newsletter Campaigns</h2>". $table;
}

/** 
 * callback for signup listing
 */
function _newsletter_signups_list() {
  $header = array(
    array('data' => 'Mail', 'field' => 'mail'),
    array('data' => 'Campaign ID', 'field' => 'campaign_id'),
    array('data' => 'Status', 'field' => 'status'), 
    array('data' => 'Subscribe Date', 'field' => 'subscribe_date', 'sort' => 'desc')
  );

  $result = db_select('newsletter_signups', 'ns')
    ->fields('ns', array('mail', 'campaign_id', 'status', 'subscribe_date'))
    ->extend('PagerDefault')
      ->limit(15)
    ->extend('TableSort')
      ->orderByHeader($header)
    ->execute();
  
  $signups = '';
  $table_vars = array(
    'header' => $header,
    'rows' => array(),
    'empty' => 'No signups found.'
  );
  
  while($record = $result->fetchAssoc()) {
    $record['status'] = $record['status'] == 's' ? $record['status'] = 'subscribed' : $record['status'] = 'unsubscribed';
    $record['subscribe_date'] = format_date($record['subscribe_date']);
    $table_vars['rows'][] = array(
      'data' => $record,
    );
  }
  
  $table = theme('table', $table_vars);
  
  $pager =  theme('pager', array('tags' => array()));
  
  return $table . $pager;
}

/**
 * The newsletter form
 *
 * @param $form_state array - required by api; not used
 * @param $campaign_id string - campaign id for subscription
 *
 * @return array - raw form array
 */
function newsletter_campaign_signup_form($form, &$form_state, $campaign_id, $signup_form_id, $newsletter_title) {
  
  $form = array();
  
/*
  drupal_add_js(drupal_get_path('module', 'takepart_newsletter_signup_client') . "/takepart_newsletter_signup.js");
*/  
  // adds ajax functionality to the block
  // add into own file
  drupal_add_js('
    function takepart_input_box_tweak(textBox) {
      textBox.style[\'color\'] = "black";
      textBox.bgColor = "white";
      textBox.value = "";
    }', 'inline'
  );

  drupal_add_js('
    function takepart_newsletter_isValidEmailAddress(emailAddress, formId) {
      var pattern = new RegExp(/^(("[\w-\s]+")|([\w-]+(?:\.[\w-]+)*)|("[\w-\s]+")([\w-]+(?:\.[\w-]+)*))(@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i);
      var isValid = pattern.test(emailAddress);
      
      var mesg_text = "";
      
      if (!isValid) {
        mesg_text = "Email address is invalid.";
      }
      jQuery("#takepart-newsletter-"+formId+"-results").text(mesg_text);
      
      return isValid;
    }', 'inline'
  );

  // takepart_newsletter_isValidEmailAddress(jQuery("#wrapper-form-'.$campaign_id.' [name=email]").val(), "'.$campaign_id.'")
  drupal_add_js('var takepart_newsletter_callcount = 0; jQuery(document).ready(function(context) {
  if(takepart_newsletter_callcount == 0) {
  takepart_newsletter_callcount++;
    jQuery("#wrapper-form-'.$campaign_id.' .form-submit").
      click(function(e) {
      
        e.preventDefault();
        
        var isvalid = takepart_newsletter_isValidEmailAddress(jQuery("#wrapper-form-'.$campaign_id.' [name=email]").val(), "'.$campaign_id.'");
        
        if (isvalid) {
          var data = jQuery("#wrapper-form-'.$campaign_id.' form").serialize();
              
          jQuery("#takepart-newsletter-'.$campaign_id.'-body").hide();
          var spinner = "<div style=\"margin:1em; text-align:center;\"><img src=\"/profiles/takepart/themes/takepart3/images/spinner.gif\" /></div>";
          jQuery("#takepart-newsletter-'.$campaign_id.'-results").prepend(spinner);
          
          jQuery.post("/newsletter-campaign/submit-campaign", data, 
             function(result) {
               jQuery("#takepart-newsletter-'.$campaign_id.'-results").text(result.message);
              }, "json");
        }
        return false;
      });
      }
    });', 'inline'
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => 'Your Email',
    '#size' => 60,
    '#maxlength' => 128,
    //'#attributes' => array('onclick' => 'this.value="blah.'.mt_rand(100, 10000).'@blah.com"; takepart_input_box_tweak(this)'),
    //'#attributes' => array('onclick' => 'takepart_input_box_tweak(this)'),
  );
  
  $form['newsletter_title'] = array(
    '#type' => 'hidden',
    '#value' => $newsletter_title,
  );
  
  $form['campaign_id'] = array(
    '#type' => 'hidden',
    '#value' => $campaign_id,
  );
  
  $form['signup_form_id'] = array(
      '#type' => 'hidden',
      '#value' => $signup_form_id,
  );
  
  // d7 ajax submit handler is bugged.
  $form['submit'] = array(
    '#type' => 'image_button',
    '#src' => '/profiles/takepart/themes/takepart3/images/submit.png',
    // '#src' => '/takepart/takepart-com/drupal/profiles/takepart/themes/takepart3/images/newsletter_icon.png',
    //'#ajax' => array(
    //'callback' => 'ajax_newsletter_campaign_signup_form_submit',
    //'wrapper' => 'result_box',
    //'prevent' => 'click',
    //),
    //'#submit' => array('ajax_newsletter_campaign_signup_form_submit'),
    '#value' => t('Submit'),
    //'#attributes' => array('class' => array('use-ajax-submit')),
  );
  
  return $form;
}

/**
 * Other callbacks & helpers
 */

/**
 * submit handler for opt-in pages.
 */

function _newsletter_campaign_registration_opt_in_submit($form, &$form_state) {
  //$tp_campaign_id = variable_get('newsletter_campaign_tp_opt_in_code', '54');
  $email = $form_state['values']['mail'];
  $lang = $form_state['complete form']['field_registration_email_opt_in']['#language'];
  $opt_in = $form_state['values']['field_registration_email_opt_in'][$lang][0]['value'];
  $tp_signup_id = variable_get('newsletter_campaign_tp_signup_code', 5);
  
  if ($opt_in === 1) {
    /* Pluris legacy code
     * module_load_include('inc', 'newsletter_campaign', 'signup.ajax');
     * $result = _save_campaign_signup($email, $tp_campaign_id, $action = 's', $source = '', $send_welcome = 'y');
     */

    /* 
     * BSD call to process signup form for TakePart newsletter
     * TODO: Pull signup form ID from variable set in CMS interface for campaigns 
     */
    module_load_include('inc', 'newsletter_campaign', 'signup.ajax.bsd');
    $result = takepart_bsd_email_signup($email, $tp_signup_id);
    
    // drupal_set_message($result['message'], 'status', FALSE);
  }
} 

function _newsletter_campaign_profile_opt_in_submit($form, &$form_state) {
  //$tp_campaign_id = variable_get('newsletter_campaign_tp_opt_in_code', '54');
  $tp_signup_id = variable_get('newsletter_campaign_tp_signup_code', 5);
  $email = $form_state['values']['mail'];
  $lang = $form_state['complete form']['field_registration_email_opt_in']['#language'];
  $opt_in = $form_state['values']['field_registration_email_opt_in'][$lang][0]['value'];
  
  if ($opt_in === 1) {
    /* Pluris legacy code
     * module_load_include('inc', 'newsletter_campaign', 'signup.ajax');
     * $result = _save_campaign_signup($email, $tp_campaign_id, $action = 's', $source = '', $send_welcome = 'y');
     */
    
    /* 
     * BSD call to process signup form for TakePart newsletter
     */
    module_load_include('inc', 'newsletter_campaign', 'signup.ajax.bsd');
    $result = takepart_bsd_email_signup($email, $tp_signup_id);
    
    // drupal_set_message($result['message'], 'status', FALSE);
  } 
} 

/**
 * validation for registration form.
 *
 */
function _newsletter_campaign_registration_opt_in_validate($form, &$form_state) {
  // validate email
  valid_email_address($form_state['values']['mail']);
}

/**
 * validation for profile form.
 *
 */
function _newsletter_campaign_profile_opt_in_validate($form, &$form_state) {
  // validate email
  valid_email_address($form_state['values']['mail']);
}

/**
 * URI callback
 */
function _newsletter_campaign_uri($campaign_instance) {
  return array('path' => 'admin/structure/newsletter-campaign/' . $campaign_instance->ncid . '/edit');
}

/**
 * our default campaign 
 */
function _newsletter_campaign_default() {
  $campaign = new stdclass();
  $campaign->ncid = NULL;
  $campaign->title = NULL;
  $campaign->header = NULL;
  $campaign->promo_message = NULL;
  $campaign->campaign_id = NULL;
  $campaign->signup_form_id = NULL;
  $campaign->thankyou_message = NULL;
  
  return $campaign;
}
