<?php

/**
 * Newsletter Campaign Entity.
 */
class NewsletterCampaign extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'newsletter_campaign');
  }

  public function signup($email) {

    // Build the email signup.
    $signup = array(
      $this->bsd_form_id => array(
        $this->bsd_field_id => array(
          'value' => array(
            'type' => 'value',
            'value' => $email,
          ),
        ),
      ),
    );

    // Send the email signup.
    try {
      $api = bluestatedigital_get_api('signup');
      $api->processSignup($signup);
      return TRUE;
    }
    catch (BlueStateDigitalApiException $ex) {
      $message = 'Error sending email signup [@code] @body';
      watchdog('newsletter_campaign', $message, array(
        '@code' => $ex->getResponseCode(),
        '@body' => $ex->getResponseBody(),
      ));
    }
    return FALSE;
  }
}

/**
 * Newsletter Campaign Entity Controller.
 */
class NewsletterCampaignController extends EntityApiController {

  public function create(array $values = array()) {
    $values += array(
      'ncid' => '',
      'title' => '',
      'header' => '',
      'promo_message' => '',
      'thankyou_message' => '',
      'campaign_id' => '',
      'bsd_form_id' => 0,
      'bsd_field_id' => 0,
      'is_new' => TRUE,
    );
    return parent::create($values);
  }
}

/**
 * Newsletter Campaign Admin UI Controller.
 */
class NewsletterCampaignUIController extends EntityDefaultUIController {

  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Manage newsletter campaigns.';
    return $items;
  }
}

/**
 * Implements hook_permission().
 */
function newsletter_campaign_permission() {
  // Return permissions for the standard API Entity operations.
  return array(
    'view newsletter campaign' => array(
      'title' => t('View newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'update newsletter campaign' => array(
      'title' => t('Update newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'create newsletter campaign' => array(
      'title' => t('Create newsletter campaigns'),
      'restrict access' => TRUE,
    ),
    'delete newsletter campaign' => array(
      'title' => t('Delete newsletter campaigns'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback.
 */
function newsletter_campaign_access($op, $campaign = NULL, $account = NULL) {
  // Block unknown operations.
  if (in_array($op, array('view', 'update', 'create', 'delete'))) {
    return user_access("$op newsletter campaign", $account);
  }
  return FALSE;
}

/**
 * Implements hook_entity_info().
 */
function newsletter_campaign_entity_info() {
  return array(
    'newsletter_campaign' => array(
      'label' => t("TakePart Newsletter"),
      'entity class' => 'NewsletterCampaign',
      'controller class' => 'NewsletterCampaignController',
      'base table' => 'newsletter_campaign',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'ncid',
        'label' => 'title',
      ),
      'access callback' => 'newsletter_campaign_access',
      'module' => 'newsletter_campaign',
      'admin ui' => array(
        'path' => 'admin/structure/newsletter-campaign',
        'controller class' => 'NewsletterCampaignUIController',
      ),
    ),
  );
}

/**
 * Newsletter Campaign entity form.
 */
function newsletter_campaign_form($form, &$form_state, $campaign,
  $op = 'edit') {

  $form_state['newsletter_campaign'] = $campaign;

  // update the label and reset the type if we are cloning the type
  if (!isset($form_state['values']) && $op == 'clone') {
    $campaign->title .= ' (cloned)';
    $campaign->ncid = '';
    $campaign->is_new = TRUE;
  }

  $defaults = array(
    'title' => $campaign->title,
    'header' => $campaign->header,
    'promo_message' => $campaign->promo_message,
    'thankyou_message' => $campaign->thankyou_message,
    'campaign_id' => $campaign->campaign_id,
    'bsd_form_id' => $campaign->bsd_form_id,
    'bsd_field_id' => $campaign->bsd_field_id,
  );

  $values = array();
  foreach ($defaults as $name => $value) {
    if (isset($form_state['values'][$name])) {
      $values[$name] = $form_state['values'][$name];
    }
    else {
      $values[$name] = $value;
    }
  }

  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => $values['title'],
    '#description' => t('The human-readable name of the newsletter campaign'),
    '#required' => TRUE,
    '#size' => 30,
  );

  $form['header'] = array(
    '#title' => t('Header'),
    '#type' => 'textfield',
    '#default_value' => $values['header'],
    '#description' => t('Text to use as the header of the newsletter signup block.'),
    '#required' => TRUE,
    '#size' => 60,
  );

  $form['promo_message'] = array(
    '#title' => t('Promo message'),
    '#type' => 'textarea',
    '#default_value' => $values['promo_message'],
    '#description' => t('Message to display before a user submits their email.'),
    '#required' => TRUE,
    '#rows' => 4,
  );

  $form['thankyou_message'] = array(
    '#title' => t('Thank you message'),
    '#type' => 'textarea',
    '#default_value' => $values['thankyou_message'],
    '#description' => t('Message to display after a user submits their email.'),
    '#required' => TRUE,
    '#rows' => 4,
  );

  $form['bluestatedigital'] = array(
    '#type' => 'fieldset',
    '#title' => t('Blue State Digital'),
    '#description' => t('Blue State Digital campaign and signup form configuration.'),
    '#tree' => FALSE,
  );

  $form['bluestatedigital']['campaign_id'] = array(
    '#title' => t('Campaign code'),
    '#type' => 'textfield',
    '#default_value' => $values['campaign_id'],
    '#description' => t('Campaign code generated by Blue State Digital.'),
    '#required' => TRUE,
    '#size' => 20,
  );

  $form['bluestatedigital']['bsd_form_id']
    = bluestatedigital_signup_form_id_field($values['bsd_form_id']);
  $form['bluestatedigital']['bsd_form_id'] += array(
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'newsletter_campaign_form_email_field_callback',
      'wrapper' => 'newsletter-campaign-form-email-field-wrapper',
      'progress' => array(
        'type' => 'throbber',
        'message' => t('Loading fields ...'),
      ),
    ),
  );

  $form['bluestatedigital']['bsd_field_id']
    = bluestatedigital_signup_field_id_field($values['bsd_form_id'], 
      $values['bsd_field_id']);
  $form['bluestatedigital']['bsd_field_id'] += array(
    '#prefix' => '<div id="newsletter-campaign-form-email-field-wrapper">',
    '#suffix' => '</div>',
  );

  $form['actions'] = array('#type' => 'actions');
  $submit = array();
  if (! empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save campaign'),
    '#weight' => 40,
    '#submit' => $submit + array('newsletter_campaign_form_submit'),
  );

  // only add the delete button if we are editting an existing signature type
  if (! empty($campaign->ncid)) {
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete campaign'),
      '#submit' => $submit + array('newsletter_campaign_form_submit_delete'),
      '#weight' => 45,
    );
  }

  $form['actions']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => l(t('Cancel'), 'admin/structure/newsletter-campaign'),
    '#weight' => 50,
  );

  return $form;
}

/**
 * AJAX callback for Blue State Digital signup form field.
 */
function newsletter_campaign_form_email_field_callback($form, $form_state) {
  return $form['bluestatedigital']['bsd_field_id'];
}

/**
 * Newsletter Campaign entity form save (submit) handler
 */
function newsletter_campaign_form_submit(&$form, &$form_state) {

  // build the newsletter campaign entity from the form
  $campaign = entity_ui_form_submit_build_entity($form, $form_state);

  // save the newsletter campaign
  $status = $campaign->save();
  if ($status == SAVED_UPDATED) {
    drupal_set_message(t('The newsletter campaign %name has been updated.',
      array('%name' => $campaign->title)));
  }
  else if ($status == SAVED_NEW) {
    drupal_set_message(t('The newsletter campaign %name has been added.',
      array('%name' => $campaign->title)));
  }

  // go back to the list of newsletter campaigns
  $form_state['redirect'] = 'admin/structure/newsletter-campaign';
}

/**
 * Newsletter Campaign entity form delete (submit) handler
 */
function newsletter_campaign_form_submit_delete(&$form, &$form_state) {

  // go to the delete confirmation page
  $form_state['redirect'] = array(
    'admin/structure/newsletter-campaign/manage/'
      . (string) $form_state['newsletter_campaign']->ncid . '/delete',
    array(
      'query' => array(
        'destination' => 'admin/structure/newsletter-campaign',
      ),
    ),
  );
}

/**
 * Implementation of hook_theme()
 */
function newsletter_campaign_theme() {
  return array(
    'newsletter_signup_block' => array(
      'variables' => array(
        'form_id' => NULL, 
        'promo_text' => NULL, 
        'signup_form' => NULL
      ),
      'template' => 'theme/newsletter-signup-block',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function newsletter_campaign_block_info() {
  $blocks = array();
  foreach (entity_load('newsletter_campaign') as $campaign) {
    $blocks[$campaign->ncid] = array(
      'info' => t('@title (Newsletter Campaign)', 
        array('@title' => $campaign->title)),
      'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function newsletter_campaign_block_view($delta) {

  $content = '';
  $subject = '';

  if (is_numeric($delta)) {

    $campaign = reset(entity_load('newsletter_campaign', array($delta)));
    if ($campaign !== FALSE) {
    
      $path = drupal_get_path('module', 'newsletter_campaign');
      drupal_add_js($path . '/js/newsletter_campaign_block.js');
      drupal_add_css($path . '/css/newsletter_campaign_block.css');

      $allowed_tags = array('i', 'strong', 'u');
      $variables = array(
        'form_id' => check_plain($campaign->campaign_id),
        'promo_text' => filter_xss($campaign->promo_message, $allowed_tags),
        'signup_form' => drupal_get_form('newsletter_campaign_signup_form',
          $campaign),
      );
      $content = theme('newsletter_signup_block', $variables);
      $subject = filter_xss($campaign->header, $allowed_tags);
    }
  }

  return array(
    'content' => $content,
    'subject' => $subject,
  );
}

function newsletter_campaign_signup_form($form, &$form_state, $campaign) {

  $form_state['newsletter_campaign'] = $campaign;

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => 'Your Email',
    '#size' => 60,
    '#maxlength' => 128,
  );

  $submit_src = drupal_get_path('theme', 'takepart3') . '/images/submit_off.png';
  $hover_src = drupal_get_path('theme', 'takepart3') . '/images/submit_on.png';
  $form['submit'] = array(
    '#type' => 'image_button',
    '#src' => $submit_src,
    '#attributes' => array(
      'class' => array('rollover-image-off'),
    ),
    '#prefix' => '<img src="/'. $hover_src . '" class="rollover-image-on" />',
    '#value' => t('Submit'),
    '#submit' => array('newsletter_campaign_signup_form_submit'),
    '#ajax' => array(
      'callback' => 'newsletter_campaign_signup_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  return $form;
}

function newsletter_campaign_signup_form_submit($form, &$form_state) {

  $email = $form_state['values']['email'];
  if (valid_email_address($email)) {
    $form_state['newsletter_campaign_email_is_valid'] = TRUE;
    $campaign = $form_state['newsletter_campaign'];
    $form_state['newsletter_campaign_signup_successful']
      = $campaign->signup($email);
  }
  else {
    $form_state['newsletter_campaign_email_is_valid'] = FALSE;
    $form_state['newsletter_campaign_signup_sucessful'] = FALSE;
  }
}

function newsletter_campaign_signup_form_callback($form, $form_state) {

  $campaign = $form_state['newsletter_campaign'];
  $form_id = check_plain($campaign->campaign_id);
  $message_selector = "#takepart-newsletter-{$form_id}-results";
  $content_selector = "#takepart-newsletter-{$form_id}-body";
  $commands = array();

  if (!empty($form_state['newsletter_campaign_email_is_valid'])) {
 
    // Email was valid, no need to resubmit so hide the form.
    $commands[] = ajax_command_invoke($content_selector, 'hide');

    if (!empty($form_state['newsletter_campaign_signup_successful'])) {
      // Fire the analytics events.
      $commands[] = ajax_command_invoke($message_selector, 'trigger', array(
        'newsletter_signup', array(check_plain($campaign->title)),
      ));
      // Thank the user for their signup.
      $message .= filter_xss($campaign->thankyou_message,
        array('i', 'strong', 'u'));
    }
    else {
      // Inform the user that email signup failed.
      $message = t('We were unable to process your subscription at this time,'
        . ' please try again later.');
    }
  }
  else {
    // Inform the user that the email address is invalid.
    $message = t('Email address is invalid.');
  }

  // Always send back a response message.
  $commands[] = ajax_command_html($message_selector, $message);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

/**
 * Process a signup for a newsletter campaign given the campaign's id.
 *
 * @param int $ncid
 *   The id of the newsletter campaign.
 * @param string $email
 *   The email to signup.
 *
 * @return boolean
 *   TRUE if the signup was successful, false otherwise.
 */
function newsletter_campaign_signup($ncid, $email) {

  $campaign = reset(entity_load('newsletter_campaign', array($ncid)));
  if ($campaign !== FALSE) {
    return $campaign->signup($email);
  }
  return FALSE;
}
