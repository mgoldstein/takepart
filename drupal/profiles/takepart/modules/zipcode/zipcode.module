<?php

/**
 * Implements hook_help()
 */
function zipcode_help($path, $arg) {
  switch ($path) {
    case 'admin/help#zipcode':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ZIP Code module defines a field for storing a zip code, for use with the Field module.') . '</p>';
      $output .= '<p>' . t('This field allows the input of both the base zip code and plus four extended code using two text inputs, and displays a note with information on determing your plus four extended code.') . '</p>';
      $output .= '<p>' . t('See the <a href=""@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_info()
 */
function zipcode_field_info() {
  return array(
    'zip_code' => array(
      'label' => t('ZIP Code'),
      'description' => t('A zip code with optional +4'),
      'instance_settings' => array(
        'note' => "Don't know your full ZIP Code? Look it up <a href=\"http://www.usps.com/zip4/\" target=\"_blank\">here</a>.",
        'plus_four_label' => '+4',
      ),
      'default_widget' => 'two_fields_with_note',
      'default_formatter' => 'zip_code_default',
    ),
  );
}

/**
 * Implements hook_field_instance_settings_form()
 */
function zipcode_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form = array(
    'plus_four_label' => array(
      '#type' => 'textfield',
      '#title' => t('Plus Four Label'),
      '#default_value' => $settings['plus_four_label'],
      '#maxlength' => 255,
      '#description' => t('The label for the +4 field.'),
    ),
    'note' => array(
      '#type' => 'textfield',
      '#title' => t('Full ZIP Code Note'),
      '#default_value' => $settings['note'],
      '#maxlength' => 255,
      '#description' => t('Optional note to display next to zip code fields.')
    ),
  );
  return $form;
}

/**
 * Implements hook_field_is_empty()
 */
function zipcode_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_validate()
 */
function zipcode_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $pattern = "/^([0-9]{5})(-[0-9]{4})?$/";
  foreach ($items as $delta => $item) {
    if (!empty($item['value']) && !preg_match($pattern, $item['value'])) {
      $errors[$field['field_name']][$langcode][$delta][] = array(
        'error' => 'zip_code_invalid',
        'message' => t('ZIP code is not valid.'),
      );
    }
  }
}

/**
 * Implements hook_field_widget_error()
 */
function zipcode_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'zip_code_invalid') {
    form_error($element, $error['message']);
  }
}

/**
 * Implements hook_field_formatter_info()
 */
function zipcode_field_formatter_info() {
  return array(
    'zip_code_default' => array(
      'label' => t('Default'),
      'field types' => array('zip_code'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function zipcode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'zip_code_default') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#type' => 'markup',
        '#markup' => $item['value'],
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_info()
 */
function zipcode_field_widget_info() {
  return array(
    'two_fields_with_note' => array(
      'label' => t('Two text fields with note'),
      'field types' => array('zip_code'),
    ),
  );
}

/**
 * Implements hook_field_widget_form()
 */
function zipcode_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  $settings = $instance['settings'];

  if ($instance['widget']['type'] == 'two_fields_with_note') {

    $pattern = '/^([0-9]{5})(-([0-9]{4}))?$/';
    $matches = array();
    if (!empty($value) && preg_match($pattern, $matches)) {
      $zip_code = $matches[1];
      $plus_four = $matches[3];
    }
    else {
      $zip_code = $value;
      $plus_four = '';
    }

    $element += array(
      '#type' => 'container',
      '#attached' => array(
        'css' => array(
          drupal_get_path('module', 'zipcode') . '/css/field.css',
        ),
      ),
      '#element_validate' => array(
        'zipcode_two_fields_validate'
      ),
      '#theme' => 'zipcode_field',
    );
    $element['zip_code'] = array(
      '#type' => 'textfield',
      '#title' => $element['#title'],
      '#default_value' => $zip_code,
      '#size' => 4,
      '#maxlength' => 5,
      '#required' => $element['#required'],
    );
    $element['plus_four'] = array(
      '#type' => 'textfield',
      '#title' => $settings['plus_four_label'],
      '#default_value' => $plus_four,
      '#size' => 3,
      '#maxlength' => 4,
    );
    $element['zip_help'] = array(
      '#type' => 'markup',
      '#markup' => $settings['note'],
    );
    $element['value'] = array(
      '#type' => 'value',
      '#value' => $value,
    );
  }
  return $element;
}

/**
 * ZIP Code field validation callback
 *
 * Validates the individual fields of the zip code form, and combines them into
 * a single value for the entity field
 */
function zipcode_two_fields_validate($element, &$form_state) {

  $field_name = $element['#field_name'];
  $language = $element['#language'];
  $delta = $element['#delta'];

  // get the individual values from the fields
  $values = $form_state['values'];
  $zip_code = isset($values[$field_name][$language][$delta]['zip_code']) ?
    $values[$field_name][$language][$delta]['zip_code'] : '';
  $plus_four = isset($values[$field_name][$language][$delta]['plus_four']) ?
    $values[$field_name][$language][$delta]['plus_four'] : '';

  if (empty($zip_code) && empty($plus_four)) {
    // clear the entire value if both fields are empty
    $value = array(
      'zip_code' => '',
      'plus_four' => '',
      'value' => '',
    );
  }
  else {
    // validate the plus-four code
    if (! empty($plus_four)) {
      if (! preg_match('/\d{4}/', $plus_four)) {
        form_error($element['plus_four'], t('Invalid ZIP plus-four code.'));
      }
      // if there is a plus-four code, there has to be a zip code
      if (empty($zip_code)) {
        form_error($element['zip_code'], t('Incomplete ZIP code.'));
      }
    }
    // validate the zip code
    if (! empty($zip_code)) {
      if (! preg_match('/\d{5}/', $zip_code)) {
        form_error($element['zip_code'], t('Invalid ZIP code.'));
      }
    }
    // build the single value
    $full_zip = empty($plus_four) ? $zip_code :
      sprintf("%s-%s", $zip_code, $plus_four);
    $value = array(
      'zip_code' => $zip_code,
      'plus_four' => $plus_four,
      'value' => $full_zip,
    );
  }

  // update the form with the combined value
  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_theme()
 */
function zipcode_theme() {
  return array(
    'zipcode_field' => array(
      'render element' => 'content',
      'template' => 'theme/field',
    ),
  );
}
