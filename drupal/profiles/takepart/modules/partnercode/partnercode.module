<?php

/**
 * Implements hook_field_info()
 */
function partnercode_field_info() {
  return array(
    'partner_code' => array(
      'label' => t('Partner Code'),
      'description' => t('The referring partner code'),
      'settings' => array(
        'url_parameter' => '',
        'allowed_values' => array()
      ),
      'default_widget' => 'hidden_input',
      'default_formatter' => 'partner_code_default',
    ),
  );
}

/**
 * Implements hook_field_settings_form()
 */
function partnercode_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];

  $lines = array();
  foreach ($settings['allowed_values'] as $key => $value) {
    $lines[] = "$key|$value";
  }
  $default_allowed_values = implode("\n", $lines);

  $form = array(
    'url_parameter' => array(
      '#type' => 'textfield',
      '#title' => t('URL parameter'),
      '#default_value' => $settings['url_parameter'],
      '#maxlength' => 32,
      '#required' => TRUE,
      '#element_validate' => array('partnercode_url_parameter_validate'),
      '#description' => t('The name of the URL parameter containing the partner code'),
    ),
    'allowed_values' => array(
      '#type' => 'textarea',
      '#title' => t('Allowed values list'),
      '#default_value' => $default_allowed_values,
      '#rows' => 10,
      '#element_validate' => array('partnercode_allowed_values_validate'),
      '#description' => t('The possible values this field can contain. Enter one value per line, in the format token|name. Where token is a limited to lower case letters, numbers and the underscore.'),
      '#field_has_data' => $has_data,
      '#field' => $field,
    ),
  );
  return $form;
}

function partnercode_url_parameter_validate($element, &$form_state) {
  if (!empty($element['#value']) && !preg_match('/[a-zA-Z0-9_]+/', $element['#value'])) {
    form_error($element, t('Invalid URL parameter'));
  }
}

function partnercode_extract_allowed_values($string) {
  $values = array();
  $list = explode("\n", $string);
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
  foreach ($list as $text) {
    $matches = array();
    if (preg_match('/([a-z0-9_]+)\|(.+)/', $text, $matches)) {
      $values[$matches[1]] = $matches[2];
    }
    else {
      return;
    }
  }
  return $values;
}

function partnercode_allowed_values_in_use($field, $values) {
  if ($values) {
    $query = EntityFieldQuery();
    $found = $query
      ->fieldCondition($field['field_name'], 'value', $values)
      ->range(0, 1)
      ->execute();
    return !empty($found);
  }
  return FALSE;
}

function partnercode_allowed_values_validate($element, &$form_state) {
  $field = $element['#field'];
  $values = partnercode_extract_allowed_values($element['#value']);
  if (! is_array($values)) {
    form_error($element, t('Allowed values list: invalid input.'));
  }
  else {
    foreach ($values as $key => $value) {
      if (drupal_strlen($key) > 255) {
        form_error($element, t('Allowed values list: each key must be a string at most 255 characters long.'));
      }
    }
    if ($element['#field_has_data']) {
      $lost_keys = array_diff(array_keys($field['settings']['allowed_values']), array_keys($values));
      if (partnercode_allowed_values_in_use($field, $lost_keys)) {
        form_error($element, t('Allowed values list: some values are being removed while currently in use.'));
      }
    }
    form_set_value($element, $values, $form_state);
  }
}

/**
 * Implements hook_field_is_empty()
 */
function partnercode_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_validate()
 */
function partnercode_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $allowed_values = $field['settings']['allowed_values'];
  foreach ($items as $delta => $item) {
    if (!empty($item['value']) && !empty($allowed_values)) {
      if (!isset($allowed_values[$item['value']])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'partnercode_illegal_value',
          'message' => t('%name: illegal value.', array('%name' => $instance['label'])),
        );
      }
    }
  }
}

/**
 * Implements hook_field_widget_error()
 */
function partnercode_field_widget_error($element, $error, $form, &$form_state) {
  if ($error['error'] == 'partnercode_illegal_value') {
    form_error($element, $error['message']);
  }
}

/**
 * Implements hook_field_formatter_info()
 */
function partnercode_field_formatter_info() {
  return array(
    'partner_code_default' => array(
      'label' => t('Default'),
      'field types' => array('partner_code'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view()
 */
function partnercode_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  if ($display['type'] == 'partner_code_default') {
    foreach ($items as $delta => $item) {
      $element[$delta] = array(
        '#type' => 'markup',
        '#markup' => $item['value'],
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_widget_info()
 */
function partnercode_field_widget_info() {
  return array(
    'hidden_input' => array(
      'label' => t('Hidden input'),
      'field types' => array('partner_code'),
    ),
  );
}

/**
 * Implements hook_field_widget_form()
 */
function partnercode_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
  $settings = $field['settings'];

  if ($instance['widget']['type'] == 'hidden_input') {

    // start off with no partner code
    $value = '';

    // get the partner code from the URL
    if (!empty($settings['url_parameter'])) {
      $value = isset($_GET[$settings['url_parameter']]) ? $_GET[$settings['url_parameter']] : '';
    }

    // discard the value if it is not in the list of allowed values
    if (!empty($value) && !isset($settings['allowed_values'][$value])) {
      $value = '';
    }

    $element += array(
      '#type' => 'container',
      'value' => array(
        '#type' => 'hidden',
        '#default_value' => $value,
      ),
    );
  }
  return $element;
}
