<?php

/**
 * Implements hook_help()
 */
function modalprompt_help($path, $arg) {
  switch ($path) {
    case 'admin/help#modalprompt':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Modal Prompt module defines a field display formatter for presting a text field as a modal prompt, for use with the Field module. This item is displayed using a jQuery modal dialog when the page is loaded. See the <a href=""@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_formatter_info_alter()
 */
function modalprompt_field_formatter_info() {
  return array(
    'modal_prompt' => array(
      'label' => t('Modal Dialog'),
      'field types' => array('text', 'text_long'),
      'settings' => array(
        'title' => '',
        'button' => 'OK',
        'shown' => 'once',
        'cookie' => '',
        'width' => 640,
        'height' => 480,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form()
 */
function modalprompt_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['title'] = array(
    '#title' => t('Title'),
    '#description' => t('The dialog title.'),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#default_value' => $settings['title'],
  );
  $element['button'] = array(
    '#title' => t('Button Text'),
    '#description' => t("The text to display in the dialog's button."),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => $settings['button'],
  );
  $element['shown'] = array(
    '#title' => t('Shown'),
    '#description' => t('How often the prompt should be shown.'),
    '#type' => 'select',
    '#options' => array(
      'always' => t('Always'),
      'session' => t('Session'),
      'once' => t('Once'),
      'never' => t('Never'),
    ),
    '#default_value' => $settings['shown'],
  );
  $element['cookie'] = array(
    '#title' => t('Cookie Name'),
    '#description' => t('The name of the cookie for tracking when the prompt has been shown.'),
    '#type' => 'textfield',
    '#maxlength' => 255,
    '#required' => TRUE,
    '#default_value' => empty($settings['cookie']) ? $field['field_name'] : $settings['cookie'],
  );
  $element['width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['width'],
      '#element_validate' => array('_element_validate_integer_positive'),
  );
  $element['height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#size' => 10,
      '#default_value' => $settings['height'],
      '#element_validate' => array('_element_validate_integer_positive'),
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary()
 */
function modalprompt_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  return sprintf(
    "Dialog (width=%d, height=%d, shown=%s,<br />cookie=%s, title=%s, button=%s)",
    $settings['width'], $settings['height'], $settings['shown'],
    $settings['cookie'], $settings['title'], $settings['button']);
}

/**
 * Implement hook_field_formatter_view()
 */
function modalprompt_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];

  // add the field name to the list of dialogs in the settings
  $settings['dialogs'] = array($field['field_name'],);

  // unset the height and width if they are zero or empty so the dialog size
  // will auto-adjust
  if (empty($settings['width'])) { unset($settings['width']); }
  if (empty($settings['height'])) { unset($settings['height']); }

  // put everything in a single div that will be used to create the dialog
  $element = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('modal-prompt-field'),
    ),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'modalprompt') . '/css/dialog.css' => array(
          'group' => CSS_DEFAULT,
          'type' => 'file',
        ),
      ),
      'js' => array(
        drupal_get_path('module', 'modalprompt') . '/js/field.js' => array(
          'group' => JS_DEFAULT,
          'type' => 'file',
        ),
        array(
          'data' => array('modalprompt' => $settings),
          'type' => 'setting',
        ),
      ),
      'library' => array(
        array('system', 'jquery.cookie'),
        array('system', 'ui.dialog'),
      ),
    ),
  );
  foreach ($items as $delta => $item) {
    if (isset($item['safe_value'])) {
      $output = $item['safe_value'];
    }
    else {
      $output = $instance['settings']['text_processing']
        ? check_markup($item['value'], $item['format'],$langcode)
        : check_plain($item['value']);
    }
    $element[$delta] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array('modal-prompt-content'),
      ),
      'content' => array(
        '#type' => 'markup',
        '#markup' => $output,
      ),
    );
  }
  return $element;
}
