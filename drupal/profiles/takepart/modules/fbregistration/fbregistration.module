<?php

include("includes/fieldmappings.inc");

if (!function_exists('fboauth_action_invoke')) {
  include(drupal_get_path('module', 'fboauth').'/includes/fboauth.fboauth.inc');
}

/**
 * Implement hook_menu().
 */
function fbregistration_menu() {
  $items = array();
  $items['admin/config/people/fbregistration'] = array(
      'title' => 'Facebook Registration',
      'description' => 'Configure required settings for Facebook registration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fbregistration_form'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/fbregistration.admin.inc',
  );
  $items['fbregistration'] = array(
      'title' => 'Facebook Registration',
      'page callback' => '_tfbregistration_auth',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
  );
  return $items;
}

function _tfbregistration_auth() {

  $app_id = variable_get('fboauth_id', '');
  $app_secret = variable_get('fboauth_secret', '');

  if (($_REQUEST) && isset($_REQUEST['signed_request'])) {

    $response = _takepart_facebookapis_parse_signed_request($_REQUEST['signed_request'],$app_secret);

   /*
   foreach ($response['registration'] as $key => $val) {
      if(isset($response['registration'][$key])) {
        if($key == 'field_userfood') {
          if($response['registration'][$key] != 1) {
            drupal_set_message(t('Error: Please except the terms of service'), 'error');
            $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : '<front>';
            drupal_goto($destination);
            exit();
          }
        }
      }
    }
    */

    // The registration data uses the BSD signup form id for newsletter opt-ins.
    // Get a list of Newsletter Campaigns keyed by BSD signup form id so we can
    // process each opt-in.
    $campaigns = entity_load('newsletter_campaign');
    $campaigns_by_bsd_form_id = entity_key_array_by_property($campaigns,
      'bsd_form_id');

    //bsd:
    foreach ($response['registration'] as $key => $val) {
      if((substr($key, 0, 4) == 'bsd_') && ($val == 1)) {

        // Get the signup form id.
        $bsd_keys = (explode('_', $key, 3));
        $signup_id = $bsd_keys[1];

        // Process the newsletter signup
        if (isset($campaigns_by_bsd_form_id[$signup_id])) {
          $campaign = $campaigns_by_bsd_form_id[$signup_id];
          $campaign->signup($response['registration']['email']);
        }

        $response['registration'][$bsd_keys[2]] = $response['registration'][$key];
        if(isset($_SESSION['facebook_bsd_trigger'])) {
          $_SESSION['facebook_bsd_trigger'] = $bsd_keys[1];
        } else {
          $_SESSION['facebook_bsd_trigger'] = $bsd_keys[1];
        }
      }
    }

    if (isset($campaigns_by_bsd_form_id[7])) {
      $campaign = $campaigns_by_bsd_form_id[7];
      $campaign->signup($response['registration']['email']);
    }

    if (isset($_SESSION['facebook'])) {
      unset($_SESSION['facebook']);
    }

    $destination = fboauth_action_invoke('connect', $app_id, $response['oauth_token']);
    $_SESSION['facebook_register_trigger'] = $response['oauth_token'];

    
    if (empty($destination)) {
      $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : '<front>';
    }


    $drupalid = fboauth_uid_load($response['user_id']);

    $account = user_load(array('uid' => $drupalid));
    
    foreach ($account as $key => $val) {
      $fbval = _fbregistration_get_reg_value($response['registration'], $key);
      if(!empty($fbval)) {
        if(is_array($val)) {
          if(count($val)==0) {
            $account->{$key}['und'] = array();
            $account->{$key}['und'][0] = array();
            $account->{$key}['und'][0]['value'] = '';
          }
          _fbregistration_set_userval($account->{$key}, $fbval);
        } 
       }
     }
     
     //special:
     if(isset($response['registration']['email'])) {
        $account->mail = $response['registration']['email'];
     }
     
      $existingusers = db_query("SELECT count(uid) FROM {fbregistration_facebook_id_map} where {uid} = $drupalid")->fetchField();
      
      
      if($existingusers > 0) {
          $result = db_update('fbregistration_facebook_id_map')->fields(array(
		  'fbid' => $response['user_id'],
		))->condition('uid', $drupalid, '=')->execute();
      } else {
          $result = db_insert('fbregistration_facebook_id_map')->fields(array(
		  'uid' => $drupalid,
		  'fbid' => $response['user_id'],
		))->execute();
      }
      
      
    user_save($account);
  
    drupal_goto($destination);

  } else {
    drupal_set_message( t('There was an issue communicating with facebook.'), 'error' );
    watchdog('takepart_facebookapis', 'no signed request', $_REQUEST);
    $destination = isset($_REQUEST['destination']) ? $_REQUEST['destination'] : '<front>';
    drupal_goto($destination);
  }

}


function _fbregistration_set_userval(&$item, $value) {
  foreach ($item as $key => $val) {
    if(is_array($item[$key])) {
      _fbregistration_set_userval($item[$key], $value);
    } elseif($key == 'value' || $key == 'safe_value') {
      $item[$key] = $value;
    }
  }
}



function _fbregistration_get_reg_value($regarray, $key) {
  $ret = '';
  foreach ($regarray as $rkey => $val) {
    if((substr($rkey, 0, 4) == 'bsd_')) {
      $bsd_keys = (explode('_', $key, 3));
      $rkey = $bsd_keys[2];
    }
    if ($rkey == $key) {
        $ret = $val;
        break;
    }
  }
  return $ret;
}

/**
 * Implements hook_form_alter().
 */
function fbregistration_form_alter(&$form, $form_state, $form_id) {

  if((!_fbregistration_checkpath()) ||
    (variable_get('fbregistration_state', '0') != '1') ||
    ($form_id != "user_register_form")) {
    return;
  }

  drupal_set_title(t(variable_get('fbregistration_page_title', 'Register')));

  $mrkup = _fbregistration_getfbreg($form);

  //wipe out existing form:
  $form = array();

  if(($form_id == 'user_register_form') || ($form_id == 'fbconnect_register_page')) {

    $form['test'] = array(
         '#type' => 'item',
         '#title' => t(' '),
         '#markup' => $mrkup,
     );

   }

   
   
   $fbsetfunction = substr(str_shuffle("abcdefghijklmnopqrstuvwxyz"), 0, 10);
   $fbregreloadfunction = substr(str_shuffle("abcdefghijklmnopqrstuvwxyz"), 0, 9);
   $callcount = 10;
   $ziplabel = variable_get('fbregistration_foreign_zip', 'Postal Code');
   
   drupal_add_js('function fbregistration_validate(form) {' .
        '  var errors = {};' . "\n" .
           variable_get('fbregistration_validation', _fbregistration_default_validation())  . "\n" .
        '  return errors;' .
        '}'
       ,
       array('type' => 'inline', 'scope' => 'header', 'weight' => 5)
   );

}



function _fbregistration_default_validation() {
  $v = <<<HTM
  if (form['bsd_0_field_usertermsofservice'] != true) {
    errors['bsd_0_field_usertermsofservice'] = "Please accept the terms of service.";
  }
HTM;
  return $v;
}


function _fbregistration_getfbreg(&$form = null) {

  if($form == null) {
    $form = drupal_get_form('user_register_form');
  }

  $fieldmappings = array();
  $bsdmappings = array();
  $jsondata = array();

  _fbregistration_admin_form_load($form, $fieldmappings);
  _fbregistration_bsd_form_load($form, $bsdmappings);


  foreach ($fieldmappings as $name => $field) {

    if(isset($field['#foreign']['#title'])) {
      $title = $field['#foreign']['#title'];
    } else {
      $title = substr($field['#title'], 0, strrpos($field['#title'], ":"));
      $title = rtrim($title);
    }

    if ((strrpos($field['#default_value'], 'custom') !== 0) && ($field['#default_value'] != 'not_mapped')) {
      array_push($jsondata, array('name' => $field['#default_value']));
    }

    if ((strrpos($field['#default_value'], 'custom') === 0) && ($field['#default_value'] != 'not_mapped')) {

      if($field['#default_value'] == 'custom_text') {
        array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'text'));
      }

      if($field['#default_value'] == 'custom_select') {
        array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'select', 'options' => $field['#foreign']['#options']));
      }


      if($field['#default_value'] == 'custom_checkbox') {

        if((isset($bsdmappings[$name]['#default_value'])) && ($bsdmappings[$name]['#default_value'] != null)) {
          array_push($jsondata, array('name' => 'bsd_' . $bsdmappings[$name]['#default_value'] . "_" .$name, 'description' => $title, 'type' => 'checkbox', 'options' => $field['#foreign']['#options'], 'default' => ((isset($field['#foreign']['#default_value']) && $field['#foreign']['#default_value'] == 1) ? 'checked' : 'unchecked')));
        } else {
          array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'checkbox', 'options' => $field['#foreign']['#options'], 'default' => ((isset($field['#foreign']['#default_value']) && $field['#foreign']['#default_value'] = 1) ? 'checked' : 'unchecked')));
        }
      }

      if($field['#default_value'] == 'custom_typeahead') {
        array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'typeahead', 'categories' => array_keys($field['#foreign']['#options'])));
      }

      if($field['#default_value'] == 'custom_date') {
        array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'date'));
      }

      if($field['#default_value'] == 'custom_hidden') {
        array_push($jsondata, array('name' => $name, 'description' => $title, 'type' => 'hidden'));
      }

    }

    if(isset($form[$name]['#weight'])) {
      $jsondata[count($jsondata)-1]['weight'] = $form[$name]['#weight'];
    }

  }

  //Sort fields by weight:
  for($c=0;$c<sizeof($jsondata);$c++){
    if(!isset($jsondata[$c]['weight'])) {
      $jsondata[$c]['weight'] = $c;
    }
  }
  usort($jsondata, '_fbregistration_sort_json_cmp');
  for($c=0;$c<sizeof($jsondata);$c++){
    if(isset($jsondata[$c]['weight'])) {
      unset($jsondata[$c]['weight']);
    }
  }

  $json = json_encode($jsondata);
  $json = str_replace('"',"'",$json);

  if(isset($_GET['destination'])) {
    $dest = "/fbregistration" . "?destination=" . urlencode($_GET['destination']);
  } else {
    $dest = "/fbregistration";
  }

  $app_id = variable_get('fboauth_id', '');

  if(variable_get('fbregistration_type', 0) == 1)  {
    $fbregtag = variable_get('fbregistration_tag_iframe', '<iframe scrolling="auto" frameborder="no" style="border:none" allowTransparency="true" width="100%" height="530"></iframe>');
    $fbregtag = str_replace('<iframe','<iframe src="//www.facebook.com/plugins/registration.php?fb_register=true&fb_only=false&client_id='.$app_id.'&redirect_uri=' . '//' . $_SERVER['HTTP_HOST'] . $dest . '&fields=' .$json . '"', $fbregtag);
  } else {
    $fbregtag = variable_get('fbregistration_tag_b', '<fb:registration fb_register="true" fb_only="false" width="530"></fb:registration>');
    $fbregtag = str_replace('<fb:registration','<fb:registration onvalidate="fbregistration_validate" fields="'.$json.'" client_id="'.$app_id.'" redirect-uri="//' . $_SERVER['HTTP_HOST'] . $dest . '"', $fbregtag);
  }

  return $fbregtag;

}

function _fbregistration_checkpath() {
  $uri = drupal_get_path_alias($_GET['q']);
  $uri = substr($uri, 0, 24);
  $admgruri = substr($uri, 0, 19);
  if ("/" . $uri == variable_get('fbregistration_path', '/user/register')) {
    return true;
  } else {
    return false;
  }
}

function _fbregistration_sort_json_cmp($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  } else {
    return $a['weight'] > $b['weight'] ? 1 : -1;
  }
}


/**
 * Implements hook_init().
 */
function fbregistration_init() {
  /*
  //registration:
  if (isset($_SESSION['facebook_register_trigger'])) {
    unset($_SESSION['facebook_register_trigger']);
    if((variable_get('facebookapi_on_register', '')) != '') {
      drupal_add_js(variable_get('facebookapi_on_register', ''), array('type' => 'inline', 'scope' => 'header', 'weight' => 5));
    }
  }
  */
}
