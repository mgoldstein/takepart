<?php

include(drupal_get_path('module', 'takepart_bsd').'/include/bsd_api/bsd_api.class.inc');

/**
 * Creates a form field for a BSD form ID
 * 
 * This function creates a form field for entering a BSD form field ID. It gets
 * a current list of forms from BSD and creates a select  field. If it is unable
 * to get the list from BSD, it will fallback to using a textfield
 * 
 * It will also add the current value to the list if it is not in the list of
 * forms retrieved from BSD, marking it as not available
 * 
 * @param int $value
 *   The current form ID value to use as a default value
 * @return associative array
 *   An associative array containing a form field defition
 */
function takepart_bsd_form_id_select_field($value) {
    
  // get the list of bsd signup forms
  $signups = takepart_bsd_signup_list_forms();
  
  if (!empty($signups)) {
  
    $options = array();
    
    // add in the current value if it is not in the signup list
    if ((!empty($value)) && (!array_key_exists($value, $signups))) {
      $options[$value] = t('Form ID: @id (not available)', array('@id' => $value));
    }
    
    // add in the option to have no form
    $options[''] = 'None';
    
    // add in the signup forms
    foreach($signups as $id => $signup) {
      $options[$id] = sprintf('[%d] %s', $id, $signup['signup_form_name']);
    }
    
    $element = array(
      '#type' => 'select',
      '#title' => t('Signup Form'),
      '#description' => t('Blue State Digital Signup Form'),
      '#options' => $options,
      '#default_value' => $value,
    );
  }
  else {
  
    // no signup list could be retrieved, use a textfield instead
    $element = array(
      '#type' => 'textfield',
      '#title' => t('Signup Form ID'),
      '#description' => t('Blue State Digital Signup Form ID'),
      '#size' => 4,
      '#default_value' => $value,
      '#element_validate' => array('takepart_bsd_validate_form_or_field_id'),
    );
  }
  
  return $element;
}

/**
 * Validates that a form element is a positive integer
 *
 * TODO: This should be replaced with element_validate_integer_positive once
 *   we update to Drupal 7.8 or later
 */
function takepart_bsd_validate_form_or_field_id($element, &$form_state) {
  $value = $element['#value'];
  if ($value !== '' && (!is_numeric($value) || intval($value) != $value || $value <= 0)) {
    form_error($element, t('%name must be a positive integer.', array('%name' => $element['#title'])));
  }
}

/**
 * Gets a list of the available BSD signup forms
 * 
 * @return associative array
 *   An associative array keyed by form ID containing form information arrays
 *   each of wich contains the following
 *   - id: the ID of the form
 *   - signup_form_slug: The slug used to created the BSD URL of the form
 *   - signup_form_name: The internal name of the form
 *   - form_public_title: The public title of the form
 *   - created_dt: A string timestamp of when the form was created
 *   - modified_dt: A string timestamp of when the form was last modified 
 */
function takepart_bsd_signup_list_forms() {

  $forms = array();
  
  // get the list of bsd signup forms
  $response = _takepart_bsd_api_query("signup/list_forms");

  $ok_response = ($response['http_code'] == BSD_API::HTTP_CODE_OK);
  $xml_body = (substr($response['body'], 0, 5) == '<?xml');
  if ($ok_response && $xml_body) {
  
    $signup_forms = simplexml_load_string($response['body']);
    foreach ($signup_forms as $child) {
      $key = (int)$child->attributes()->id;
      $forms[$key] = array(
        'id' => (int)$child->attributes()->id,
        'signup_form_slug' => (string)$child->signup_form_slug,
        'signup_form_name' => (string)$child->signup_form_name,
        'form_public_title' => (string)$child->form_public_title,
        'create_dt' => (string)$child->create_dt,
        'modified_dt' => date('Y-m-d H:i:s', (int)$child->attributes()->modified_dt),
      );
    }
  }

  return $forms;
}

/**
 * Gets a single BSD signup form
 * 
 * @param int $id
 *   The id of the BSD signup form
 * @return array|boolean
 *   An associative array containing the form information, or FALSE if the
 *   form could not be retrieved
 * 
 * @see takepart_bsd_signup_list_forms
 */
function takepart_bsd_signup_form($id) {
  $forms = takepart_bsd_signup_list_forms();
  if (array_key_exists($id, $forms)) {
    return $forms[$id];
  }
  return FALSE;
}

/**
 * Gets a list of the fields for a BSD signup form
 * 
 * @param int $id
 *   The ID of the BSD signup form
 * @return associative array keyed by field ID containing field information
 *   arrays each of which contains the following
 *   - id: the ID of the field
 *   - label: The label of the field
 *   - description: A description of the field
 *   - display_order: The position of the field in the form
 *   - is_shown: A flag indicating if the field is shown
 *   - is_required: A flag indicating if the field is required
 *   - is_custom_field: A flag indicating if the field is a custom field
 *   - create_dt: A string timestamp of then the field was created
 *   - form_id: The ID of the form to which the field belongs
 *   - cons_field_id: The ID of the constituent field this field is for
 *   - value: The value of the field, initially NULL, this should be set
 *      the an associate array containing the value(s) of the field before
 *      sending the form back to BSD
 * 
 * @see takepart_bsd_signup_process_signup
 */
function takepart_bsd_signup_list_form_fields($id) {

  $fields = array();

  $response = _takepart_bsd_api_query("signup/list_form_fields",
    array('signup_form_id' => $id));

  $ok_response = ($response['http_code'] == BSD_API::HTTP_CODE_OK);
  $xml_body = (substr($response['body'], 0, 5) == '<?xml');
  if ($ok_response && $xml_body) {
  
    $signup_fields = simplexml_load_string($response['body']);
    foreach ($signup_fields as $child) {
      $key = (int)$child->attributes()->id;
      $fields[$key] = array(
        'id' => (int)$child->attributes()->id,
        'label' => (string)$child->label,
        'description' => (string)$child->description,
        'display_order' => (int)$child->display_order,
        'is_shown' => (int)$child->is_shown,
        'is_required' => (int)$child->is_required,
        'is_custom_field' => (int)$child->is_custom_field,
        'create_dt' => (string)$child->create_dt,
        'form_id' => (int)$id,
        'cons_field_id' => (int)$child->cons_field_id,
        'value' => NULL,
      );
    }
  }
  
  return $fields;
}

function takepart_bsd_signup_process_signup($signup) {
  
  $api = new SimpleXMLElement("<?xml version=\"1.0\" encoding=\"utf-8\"?><api></api>");
  
  foreach ($signup as $form_id => $fields) {
    
    $signup_form = $api->addChild('signup_form');
    $signup_form->addAttribute('id', $form_id);
    
    foreach ($fields as $field_id => $field) {
      
      if (isset($field['value'])) {
        
        $value = $field['value'];
        switch ($value['type']) {
         
          case 'value':
            $signup_field = $signup_form->addChild('signup_form_field',
              $value['value']);
            $signup_field->addAttribute('id', $field_id);
            break;
          
          case 'items':
            $signup_field = $signup_form->addChild('signup_form_field');
            $signup_field->addAttribute('id', $field_id);
            $items = $signup_field->addChild('items');
            foreach ($value['items'] as $item) {
              $items->addChild('item', $item);
            }
            break;
            
          case 'file':
            $signup_field = $signup_form->addChild('signup_form_field');
            $signup_field->addAttribute('id', $field_id);
            $file = $signup_field->addChild('file');
            $file->addChild('filename', $value['filename']);
            $file->addChild('data', $value['data']);
            break;
        }
      }
    }
  }

  $xml = $api->asXML();
  $response = _takepart_bsd_api_post('signup/process_signup', $xml);
  
  $ok_response = ($response['http_code'] == BSD_API::HTTP_CODE_OK);
  $conflict_response = ($response['http_code'] == BSD_API::HTTP_CODE_CONFLICT);
  $xml_body = (substr($response['body'], 0, 5) == '<?xml');
  if (($ok_response || $conflict_response) && $xml_body) {
    $api = simplexml_load_string($response['body']);
    if ($api->count() > 0) {
      foreach ($api as $error) {
        $message = sprintf('BSD Signup Error [%d,%d]: %s',
          (int)$error->signup_form_id, (int)$error->signup_form_field_id,
          (string)$error->description);
        watchdog('takepart_bsd', $message);
      }
    }
  }
  
  return $response;
}

/**
 * Submits a BSD signup form with a single email field
 * 
 * @param string $email
 *   The email to signup
 * @param int $form_id
 *   The ID of the BSD form to use for the signup
 * @param int $field_id
 *   (Optional) ID of the BSD field for the email value, if this value is not
 *   specified a case-insensitive search of the form's fields labels for the
 *   value 'email' is done and the last matching field is used. 
 * @return string
 *   An empty string on successful signup, or an error message
 */
function takepart_bsd_email_signup($email, $form_id, $field_id = -1) {

  $fields = takepart_bsd_signup_list_form_fields($form_id);
  
  if ($field_id == -1) {
    foreach ($fields as $id => $field) {
     if (strtolower((string)$field['label']) == 'email') {
       $field_id = $field['id'];
     }
    }
  }
  
  if (isset($fields[$field_id])) {
    
    $fields[$field_id]['value'] = array(
      'type' => 'value',
      'value' => $email,
    );

    $signup = array($form_id => $fields);
    $response = takepart_bsd_signup_process_signup($signup);
    if ($response['http_code'] == BSD_API::HTTP_CODE_OK) {
      return '';
    }
    // There was an error, return it
    return $response['body'];
  }
  
  // The email field could not be found
  return 'Email field not found.';
}

/**
 *
 * @param string $email
 *   The email to update
 * @param int $subscribed
 *   The subscription state
 * @return string
 *   An empty string on successful signup, or an error message 
 */
function takepart_bsd_email_set_subscription_state($email, $subscribed) {
  
  $response = _takepart_bsd_api_query("cons/get_constituents",
    array('filter' => 'email=' . $email));
 
  $ok_response = ($response['http_code'] == BSD_API::HTTP_CODE_OK);
  $xml_body = (substr($response['body'], 0, 5) == '<?xml');
  if ($ok_response && $xml_body) {
  
    $api = simplexml_load_string($response['body']);
    
    // check if any matching constituent was found
    if ($api->count() > 0) {

      $cons_id = $api->cons->attributes()->id;
     
      $api = new SimpleXMLElement("<?xml version=\"1.0\" encoding=\"utf-8\"?><api></api>");
      $cons = $api->addChild('cons');
      $cons->addAttribute('id', $cons_id);
      $cons->addAttribute('is_new', 0);
      $cons->addChild('email', $email);
      $cons->addChild('is_subscribed', $subscribed);

      $xml = $api->asXML();
      $response = _takepart_bsd_api_post('cons/set_constituent_data', $xml);
    }
  }

  if ($response['http_code'] == BSD_API::HTTP_CODE_OK) {
    return '';
  }
  // There was an error, return it
  return $response['body'];
}

/**
 * Submit a GET request to BSD
 * 
 * @param string $url
 *   The URL to request (relative to /page/api/ on TakePart BSD domain)
 * @param array $query
 *   An associative array containing the GET parameters
 * @param bool $block
 *   A boolean indiciting if the call should block and wait for a deferred
 *   response
 * @return associative array containing
 *   http_code: The HTTP response code of the request
 *   body: The body of the response 
 */
function _takepart_bsd_api_query($url, $query, $block = TRUE) {
  
  $bsd = new BSD_API(
    variable_get('takepart_bsd_api_id', 'takepart-com'),
    variable_get('takepart_bsd_api_secret', 'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8'),
    variable_get('takepart_bsd_api_restmethod', BSD_API::REST_METHOD_STREAM_WRAPPER)
  );
  return $bsd->callApi($url, $query, NULL, $block);
}

/**
 * Submit a POST request to BSD
 * 
 * @param string $url
 *   The URL to request (relative to /page/api on TakePart BSD domain)
 * @param string $data
 *   The data to post
 * @param type $block
 *   A boolean indiciting if the call should block and wait for a deferred
 *   response
 * @return associative array containing
 *   http_code: The HTTP response code of the request
 *   body: The body of the response 
 */
function _takepart_bsd_api_post($url, $data, $block = TRUE) {
  
  $bsd = new BSD_API(
    variable_get('takepart_bsd_api_id', 'takepart-com'),
    variable_get('takepart_bsd_api_secret', 'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8'),
    variable_get('takepart_bsd_api_restmethod', BSD_API::REST_METHOD_STREAM_WRAPPER)
  );
  return $bsd->callApi($url, NULL, $data, $block);
}

/**
 * Implements hook_menu()
 */
function takepart_bsd_menu() {

  $items = array();

  // Administration page
  $items['admin/config/development/takepart_bsd'] = array(
    'title' => 'TakePart BSD',
    'description' => 'Configuration for the TakePart BSD module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('takepart_bsd_form'),
    'access arguments' => array('administer users'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Test page
  $items['admin/config/development/takepart_bsd/test'] = array(
    'title' => 'BSD Test Page',
    'page callback' => '_takepart_bsd_test_page',
    'access arguments' => array('administer users'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Admin Form; implements hook_form
 */
function takepart_bsd_form($form, &$form_state) {
  $form['takepart_bsd_api_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API ID'),
    '#required' => TRUE,
    '#size' => 40,
    '#maxlength' => 64,
    '#default_value' => variable_get('takepart_bsd_api_id', 'takepart-com')
  );
  $form['takepart_bsd_api_secret'] = array(
      '#type' => 'textfield',
      '#title' => t('API Secret'),
      '#required' => TRUE,
      '#size' => 40,
      '#maxlength' => 64,
      '#default_value' => variable_get('takepart_bsd_api_secret', 'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8')
  );
  $form['takepart_bsd_api_restmethod'] = array(
      '#type' => 'select',
      '#title' => t('REST Method'),
      '#default_value' => variable_get('takepart_bsd_api_restmethod', 0),
      '#options' => array(0 => t('Stream Wrappers'), 1 => t('Curl'),),
      '#required' => TRUE,
  );
  $form['submit'] = array(
  	'#type' => 'submit',
  	'#value' => t('Save settings'),
  );
  return $form;
}

//Menu callback for test page:
function _takepart_bsd_test_page() {

  takepart_bsd_email_signup('jp@takepart.com', 19);
  
  takepart_bsd_email_set_subscription_state('jp@takepart.com', 0);
}

/**
* Save Configuration:
*/
function takepart_bsd_form_submit($form, &$form_state) {
  variable_set('takepart_bsd_api_id', $form_state['values']['takepart_bsd_api_id']);
  variable_set('takepart_bsd_api_secret', $form_state['values']['takepart_bsd_api_secret']);
  variable_set('takepart_bsd_api_restmethod', $form_state['values']['takepart_bsd_api_restmethod']);
  drupal_set_message(t('The Blue State Digital Support settings have been saved'));
}
