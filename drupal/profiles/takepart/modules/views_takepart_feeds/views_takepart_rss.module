<?php

/*
 * views_takepart_feeds
 * 
 * A module for rendering feeds from Views
 * 
 * Adding a new feed format:
 * 1) Add element to the array in the 
 * views_takepart_rss_views_takepart_rss_formats function in
 * /views/views_takepart_rss.views.inc ex:
 * '[name]' => t('[Name]'),
 * 2) Add template_preprocess_views_views_takepart_rss_style_[name]
 * hook in /views/theme/views_views_xml_style.theme.inc
 * 3) Add template file, ex /views/theme/views-views-takepart-rss-style-[name].tpl.php
 * 4) (Optional) Add form options as needed in:
 * /views/plugins/views_plugin_style_takepart_rss.inc
 * these will show up on the second screen in views after choosing 
 * "TakePart Feed Formats" as the view format.
 * 
 */

/**
 * Implements hook_views_api().
 */
function views_takepart_rss_views_api() {

    //echo drupal_get_path('module', 'views_takepart_rss');
    return array(
        'api' => 2,
        'path' => drupal_get_path('module', 'views_takepart_rss') . '/views',
    );
}

/**
 * Takes each field from a row object and renders the field as determined by the field's theme
 *
 * @param $view
 *   View the row belongs to
 * @param $row
 *   Row object
 * @return array
 *   Object containing all the raw and rendered fields
 */
function _views_takepart_rss_render_fields($view, $row) {

    $field_ids = array_keys($view->field);
    $rendered_fields = array();
    foreach ($field_ids as $id) {
        $field = $view->field[$id];
        $field_is_multiple = FALSE;
        $field_raw = array();
        $field_output = $view->field[$field->options['id']]->advanced_render($row);
        $field_raw = (isset($view->field[$id]->field_alias) && isset($row->{$view->field[$id]->field_alias})) ? $row->{$view->field[$id]->field_alias} : NULL;
        if (empty($field->options['exclude']) && ($field_output != "") && !empty($field_output)) {
            $object = new stdClass();
            $object->id = $id;
            $object->content = $field_output;
            //$object->content = 'test';
            $object->raw = $field_raw;
            $object->class = drupal_clean_css_identifier(strtolower($id));
            $object->label = check_plain($view->field[$id]->label());
            $object->is_multiple = $field_is_multiple;
            $rendered_fields[$id] = $object;
        }
    }
    return $rendered_fields;
}

/**
 * Replaces illegal characters in a attribute value string with their encoded entities as well as the " char.
 */
function _views_takepart_rss_strip_illegal_xml_attribute_value_chars($input) {
    $output = str_replace('<', '&lt;', $input);        // encode left-angled bracket
    $output = str_replace('>', '&gt;', $output);        // encode right-angled bracket
    $output = str_replace('"', '&quot;', $output);      // encode quote
    return $output;
}

/**
 * Use proper strings in XML nodes:
 * (may not need this due to CDATA use)
 * 
 */
function _views_takepart_rss_xmlEntities($str) {
    $xml = array('&#34;', '&#38;', '&#38;', '&#60;', '&#62;', '&#160;', '&#161;', '&#162;', '&#163;', '&#164;', '&#165;', '&#166;', '&#167;', '&#168;', '&#169;', '&#170;', '&#171;', '&#172;', '&#173;', '&#174;', '&#175;', '&#176;', '&#177;', '&#178;', '&#179;', '&#180;', '&#181;', '&#182;', '&#183;', '&#184;', '&#185;', '&#186;', '&#187;', '&#188;', '&#189;', '&#190;', '&#191;', '&#192;', '&#193;', '&#194;', '&#195;', '&#196;', '&#197;', '&#198;', '&#199;', '&#200;', '&#201;', '&#202;', '&#203;', '&#204;', '&#205;', '&#206;', '&#207;', '&#208;', '&#209;', '&#210;', '&#211;', '&#212;', '&#213;', '&#214;', '&#215;', '&#216;', '&#217;', '&#218;', '&#219;', '&#220;', '&#221;', '&#222;', '&#223;', '&#224;', '&#225;', '&#226;', '&#227;', '&#228;', '&#229;', '&#230;', '&#231;', '&#232;', '&#233;', '&#234;', '&#235;', '&#236;', '&#237;', '&#238;', '&#239;', '&#240;', '&#241;', '&#242;', '&#243;', '&#244;', '&#245;', '&#246;', '&#247;', '&#248;', '&#249;', '&#250;', '&#251;', '&#252;', '&#253;', '&#254;', '&#255;');
    $html = array('&quot;', '&amp;', '&amp;', '&lt;', '&gt;', '&nbsp;', '&iexcl;', '&cent;', '&pound;', '&curren;', '&yen;', '&brvbar;', '&sect;', '&uml;', '&copy;', '&ordf;', '&laquo;', '&not;', '&shy;', '&reg;', '&macr;', '&deg;', '&plusmn;', '&sup2;', '&sup3;', '&acute;', '&micro;', '&para;', '&middot;', '&cedil;', '&sup1;', '&ordm;', '&raquo;', '&frac14;', '&frac12;', '&frac34;', '&iquest;', '&Agrave;', '&Aacute;', '&Acirc;', '&Atilde;', '&Auml;', '&Aring;', '&AElig;', '&Ccedil;', '&Egrave;', '&Eacute;', '&Ecirc;', '&Euml;', '&Igrave;', '&Iacute;', '&Icirc;', '&Iuml;', '&ETH;', '&Ntilde;', '&Ograve;', '&Oacute;', '&Ocirc;', '&Otilde;', '&Ouml;', '&times;', '&Oslash;', '&Ugrave;', '&Uacute;', '&Ucirc;', '&Uuml;', '&Yacute;', '&THORN;', '&szlig;', '&agrave;', '&aacute;', '&acirc;', '&atilde;', '&auml;', '&aring;', '&aelig;', '&ccedil;', '&egrave;', '&eacute;', '&ecirc;', '&euml;', '&igrave;', '&iacute;', '&icirc;', '&iuml;', '&eth;', '&ntilde;', '&ograve;', '&oacute;', '&ocirc;', '&otilde;', '&ouml;', '&divide;', '&oslash;', '&ugrave;', '&uacute;', '&ucirc;', '&uuml;', '&yacute;', '&thorn;', '&yuml;');
    $str = str_replace($html, $xml, $str);
    $str = str_ireplace($html, $xml, $str);
    return $str;
}

/**
 * Strips characters not matching the XML Name production:
 *
 * @param $input
 *   String to process.
 * @return
 *   String with illegal characters stripped.
 */
function _views_takepart_rss_strip_illegal_xml_name_chars($input) {
    $output = preg_replace("/(^xml)|([^A-Za-z0-9_\-\.:])/", "", $input);
    return $output;
}

/**
 * Creates an author object to use in the headers of OPML and Atom documents
 * @param $username
 * @return unknown_type
 */
function _views_takepart_rss_format_author($username) {
    $author = array();
    if (!$username) {
        $author["name"] = variable_get('anonymous', ('Anonymous'));
        $author["email"] = variable_get('site_mail', 'none@none.info');
        return $author;
    }
    if (is_numeric($username)) {
        $user = user_load(array('uid' => $username));
    } else
        $user = user_load(array('name' => $username));
    if (!$user) {
        //$author["name"] = variable_get('anonymous', ('Anonymous'));
        //$author["name"] = variable_get('anonymous', ('Anonymous'));
        $author["name"] = $username;
        $author["email"] = variable_get('site_mail', 'none@none.info');
        return $author;
    }
    if (!module_exists("profile")) {
        $author["name"] = $username;
        $author["email"] = check_plain($user->mail);
        return $author;
    } else {
        profile_load_profile($user);
        $author["name"] = check_plain(($user->profile_name ? $user->profile_name : $username));
        $author["email"] = check_plain($user->mail);
        if (user_access('access user profiles')) {
            $author['uri'] = url('user/' . $user->uid, array('absolute' => TRUE));
        }
        return $author;
    }
}

//Function for returning the title for known taxonomy:
function _takepart_rss_get_taxonomy_title($title, $id) {
    if (!$id) {
        return $title;
    } else {
        $sql = "SELECT
		taxonomy_vocabulary.name as parent,
		taxonomy_term_data.name,
		taxonomy_term_data.description
		FROM
		taxonomy_term_data
		LEFT JOIN taxonomy_vocabulary ON taxonomy_vocabulary.vid = taxonomy_term_data.vid
		where taxonomy_term_data.tid = '" . $id . "'";
        $terms = db_query($sql);
        return $terms;
    }
}

//Function for cleaning up RSS:
function _takepart_rss_clean($s, $striptags = false) {
  if ($striptags) {
    return(_views_takepart_rss_strip_illegal_xml_name_chars(check_plain(html_entity_decode(strip_tags($s)))));
  } else {
    return((check_plain(html_entity_decode($s))));
  }
}

//Get the URL of the current page:
function _takepart_rss_selfURL() {
    if (!isset($_SERVER['REQUEST_URI'])) {
        $serverrequri = $_SERVER['PHP_SELF'];
    } else {
        $serverrequri = $_SERVER['REQUEST_URI'];
    }
    $s = empty($_SERVER["HTTPS"]) ? '' : ($_SERVER["HTTPS"] == "on") ? "s" : "";
    $protocol = _takepart_rss_strleft(strtolower($_SERVER["SERVER_PROTOCOL"]), "/") . $s;
    $port = ($_SERVER["SERVER_PORT"] == "80") ? "" : (":" . $_SERVER["SERVER_PORT"]);
    return $protocol . "://" . $_SERVER['SERVER_NAME'] . $port . $serverrequri;
}

function _takepart_rss_strleft($s1, $s2) {
    return substr($s1, 0, strpos($s1, $s2));
}

//return URL from href:
function _takepart_rss_parseHref($html) {
    $regex = "/<a href=\"(.*)\">(.*)<\/a>/";
    if (preg_match_all($regex, $html, $links)) {
        if ($links[1]) {
            return 'http://' . $_SERVER['SERVER_NAME'] . ($links[1][0]);
        } else {
            return false;
        }
    } else {
        return false;
    }
}

/*
 * Take machine name of content type from the arguments provided to the feed. 
 * Translate machine names into a human-friendly title for the feed.
 */
function _takepart_rss_FeedTitle($arg) {
  switch ($arg) {
    case "action":
	 $feed = 'TakePart - Actions';
	 break;
    case "openpublish_article":
	 $feed = 'TakePart - Articles';
	 break;
    case "campaign":
	 $feed = 'TakePart - Campaigns';
	 break;
    case "feature_article":
	 $feed = 'TakePart - Feature Articles';
	 break;
    case "flashcard":
	 $feed = 'TakePart - Flashcards';
	 break;
    case "openpublish_photo_gallery":
	 $feed = 'TakePart - Photo Galleries';
	 break;
    case "profile":
	 $feed = 'TakePart - Author Profiles';
	 break;
    case "video":
	 $feed = 'TakePart - Videos';
	 break;
    case "video_playlist":
	 $feed = 'TakePart - Video Playlists';
	 break;
	 default:
	   $feed = 'TakePart';
  }
  return $feed;
}

/*
 * Determine the last time the view was updated by the timestamp of the most
 * recent content item, otherwise just use the current time. Drupal views don't 
 * track when they are updated.
 */
function _takepart_rss_LastUpdated($timestamp) {
  if (empty($timestamp)) {
    $time = date("D, d M Y H:i:s T");
  }
  else {
    $time = date("D, d M Y H:i:s T", $timestamp);
  }
  return $time;
}

/*
 * This function returns the hex code value of an HTML special character when provided
 * with a string encoded with htmlentities().  
 */
function hex_encode($str) {
    $dec = html_entity_decode($str, ENT_QUOTES, "UTF-8");
    //convert to UTF-16BE
    $enc = mb_convert_encoding($dec, "UTF-16BE", "UTF-8");
    $out = "";
    foreach (str_split($enc, 2) as $f) {
        $out .= "&#x" . sprintf("%02X", ord($f[0]) << 8 | ord($f[1])) . ";";
    }
    return $out;
}

/*
 * Encode given string with htmlentities then parse with regex and pass each
 * html encoded character to hex_encode for conversion to hex encode
 */
function repl_only_ent($str) {
  $ent = htmlentities($str);
  return preg_replace_callback('/&[^;]+;/',
   function($m) { return hex_encode($m[0]); },
  $ent);
}