<?php
/**
 * @file
 * Module for the TakePartContest Entity
 */

include_once dirname(__FILE__) . '/contest.admin.inc';
include_once dirname(__FILE__) . '/contest.entity.inc';
include_once dirname(__FILE__) . '/contest_entry.admin.inc';
include_once dirname(__FILE__) . '/contest_entry.entity.inc';
include_once dirname(__FILE__) . '/contest_type.admin.inc';
include_once dirname(__FILE__) . '/contest_type.entity.inc';

//Marigold Specific Files:
include_once dirname(__FILE__) . '/includes/marigold-hotel-contest/forms.inc';
include_once dirname(__FILE__) . '/includes/marigold-hotel-contest/themes.inc';
//Other Includes:
include_once dirname(__FILE__) . '/includes/marigold-hotel-contest/widgets.inc';

/**
 * Implements hook_entity_info()
 */
function takepart_contests_entity_info() {

  $info = array();
  
  $info['takepart_contests_contest'] = array(
    'label' => t('Contest'),
    'entity class' => 'TakePartContest',
    'controller class' => 'TakePartContestController',
    'base table' => 'takepart_contests_contest',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'contest_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'takepart_contests_access',
    'module' => 'takepart_contests',
    'admin ui' => array(
      'path' => 'admin/config/marigold-ideasforgood/contests',
      'file' => 'contest.admin.inc',
      'controller class' => 'TakePartContestUIController',
    ),
  );
  
  $info['takepart_contests_contest_entry'] = array(
    'label' => t('Contest Entry'),
    'entity class' => 'TakePartContestEntry',
    'controller class' => 'TakePartContestEntryController',
    'base table' => 'takepart_contests_contest_entry',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'entry_id',
      'bundle' => 'type',
      'label' => 'name',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'takepart_contests_access',
    'module' => 'takepart_contests',
    'static cache' => FALSE,
    'admin ui' => array(
      'path' => 'admin/config/marigold-ideasforgood/contest_entries',
      'file' => 'contest_entry.admin.inc',
      'controller class' => 'TakePartContestEntryUIController',
    ),
  );
  
  $info['takepart_contests_contest_type'] = array(
    'label' => t('Contest Type'),
    'entity class' => 'TakePartContestType',
    'controller class' => 'TakePartContestTypeController',
    'base table' => 'takepart_contests_contest_type',
    'fieldable' => TRUE,
    'bundle of' => 'takepart_contests_contest',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
      'status' => 'status',
      'module' => 'module',
    ),
    'access callback' => 'takepart_contests_access',
    'module' => 'takepart_contests',
    'admin ui' => array(
      'path' => 'admin/config/marigold-ideasforgood/contest_types',
      'file' => 'contest_type.admin.inc',
      'controller class' => 'TakePartContestTypeUIController',
    ),
  );
  
  return $info;
}

/**
 * Implements hook_entity_info_alter()
 */
function takepart_contests_entity_info_alter(&$entity_info) {
  $base = 'admin/config/marigold-ideasforgood/contest_types/manage/';
  foreach (takepart_contests_contest_type_load() as $type => $info) {
    $entity_info['takepart_contests_contest']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => $base . '%takepart_contests_contest_type',
        'bundle argument' => 5,
        'real path' => $base . $type,
        'access arguments' => array(
          'update takepart_contests takepart_contests_contest_type',
        ),
      ),
    );
    $entry_type = $type . '_entry';
    $entity_info['takepart_contests_contest_entry']['bundles'][$entry_type]
      = array(
      'label' => $info->label . ' Entry',
      'admin' => array(
        'path' => $base . '%takepart_contests_contest_entry_type/entry',
        'bundle argument' => 5,
        'real path' => $base . $type . '/entry',
        'access arguments' => array(
          'update takepart_contests takepart_contests_contest_entry',
        ),
      ),
    );
  }
}

/**
 * Implements hook_menu_alter()
 */
function takepart_contests_menu_alter(&$items) {
  $base = 'admin/config/marigold-ideasforgood/contest_types/manage/'
    . '%takepart_contests_contest_entry_type/entry/';
  $items[$base . 'fields']['title'] = 'Manage Entry fields';
  $items[$base . 'fields']['weight'] = 3;
  $items[$base . 'display']['title'] = 'Manage Entry display';
  $items[$base . 'display']['weight'] = 4;
}

/**
 * Implements hook_menu()
 */
function takepart_contests_menu() {
  return array(
    'admin/config/marigold-ideasforgood' => array(
      'title' => 'Marigold Ideas for Good Contest',
      'description' => 'Configuration of the Marigold Ideas for Good contest entry and voting.',
      'position' => 'right',
      'weight' => 0,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
  );
}

/**
 * Placeholder callback for contest entry types
 *
 * @param type $name
 *   The contest bundle name
 * @return
 *   The corresponding contest entry bundle name
 */
function takepart_contests_contest_entry_type_load($name) {
  return $name . '_entry';
}

function takepart_contests_contest_type_load($type_name = NULL) {
  $types = entity_load_multiple_by_name('takepart_contests_contest_type',
    isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Implements hook_permission()
 */
function takepart_contests_permission() {
  // Return permissions for the standard API entity operations.
  return array(
    'administer takepart_contests takepart_contests_contest' => array(
      'title' => t('Administer Contests'),
      'restrict access' => TRUE,
    ),
    'view takepart_contests takepart_contests_contest' => array(
      'title' => t('View Contests'),
    ),
    'update takepart_contests takepart_contests_contest' => array(
      'title' => t('Update Contests'),
      'restrict access' => TRUE,
    ),
    'create takepart_contests takepart_contests_contest' => array(
      'title' => t('Create Contests'),
      'restrict access' => TRUE,
    ),
    'delete takepart_contests takepart_contests_contest' => array(
      'title' => t('Delete Contests'),
      'restrict access' => TRUE,
    ),
    'administer takepart_contests takepart_contests_contest_entry' => array(
      'title' => t('Administer Contest Entries'),
      'restrict access' => TRUE,
    ),
    'view takepart_contests takepart_contests_contest_entry' => array(
      'title' => t('View Contest Entries'),
    ),
    'update takepart_contests takepart_contests_contest_entry' => array(
      'title' => t('Update Contest Entries'),
      'restrict access' => TRUE,
    ),
    'create takepart_contests takepart_contests_contest_entry' => array(
      'title' => t('Create Contest Entries'),
      'restrict access' => TRUE,
    ),
    'delete takepart_contests takepart_contests_contest_entry' => array(
      'title' => t('Delete Contest Entries'),
      'restrict access' => TRUE,
    ),
    'administer takepart_contests takepart_contests_contest_type' => array(
      'title' => t('Administer Contest Types'),
      'restrict access' => TRUE,
    ),
    'view takepart_contests takepart_contests_contest_type' => array(
      'title' => t('View Contest Types'),
    ),
    'update takepart_contests takepart_contests_contest_type' => array(
      'title' => t('Update Contest Types'),
      'restrict access' => TRUE,
    ),
    'create takepart_contests takepart_contests_contest_type' => array(
      'title' => t('Create Contest Types'),
      'restrict access' => TRUE,
    ),
    'delete takepart_contests takepart_contests_contest_type' => array(
      'title' => t('Delete Contest Types'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * User access callback for contests
 */
function takepart_contests_access($op, $entity, $account, $entity_type) {
  // Block unknown operations.
  if (in_array($op, array('administer', 'view', 'update', 'create', 'delete'))) {
    return user_access("$op takepart_contests $entity_type", $account) ||
      user_access("administer takepart_contests $entity_type", $account);
  }
  return FALSE;
}

/**
 * Implements hook_theme()
 */
function takepart_contests_theme() {
  $themes = array(
    'takepart_contests_contest_entry_form'  => array(
      'render element' => 'form',
    ),
    'takepart_contests_contest_entry_form_1_button_next' => array(
      'render element'  => 'element',
    ),
    'takepart_contests_contest_entry_form_1_button_prev' => array(
      'render element'  => 'element',
    ),
    'takepart_contests_contest_entry_form_1_columns' => array(
      'render element'  => 'element',
    ),
    'marigold_hotel_email_share_block' => array(
      'variables' => array(),
      'template' => 'includes/marigold-hotel-contest/templates/email-share-block',
    ),
    'marigold_hotel_email_share_block_2' => array(
      'variables' => array(),
      'template' => 'includes/marigold-hotel-contest/templates/email-share-block-2',
    ),
    'marigold_hotel_saved_entry_block' => array(
      'variables' => array(),
      'template' => 'includes/marigold-hotel-contest/templates/saved-entry-block',
    ),
    'marigold_hotel_addthis_block' => array(
      'variables' => array(),
      'template' => 'includes/marigold-hotel-contest/templates/addthis-block',
    ),
  );
  foreach (entity_load('takepart_contests_contest') as $id => $contest) {
    $contest_form = 'takepart_contests_contest_entry_form_' . $id;
    $themes[$contest_form] = array('render element' => 'form');
  }
  return $themes;
}

/**
 * Implements hook_info().
 */
function takepart_contests_block_info() {
  $blocks = array();

  foreach (entity_load('takepart_contests_contest') as $id => $contest) {
    $blocks['takepart_contests' . $id] = array(
      'info' => t($contest->name),
    );
  }

  //@todo: remove this:
  $blocks['marigold-hotel-contest'] = array(
    'info' => t('Prototype BSD Marigold Hotel Contest')
  );
  $blocks['marigold-hotel-email-share'] = array(
    'info' => t('Marigold Hotel Contest Email Share')
  );
  $blocks['marigold-hotel-email-share-2'] = array(
    'info' => t('Marigold Hotel Contest Email Share 2')
  );
  $blocks['marigold-hotel-saved-entry-block'] = array(
    'info' => t('Marigold Hotel Saved Entry Join Us')
  );
  $blocks['marigold-hotel-addthis-block'] = array(
    'info' => t('Marigold Hotel Contest AddThis')
  );

  return $blocks;
}

/**
 * Implements hook_view().
 */
function takepart_contests_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'marigold-hotel-email-share':
      $block['content'] = _marigold_hotel_contest_emailshare();
      break;
    case 'marigold-hotel-email-share-2':
      $block['content'] = _marigold_hotel_contest_emailshare_2();
      break;
    case 'marigold-hotel-saved-entry-block':
      $block['content'] = _marigold_hotel_saved_entry();
      break;
    case 'marigold-hotel-addthis-block':
      $block['content'] = _marigold_hotel_addthis();
      break;
  }

  foreach (entity_load('takepart_contests_contest') as $id => $contest) {
    if ($delta == 'takepart_contests' . $id) {
      $entry = _takepart_contests_load_previous_entry($contest);
      $block['subject'] = t($contest->name);
      //@todo: change this to something more friendly:
      $function = 'takepart_contests_contest_entry_form_' . $id;
      if (function_exists($function)) {
        $block['content'] = drupal_get_form($function, $entry);
      } else {
        $block['content'] = drupal_get_form('takepart_contests_contest_entry_blank_form', $entry);
      }
      $block['content']['#prefix'] = '<div id="takepart_contests_wrapper_' . $id . '">';
      $block['content']['#suffix'] = '</div>';
    }
  }

  return $block;
}

function _takepart_contests_load_previous_entry($contest) {
  global $user;

  $entry = NULL;
  if (!empty($user->uid) && !empty($user->mail)) {

    // create an entity query
    $query = new EntityFieldQuery();

    // limit the query to contest published entries for this contest
    $query->entityCondition('entity_type', 'takepart_contests_contest_entry');
    $query->propertyCondition('contest_id', $contest->contest_id);
    $query->propertyCondition('status', 1);

    // order the entries with the most recent first
    $query->propertyOrderBy('created', 'DESC');

    // TODO: removed hard coded check for profile_email field only
    $query->fieldCondition('field_profile_email', 'value', $user->mail, '=');

    // get the last entry if it exists
    $query->range(0, 1);
    $results = $query->execute();

    if (! empty($results)) {
      // load the previous entry
      $entries = entity_load('takepart_contests_contest_entry',
        array_keys($results['takepart_contests_contest_entry']));
      $previous_entry = array_shift($entries);
      // clone it
      $entry = clone $previous_entry;
      $entry->entry_id = FALSE;
      $entry->is_new = TRUE;
      $entry->created = 0;
      $entry->changed = 0;
    }
  }
  if (! isset($entry)) {
    // no entry was retrieved so create a new one
    $entry = $contest->createEntry();
  }
  return $entry;
}

function takepart_contests_contest_entry_blank_form($form, &$form_state, $entry, $op) {

  // Some extra markup to let people know there is tech work to do.
  $form['data'] = array(
      '#type' => 'markup',
      '#markup' => '<p></p>'
  );
  return $form;
}

function takepart_contests_get_floating_entry_period_start($count, $units) {
  // start the period at epoch to cover unsupported units
  $start = 0;
  switch ($units) {
    case TakePartContest::UNITS_MINUTES:
      // go back count minutes
      $start = time() - ($count * 60);
      break;
    case TakePartContest::UNITS_HOURS:
      // go back count hours
      $start = time() - ($count * 60 * 60);
      break;
    case TakePartContest::UNITS_DAYS:
      // go back count days
      $start = time() - ($count * 24 * 60 * 60);
      break;
    case TakePartContest::UNITS_WEEKS:
      // go back count weeks
      $start = time() - ($count * 7 * 24 * 60 * 60);
      break;
  }
  return $start;    
}

function takepart_contests_in_slot_entry_period($slot, $entry, $units) {
    
  $slot_date = getdate($slot);
  $entry_date = getdate($entry);

  $week_yday = $slot_date['yday'] - $slot_date['wday'];
  if ($week_yday < 0) {
    // date is in december of previous year
    $slot_date['week-yday'] = 32 + $week_yday;
    $slot_date['week-year'] = $slot_date['year'] - 1;
  }
  else {
    $slot_date['week-yday'] = $week_yday;
    $slot_date['week-year'] = $slot_date['year'];
  }

  $week_yday = $entry_date['yday'] - $entry_date['wday'];
  if ($week_yday < 0) {
    // date is in december of previous year
    $entry_date['week-yday'] = 32 + $week_yday;
    $entry_date['week-year'] = $entry_date['year'] - 1;
  }
  else {
    $entry_date['week-yday'] = $week_yday;
    $entry_date['week-year'] = $entry_date['year'];
  }

  // compare the two dates
  $matches = array();
  foreach ($slot_date as $key => $value) {
    $matches[$key] = ($slot_date[$key] === $entry_date[$key]);
  }

  switch ($units) {
    case TakePartContest::UNITS_HOURS:
      // must match on hour, day of the year and year
      return $matches['hours'] && $matches['yday'] && $matches['year'];
    case TakePartContest::UNITS_DAYS:
      // must match on day of the year and year
      return $matches['yday'] && $matches['year'];
    case TakePartContest::UNITS_WEEKS:
      // must match on the day of the year and year for the start of the week
      return $matches['week-yday'] && $matches['week-year'];
    case TakePartContest::UNITS_MONTHS:
      // must match on month and year
      return $matches['mon'] && $matches['year'];
    case TakePartContest::UNITS_YEARS:
      // must match on year
      return $matches['year'];
    case TakePartContest::UNITS_LIFETIME:
      // always in the lifetime slot
      return TRUE;
  }
  return FALSE;
}

function takepart_contests_contest_entry_allowed($entry) {
    
  // get the associated contest (and entry period)
  $contest = entity_load_single('takepart_contests_contest', $entry->contest_id);

  // check if the entries are even limited
  $duration = $contest->entry_period['duration'];
  $no_limit = ($duration['type'] === TakePartContest::DURATION_NONE);
  $is_span = ($duration['type'] === TakePartContest::DURATION_SPAN);
  $no_count = empty($duration['count']);
  if ($no_limit || ($is_span && $no_count)) {
    return TRUE;
  }

  // create an entity query
  $query = new EntityFieldQuery();

  // limit the query to contest entries for this contest
  $query->entityCondition('entity_type', 'takepart_contests_contest_entry');
  $query->propertyCondition('contest_id', $entry->contest_id);

  // order the entries with the most recent first
  $query->propertyOrderBy('created', 'DESC');

  // TODO: removed hard coded check for profile_email field only
  $value = $entry->field_profile_email[$entry->language][0]['value'];
  $query->fieldCondition('field_profile_email', 'value', $value, '=');

  // get the last entry if it exists
  $query->range(0, 1);
  $results = $query->execute();

  // if there are none, then allow the current entry
  if (empty($results)) {
    return TRUE;
  }

  // completely load the last entry
  $entries = entity_load('takepart_contests_contest_entry',
    array_keys($results['takepart_contests_contest_entry']));
  $last_entry = array_shift($entries);

  // check the creation date against the entry period
  if ($duration['type'] === TakePartContest::DURATION_SPAN) {
    // the entry must be from before the start of the current
    // floating entry period
    $start_of_entry_period = takepart_contests_get_floating_entry_period_start(
      $duration['count'], $duration['units']);
    return ($last_entry->created <= $start_of_entry_period);
  }
  else if ($duration['type'] === TakePartContest::DURATION_SLOT) {
    // the entry must not be in the current entry period slot
    return (! takepart_contests_in_slot_entry_period(time(),
      $last_entry->created, $duration['units']));
  }

  // if we are here the system is misconfigured, don't allow the entry
  // and send a note to the watchdog
  watchdog('takepart_contests', 'Invalid contest period for contest !contest',
    array('!period' => $entry->contest_id), WATCHDOG_ERROR);
  return FALSE;
}