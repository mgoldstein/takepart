<?php
/**
 * @file
 * Module for the TakePartContest Entity
 */

//Marigold Specific Files:
include(drupal_get_path('module', 'takepart_contests').'/includes/marigold-hotel-contest/forms.inc');
include(drupal_get_path('module', 'takepart_contests').'/includes/marigold-hotel-contest/themes.inc');
//Other Includes:
include(drupal_get_path('module', 'takepart_contests').'/includes/marigold-hotel-contest/widgets.inc');


/**
 * Implements hook_entity_info()
 */
function takepart_contests_entity_info() {

  $info = array();

  $info['takepart_contests_contest'] = array(
      'label' => t('Contest'),
      'entity class' => 'TakePartContest',
      'controller class' => 'TakePartContestController',
      'base table' => 'takepart_contests_contest',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'contest_id',
          'bundle' => 'type',
      ),
      'bundles' => array(),
      'bundle keys' => array(
          'bundle' => 'type',
      ),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => '_takepart_contests_contest_access',
      'module' => 'takepart_contests',
      'admin ui' => array(
          'path' => 'admin/content/contests',
          'file' => 'contest.admin.inc',
          'controller class' => 'TakePartContestUIController',
          'menu wildcard' => '%takepart_contests_contest',
      ),
  );

  $info['takepart_contests_contest_entry'] = array(
      'label' => t('Contest Entry'),
      'entity class' => 'TakePartContestEntry',
      'controller class' => 'TakePartContestEntryController',
      'base table' => 'takepart_contests_contest_entry',
      'fieldable' => TRUE,
      'entity keys' => array(
          'id' => 'entry_id',
          'bundle' => 'entry_type',
      ),
      'bundles' => array(),
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'access callback' => '_takepart_contests_contest_entry_access',
      'module' => 'takepart_contests',
      'static cache' => FALSE,
  );

  $info['takepart_contests_contest_type'] = array(
      'label' => t('Contest Type'),
      'entity class' => 'TakePartContestType',
      'controller class' => 'TakePartContestTypeController',
      'base table' => 'takepart_contests_contest_type',
      'fieldable' => FALSE,
      'bundle of' => 'takepart_contests_contest',
      'exportable' => TRUE,
      'entity keys' => array(
          'id' => 'id',
          'name' => 'type',
          'label' => 'label',
      ),
      'access callback' => '_takepart_contests_contest_type_access',
      'module' => 'takepart_contests',
      'admin ui' => array(
          'path' => 'admin/structure/contest_types',
          'file' => 'contest_type.admin.inc',
          'controller class' => 'TakePartContestTypeUIController',
      ),
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter()
 */
function takepart_contests_entity_info_alter(&$entity_info) {

  foreach (takepart_contests_get_types() as $type => $info) {

    $entity_info['takepart_contests_contest']['bundles'][$type] = array(
        'label' => $info->label,
        'admin' => array(
            'path' => 'admin/structure/contest_types/manage/%takepart_contests_contest_type',
            'bundle argument' => 4,
            'real path' => 'admin/structure/contest_types/manage/' . $type,
            'access arguments' => array('administer takepart contest types'),
        ),
    );

    $entry_type = $type . '_entry';
    $entity_info['takepart_contests_contest_entry']['bundles'][$entry_type] = array(
        'label' => $info->label . ' Entry',
        'admin' => array(
            'path' => 'admin/structure/contest_types/manage/%takepart_contests_contest_entry_type/entry',
            'bundle argument' => 4,
            'real path' => 'admin/structure/contest_types/manage/' . $type . '/entry',
            'access arguments' => array('administer takepart contest types'),
        ),
    );
  }
}

/**
 * Implements hook_menu_alter()
 */
function takepart_contests_menu_alter(&$items) {
  $items['admin/structure/contest_types/manage/%takepart_contests_contest_entry_type/entry/fields']['title'] = 'Manage Entry fields';
  $items['admin/structure/contest_types/manage/%takepart_contests_contest_entry_type/entry/fields']['weight'] = 3;
  $items['admin/structure/contest_types/manage/%takepart_contests_contest_entry_type/entry/display']['title'] = 'Manage Entry display';
  $items['admin/structure/contest_types/manage/%takepart_contests_contest_entry_type/entry/display']['weight'] = 4;
}

/**
 * Placeholder callback for contest entry types
 *
 * @param type $name
 *   The contest bundle name
 * @return
 *   The corresponding contest entry bundle name
 */
function takepart_contests_contest_entry_type_load($name) {
  return $name . '_entry';
}

/**
 * Implements hook_permission()
 */
function takepart_contests_permission() {

  $permissions = array(
      'administer takepart contest types' => array(
          'title' => t('Administer contest types'),
          'description' => t('Create and delete fields for contest types, and set their permissions.'),
      ),
      'administer takepart contests' => array(
          'title' => t('Administer contests'),
          'description' => t('Edit and delete all contests'),
      ),
      'edit takepart contests' => array(
          'title' => t('Edit contests'),
          'description' => t('Edit all contests'),
      ),
      'view takepart contests' => array(
          'title' => t('View contests'),
          'description' => t('View all contests'),
      ),
      'administer takepart contest entries' => array(
          'title' => t('Administer contest entries'),
          'description' => t('Edit and delete all contest entries'),
      ),
      'edit takepart contest entries' => array(
          'title' => t('Edit contest entries'),
          'description' => t('Edit all contest entries'),
      ),
      'view takepart contest entries' => array(
          'title' => t('View contest entries'),
          'description' => t('View all contest entries'),
      ),
  );

  return $permissions;
}

function _takepart_contests_contest_access($op, $contest = NULL, $account = NULL) {
  $op = ($op == 'view') ? 'view' : 'edit';
  if (user_access('administer takepart contests', $account) ||
      user_access("$op takepart contests", $account)) {
    return TRUE;
  }
  return FALSE;
}

function _takepart_contests_contest_entry_access($op, $contest = NULL, $account = NULL) {
  $op = ($op == 'view') ? 'view' : 'edit';
  if (user_access('administer takepart contest entries', $account) ||
      user_access("$op takepart contest entries", $account)) {
    return TRUE;
  }
  return FALSE;
}

function _takepart_contests_contest_type_access($op, $contest_type = NULL, $account = NULL) {
  return user_access('administer takepart contest types', $account);
}

function takepart_contests_get_types($type_name = NULL) {
  $types = entity_load_multiple_by_name('takepart_contests_contest_type', isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Implements hook_views_api()
 */
function takepart_contests_views_api() {
  return array(
      'api' => 3,
      'path' => drupal_get_path('module', 'takepart_contests') . '/views',
  );
}

/**
 * Implements hook_theme()
 */
function takepart_contests_theme() {
  $themes = array(
      'takepart_contests_contest_add_list' => array(
          'variables' => array('content' => array()),
          'file' => 'contest.admin.inc',
      ),
      'takepart_contests_contest_entry_form'  => array(
          'render element' => 'form',
      ),
      'takepart_contests_contest_entry_form_1_button_next' => array(
          'render element'  => 'element',
      ),
      'takepart_contests_contest_entry_form_1_button_prev' => array(
          'render element'  => 'element',
      ),
      'takepart_contests_contest_entry_form_1_columns' => array(
          'render element'  => 'element',
      ),
      'marigold_hotel_email_share_block' => array(
          'variables' => array(),
          'template' => 'includes/marigold-hotel-contest/templates/email-share-block',
      ),
      'marigold_hotel_email_share_block_2' => array(
          'variables' => array(),
          'template' => 'includes/marigold-hotel-contest/templates/email-share-block-2',
      ),
      'marigold_hotel_saved_entry_block' => array(
          'variables' => array(),
          'template' => 'includes/marigold-hotel-contest/templates/saved-entry-block',
      ),
      'marigold_hotel_addthis_block' => array(
          'variables' => array(),
          'template' => 'includes/marigold-hotel-contest/templates/addthis-block',
      ),
  );
  $result = _takepart_contests_getlist();
  if(!is_null($result)) {
    foreach ($result as $row) {
      $themes['takepart_contests_contest_entry_form_' . $row->contest_id] = array('render element' => 'form');
    }
  }
  return $themes;
}

/**
 * Implements hook_info().
 */
function takepart_contests_block_info() {
  $blocks = array();

  $result = _takepart_contests_getlist();
  if(!is_null($result)) {
    foreach ($result as $row) {
      $blocks['takepart_contests' . $row->contest_id] = array(
          'info' => t($row->name)
      );
    }
  }

  //@todo: remove this:
  $blocks['marigold-hotel-contest'] = array(
      'info' => t('Prototype BSD Marigold Hotel Contest')
  );

  $blocks['marigold-hotel-email-share'] = array(
      'info' => t('Marigold Hotel Contest Email Share')
  );
  $blocks['marigold-hotel-email-share-2'] = array(
      'info' => t('Marigold Hotel Contest Email Share 2')
  );
  $blocks['marigold-hotel-saved-entry-block'] = array(
      'info' => t('Marigold Hotel Saved Entry Join Us')
  );
  $blocks['marigold-hotel-addthis-block'] = array(
      'info' => t('Marigold Hotel Contest AddThis')
  );

  return $blocks;
}


/**
 * Implements hook_view().
 */
function takepart_contests_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    /*case 'marigold-hotel-contest':
     $block['subject'] = t('BSD Marigold Hotel Contest');
    $block['content'] = drupal_get_form('marigold_hotel_contest_form');
    break;*/
    case 'marigold-hotel-email-share':
      $block['content'] = _marigold_hotel_contest_emailshare();
      break;
    case 'marigold-hotel-email-share-2':
      $block['content'] = _marigold_hotel_contest_emailshare_2();
      break;
    case 'marigold-hotel-saved-entry-block':
      $block['content'] = _marigold_hotel_saved_entry();
      break;
    case 'marigold-hotel-addthis-block':
      $block['content'] = _marigold_hotel_addthis();
      break;
  }

  $result = _takepart_contests_getlist();
  if(!is_null($result)) {
    foreach ($result as $row) {
      if($delta == 'takepart_contests' . $row->contest_id) {
        $contest = takepart_contests_contest_load($row->contest_id);
        $entry = $contest->createEntry();
        $block['subject'] = t($row->name);
        //@todo: change this to something more friendly:
        $function = 'takepart_contests_contest_entry_form_' . $row->contest_id;
        if (function_exists($function)) {
          $block['content'] = drupal_get_form($function, $entry);
        } else {
          $block['content'] = drupal_get_form('takepart_contests_contest_entry_form', $entry);
        }
        $block['content']['#prefix'] = '<div id="takepart_contests_wrapper_'.$row->contest_id.'">';
        $block['content']['#suffix'] = '</div>';
      }
    }
  }

  return $block;
}

/**
 * Implements hook_menu_local_tasks_alter()
 */
function takepart_contests_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'admin/content/contests') {
    $item = menu_get_item('admin/content/contests/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
      );
    }
  }
}

/* TakePart Contest Type API
 ******************************************************************************/

class TakePartContestType extends Entity {

  public $type;
  public $label;
  public $default_entry_period;
  public $weight;

  public function __construct($values = array()) {
    parent::__construct($values, 'takepart_contests_contest_type');
  }
}

class TakePartContestTypeController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {

    $values += array(
        'id' => '',
        'is_new' => TRUE,
    );

    $contest_type = parent::create($values);
    return $contest_type;
  }
}

function takepart_contests_contest_type_create($values = array()) {
  return entity_get_controller('takepart_contests_contest_type')->create($values);
}

function takepart_contests_contest_type_load($type_name) {
  return takepart_contests_get_types($type_name);
}

function takepart_contests_contest_type_save(TakePartContestType $type) {
  return $type->save();
}

function takepart_contests_contest_type_delete(TakePartContestType $type) {
  $type->delete();
}

/* TakePart Contest API
 ******************************************************************************/

class TakePartContest extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'takepart_contests_contest');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    return array('path' => 'admin/content/contests/manage/' . $this->contest_id);
  }

  public function createEntry(array $values = array()) {
    $values += array(
        'contest_id' => $this->contest_id,
        'entry_type' => $this->type . '_entry',
    );
    $entry = entity_get_controller('takepart_contests_contest_entry')->create($values);
    $entry->contest_id = $this->contest_id;
    return $entry;
  }
}

class TakePartContestController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {

    $values += array(
        'contest_id' => '',
        'type' => '',
        'language' => '',
        'is_new' => TRUE,
        'name' => '',
        'created' => '',
        'changed' => '',
        'entry_period' => '',
    );

    $contest = parent::create($values);
    return $contest;
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $content;
  }
}

function takepart_contests_contest_load($contest_id, $reset = FALSE) {
  $contests = takepart_contests_contest_load_multiple(array($contest_id), array(), $reset);
  return reset($contests);
}

function takepart_contests_contest_load_multiple($contest_ids = array(), $conditions = array() , $reset = FALSE) {
  return entity_load('takepart_contests_contest', $contest_ids, $conditions, $reset);
}

function takepart_contests_contest_save(TakePartContest $contest) {
  return $contest->save();
}

function takepart_contests_contest_delete(TakePartContest $contest) {
  $contest->delete();
}

function takepart_contests_contest_delete_multiple(array $contest_ids) {
  entity_get_controller('takepart_contests_contest')->delete($contest_ids);
}

/* TakePart Contest Entry API
 ******************************************************************************/

class TakePartContestEntry extends Entity {

  public $label;
  public $entry_type;

  public function __construct($values = array()) {
    parent::__construct($values, 'takepart_contests_contest_entry');
    $this->label = 'Contest entry';
  }

  protected function defaultLabel() {
    return $this->label;
  }

  protected function defaulUri() {
    return array('path', 'contest/' . $this->contest_id . '/entry/' . $this->entry_id);
  }
}

class TakePartContestEntryController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {

    $values += array(
        'entry_id' => '',
        'contest_id' => '',
        'language' => LANGUAGE_NONE,
        'is_new' => TRUE,
        'uid' => '',
        'created' => '',
        'changed' => '',
    );

    $entry = parent::create($values);
    return $entry;
  }

  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery($ids, $conditions, $revision_id);
    $query->innerJoin('takepart_contests_contest', 'c', 'base.contest_id = c.contest_id');
    $query->addField('c', 'type', 'entry_type');
    return $query;
  }

  protected function attachLoad(&$entries, $revision_id = FALSE) {
    foreach ($entries as $key => $entry) {
      $entry->entry_type = $entry->entry_type . '_entry';
      $entries[$key] = $entry;
    }
    parent::attachLoad($entries, $revision_id);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    $content = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $content;
  }
}

function takepart_contests_contest_entry_load($entry_id, $reset = FALSE) {
  $entries = takepart_contests_contest_entry_load_multiple(array($entry_id), array(), $reset);
  return reset($entries);
}

function takepart_contests_contest_entry_load_multiple($entry_ids = array(), $conditions = array() , $reset = FALSE) {
  return entity_load('takepart_contests_contest_entry', $entry_ids, $conditions, $reset);
}

function takepart_contests_contest_entry_save(TakePartContestEntry $entry) {
  return $entry->save();
}

function takepart_contests_contest_entry_delete(TakePartContestEntry $entry) {
  $entry->delete();
}

function takepart_contests_contest_entry_delete_multiple(array $entry_ids) {
  entity_get_controller('takepart_contests_contest_entry')->delete($entry_ids);
}

function takepart_contests_validate_entry_period($element) {

  $period_xml = trim($element['#value']);
  
  if ($period_xml != '' && substr($period_xml, 0, 5) != '<?xml') {
    form_set_error($element, t('Not valid XML.'));
    return;
  }

  $root = simplexml_load_string($period_xml);
  if (empty($root)) {
    form_error($element, t('Parse error'));
    return;
  }
  
  $keys_found = FALSE;
  foreach ($root->children() as $name => $child) {
    switch ($name) {
      case 'keys':
        $keys_found = TRUE;
        takepart_contests_validate_period_keys($element, $child);
        break;
      case 'duration':
        takepart_contests_validate_period_duration($element, $child);
        break;
    }
  }
  if (!$keys_found) {
    form_error($element, t('Missing period keys'));
  }
}

function takepart_contests_validate_period_keys($element, $keys) {
  foreach ($keys->children() as $name => $key) {
    $invalid_name = ($name != 'key');
    $invalid_structure = (count($key->children()) != 0);
    $invalid_value = (strlen(trim((string)$key)) == 0);
    if ($invalid_name || $invalid_structure || $invalid_value) {
      form_error($element, t('Invalid period key'));
      break;
    }
  }
}

function takepart_contests_validate_period_duration($element, $duration) {
  $attrs = $duration->attributes();
  if (isset($attrs->type)) {
    switch ($attrs->type) {
      case 'slot':
        takepart_contests_validate_slot_duration($element, $duration);
        break;
      case 'span':
        takepart_contests_validate_span_duration($element, $duration);
        break;
      case 'phase':
        takepart_contests_validate_phases_duration($element, $duration);
        break;
      default:
        form_error($element, t('Invalid duration type'));
        break;
    }
  }
  else {
    form_error($element, t('Missing duration type'));
  }
}

function takepart_contests_validate_slot_duration($element, $duration) {
  $valid_units = array('hours','days','weeks','months','years','lifetime');
  if (isset($duration->count)) {
    $count = (string)$duration->count;
    if ($count !== '' && (!is_numeric($count) || intval($count) != $count || $count <= 0)) {
      form_error($element, t('Invalid slot count'));
    }
  }
  if (isset($duration->units)) {
    if (! in_array($duration->units, $valid_units)) {
      form_error($element, t('Invalid slot units'));
    }
  }
  else {
    form_error($element, t('Missing slot units'));
  }
}

function takepart_contests_validate_span_duration($element, $duration) {
  $valid_units = array('hours','days','weeks','months','years');
  if (isset($duration->count)) {
    $count = (string)$duration->count;
    if ($count !== '' && (!is_numeric($count) || intval($count) != $count || $count <= 0)) {
      form_error($element, t('Invalid span count'));
    }
  }
  if (isset($duration->units)) {
    if (! in_array($duration->units, $valid_units)) {
      form_error($element, t('Invalid span units'));
    }
  }
  else {
    form_error($element, t('Missing span units'));
  }
}

function takepart_contests_validate_phases_duration($period) {
 
}

function takepart_contests_contest_entry_allowed($entry) {

  // get the associated contest (and entry period)
  $contest = takepart_contests_contest_load($entry->contest_id);
  $period_xml = isset($contest->entry_period) ? trim($contest->entry_period) : '';

  // if no period is specified, then there are no restrictions
  if ($period_xml === '') {
    return TRUE;
  }
  
  $period = simplexml_load_string($period_xml);
  if (! empty($period)) {

    // create an entity query
    $query = new EntityFieldQuery();
    
    // limit that query to contest entries for this contest
    $query->entityCondition('entity_type', 'takepart_contests_contest_entry');
    $query->propertyCondition('contest_id', $entry->contest_id);
    
    $field_error = FALSE;
    // TODO: removed hard coded check for profile_email field only
    $value = $entry->field_profile_email[LANGUAGE_NONE][0]['value'];
    $query->fieldCondition('field_profile_email', 'value', $value, '=');
    /*
    foreach ($period->keys->children() as $name => $node) {
      $field_name = (string)$node;
      $info = field_info_field($field_name);
      if (isset($info) && isset($entry->{$field_name})) {
        
        $language = isset($entry->language) ? $entry->language : LANGUAGE_NONE;
        foreach ($info['columns'] as $column => $data) {
          $value = $entry->{$field_name}[$language][0][$column];
          $query->fieldCondition($field_name, $column, $value, '=');
        }
      }
      else {
        // the specified field name is missing from the entry or the database
        $field_error = TRUE;
        break;
      }
    }
    */
    if (! $field_error) {
      
      // get the number of matching records
      $query->count();
      $count = $query->execute();

      // only allow the entry if it would be unique according to the key
      return ($count == 0);
    }
  }
  
  // getting down here is BAD, it means the period was not valid, so log the
  // error and don't allow the entry
  watchdog('takepart_contests', 'Invalid contest period [@period]',
    array('@period' => $period_xml), WATCHDOG_ERROR);
  return FALSE;
}



/**  TakePart Contest Test Pages
 **
 ******************************************************************************
 ******************************************************************************/
function takepart_contests_menu() {


  $items = array();

  $items['admin/config/development/takepart_contests/test'] = array(
      'title' => 'TakePart Contests Test Page',
      'page callback' => '_takepart_contests_test_page',
      'access arguments' => array('administer users'),
      'type' => MENU_CALLBACK,
  );


  return $items;
}

function _takepart_contests_test_page() {

  $status = 0;

  // pull a contest from the database, if this was the block_view hook
  // the id could be the $delta, in this case I had a contest in MY system
  // that had an id of 2, you will likely need to change this
  $contest = takepart_contests_contest_load(2);

  // entries should be created off of the contest entity so the
  // contest_id is automatically set
  $entry = $contest->createEntry();

  // get a form for entering the entry data
  return drupal_get_form('takepart_contests_contest_entry_form', $entry, 'entry');
}

function takepart_contests_contest_entry_form($form, &$form_state, $entry, $op) {

  // Some extra markup on the form
  $form['testing'] = array(
      '#type' => 'markup',
      '#markup' => '<p id="thing-to-replace">' . $op . '</p>'
  );

  // add the entity fields to the form
  // the entity itself needs to be stored in the form state with
  // the name of the entity (the key used in the entity_info hook) as the key
  $form_state['takepart_contests_contest_entry'] = $entry;
  field_attach_form('takepart_contests_contest_entry', $entry, $form, $form_state);

  $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save contest'),
      '#weight' => 40,
  );

  $form['actions']['ajax'] = array(
      '#type' => 'submit',
      '#value' => t('Save via AJAX'),
      '#weight' => 45,
      '#ajax' => array(
          'callback' => 'takepart_contests_contest_entry_form_callback',
          'wrapper' => 'thing-to-replace',
          'method' => 'replace',
          'effect' => 'fade',
      ),
  );

  return $form;
}

function takepart_contests_form_takepart_contests_contest_entry_form_alter(&$form, &$form_state, $form_id) {

  // remove the metatags part of the form
  unset($form['metatags']);
  $form['#submit'] = array_diff($form['#submit'], array('metatag_metatags_form_submit'));
}

function takepart_contests_contest_entry_form_validate($form, $form_state) {

  // validate the attached fields
  $entry = $form_state['takepart_contests_contest_entry'];
  field_attach_form_validate('takepart_contests_contest_entry', $entry, $form, $form_state);
}

function takepart_contests_contest_entry_form_callback($form, $form_state) {
  return 'This is a test';
}

function takepart_contests_contest_entry_form_submit(&$form, &$form_state) {

  global $user;

  // build the contest entry entity from the form
  entity_form_submit_build_entity('takepart_contests_contest_entry', $form_state['takepart_contests_contest_entry'], $form, $form_state);
  $entry = $form_state['takepart_contests_contest_entry'];

  // set/update the created and changed timestamps
  $entry->is_new = isset($entry->is_new) ? $entry->is_new : 0;
  if ($entry->is_new) {
    $entry->created = time();
  }
  $entry->changed = time();

  // set the associated user
  $entry->uid = $user->uid;

  // save the entry
  $entry->save();

  $id_to_read_back = $entry->entry_id;

  // read back the entry to make sure that works
  $entry = takepart_contests_contest_entry_load($id_to_read_back);

  drupal_set_message(t('The contest entry %id has been saved and read back.', array('%id' => $entry->entry_id)));
}

/**
 * Get a list of Contests.
 * @return
 * An array of contests;
 * contest_id, type, language, name, created, changed, entry_period
 **/
function _takepart_contests_getlist() {
  //@todo: add caching
  //if(!array_key_exists("takepart_contests_list", $GLOBALS)) {
    $table = 'takepart_contests_contest';
    $result = db_query("SELECT * FROM {$table}");
    //$GLOBALS["takepart_contests_list"] = $result;
 // } else {
 //   $result = $GLOBALS["takepart_contests_list"];
 // }
  return $result;
}