<?php
/**
 * @file
 * Marigold Ideas for Good Contest
 */

include_once dirname(__FILE__) . '/finalist.admin.inc';
include_once dirname(__FILE__) . '/finalist.entity.inc';
include_once dirname(__FILE__) . '/voting_group.admin.inc';
include_once dirname(__FILE__) . '/voting_group.entity.inc';

/**
 * Implements hook_entity_info()
 */
function ideasforgood_entity_info() {

  $info = array();

  $info['ideasforgood_finalist'] = array(
    'label' => t('Marigold Ideas for Good Finalist'),
    'entity class' => 'IdeasForGoodFinalist',
    'controller class' => 'IdeasForGoodFinalistController',
    'base table' => 'ideasforgood_finalist',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ideasforgood_access',
    'module' => 'ideasforgood',
    'admin ui' => array(
      'path' => 'admin/config/marigold-ideasforgood/finalists',
      'file' => 'finalist.admin.inc',
      'controller class' => 'IdeasForGoodFinalistUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
      'locked' => array(
        'label' => t('Locked'),
        'custom settings' => FALSE,
      ),
      'register' => array(
        'label' => t('Register'),
        'custom settings' => FALSE,
      ),
      'vote' => array(
        'label' => t('Vote'),
        'custom settings' => FALSE,
      ),
      'thankyou' => array(
        'label' => t('Thank You'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ideasforgood_voting_group'] = array(
    'label' => t('Marigold Ideas for Good Voting Group'),
    'entity class' => 'IdeasForGoodVotingGroup',
    'controller class' => 'IdeasForGoodVotingGroupController',
    'base table' => 'ideasforgood_voting_group',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'name',
    ),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ideasforgood_access',
    'module' => 'ideasforgood',
    'admin ui' => array(
      'path' => 'admin/config/marigold-ideasforgood/groups',
      'file' => 'voting_group.admin.inc',
      'controller class' => 'IdeasForGoodVotingGroupUIController',
    ),
  );

  return $info;
}

/**
 * Implements hook_permission()
 */
function ideasforgood_permission() {
  // Return permissions for the standard API entity operations.
  return array(
    'administer ideasforgood ideasforgood_finalist' => array(
      'title' => t('Administer Ideas for Good Finalists'),
      'restrict access' => TRUE,
    ),
    'view ideasforgood ideasforgood_finalist' => array(
      'title' => t('View Ideas for Good Finalists'),
    ),
    'update ideasforgood ideasforgood_finalist' => array(
      'title' => t('Update Ideas for Good Finalists'),
      'restrict access' => TRUE,
    ),
    'create ideasforgood ideasforgood_finalist' => array(
      'title' => t('Create Ideas for Good Finalists'),
      'restrict access' => TRUE,
    ),
    'delete ideasforgood ideasforgood_finalist' => array(
      'title' => t('Delete Ideas for Good Finalists'),
      'restrict access' => TRUE,
    ),
    'administer ideasforgood ideasforgood_voting_group' => array(
      'title' => t('Administer Ideas for Good Voting Groups'),
      'restrict access' => TRUE,
    ),
    'view ideasforgood ideasforgood_voting_group' => array(
      'title' => t('View Ideas for Good Voting Groups'),
    ),
    'update ideasforgood ideasforgood_voting_group' => array(
      'title' => t('Update Ideas for Good Voting Groups'),
      'restrict access' => TRUE,
    ),
    'create ideasforgood ideasforgood_voting_group' => array(
      'title' => t('Create Ideas for Good Voting Groups'),
      'restrict access' => TRUE,
    ),
    'delete ideasforgood ideasforgood_voting_group' => array(
      'title' => t('Delete Ideas for Good Voting Groups'),
      'restrict access' => TRUE,
    ),
  );
}

function ideasforgood_access($op, $finalist, $account, $entity_type) {
  // Block unknown operations.
  if (in_array($op, array('administer', 'view', 'update', 'create', 'delete'))) {
    return user_access("$op ideasforgood $entity_type", $account) ||
      user_access("administer ideasforgood $entity_type", $account);
  }
  return FALSE;
}

/**
 * Implements hook_theme()
 */
function ideasforgood_theme($existing, $type, $theme, $path) {
  return array(
    'ideasforgood_finalist__ideasforgood_finalist__full' => array(
      'render element' => 'elements',
      'template' => 'theme/finalist',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__locked' => array(
      'render element' => 'elements',
      'template' => 'theme/finalist',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__register' => array(
      'render element' => 'elements',
      'template' => 'theme/register',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__vote' => array(
      'render element' => 'elements',
      'template' => 'theme/vote',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__thankyou' => array(
      'render element' => 'elements',
      'template' => 'theme/thankyou',
    ),
  );
}

/**
 * Implements hook_views_api()
 */
function ideasforgood_views_api() {
  return array(
    'api' => 3,
  );
}

function ideasforgood_vote_form($form, &$form_state, $finalist) {

  $form_state['ideasforgood_finalist'] = $finalist;

  $items = field_get_items('ideasforgood_finalist', $finalist,
    'ideasforgood_finalist_first_name');
  $first_name = $items[0]['safe_value'];

  $items = field_get_items('ideasforgood_finalist', $finalist,
    'ideasforgood_finalist_last_name');
  $last_name = $items[0]['safe_value'];

  $markup  = '<p>';
  $markup .= 'Please confirm your vote for ';
  $markup .= "{$first_name} {$last_name}.";
  $markup .= '</p>';
  $form['message'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );

  // need to know who the vote is for
  $form['vote'] = array(
    '#type' => 'hidden',
    '#default_value' => $finalist->token,
  );

  $form['centered_content'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'ideasforgood-centered-content'
      ),
    ),
  );

  // use a pretty button for submitting the vote
  $submit_src = implode('/', array(
    drupal_get_path('module', 'ideasforgood'),
    'images',
    'confirm_button.png',
  ));
  $form['centered_content']['submit'] = array(
    '#type' => 'image_button',
    '#src' => $submit_src,
    '#attributes' => array(
      'alt' => t('Confirm'),
      'class' => array(
        'ideasforgood-button-link',
      ),
    ),
    '#submit' => array('ideasforgood_vote_form_submit'),
    '#ajax' => array(
      'callback' => 'ideasforgood_vote_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  $cancel_src = implode('/', array(
    drupal_get_path('module', 'ideasforgood'),
    'images',
    'cancel_button.png',
  ));
  $markup  = '<div>';
  $markup .= '<img';
  $markup .= ' src="/'. $cancel_src . '"';
  $markup .= ' alt="Cancel"';
  $markup .= ' class="ideasforgood-cancel-button"';
  $markup .= ' />';
  $markup .= '</div>';
  $form['centered_content']['cancel'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
  );

  $form['centered_content']['opt_in'] = array(
    '#type' => 'checkbox',
    '#title' => t('Keep this box checked if you would like us to email you about who won.'),
    '#default_value' => TRUE,
  );

  return $form;
}

function ideasforgood_vote_form_submit(&$form, &$form_state) {
  // NOTE: Vote submission disabled as part of email migration from BSD to
  //       Blue Hornet.
}

function ideasforgood_vote_form_callback(&$form, $form_state) {
  global $user;

  $finalist = $form_state['ideasforgood_finalist'];
  $wrapper = "#ideasforgood-finalist-{$finalist->id}-dialog-body";

  $finalist->vote_accepted = empty($form_state['vote_accepted'])
    ? FALSE : TRUE;
  $controller = entity_get_controller('ideasforgood_finalist');
  $content = render($controller->view(array($finalist), 'thankyou'));

  $group = ideasforgood_finalist_group($finalist);
  if ($group !== FALSE) {
    $contest_name = $group->contest;
    $items = field_get_items('ideasforgood_voting_group', $group,
      'ideasforgood_group_destination');
    $destination = $items[0]['safe_value'];
    $items = field_get_items('ideasforgood_voting_group', $group,
      'ideasforgood_group_email');
    $email_note = $items[0]['safe_value'];
    $items = field_get_items('ideasforgood_voting_group', $group,
      'ideasforgood_group_twitter');
    $twitter_template = $items[0]['safe_value'];
  }
  else {
    $contest_name = '';
    $destination = '';
    $email_note = '';
    $twitter_template = '';
  }

  $first_name = field_get_items('ideasforgood_finalist', $finalist,
    'ideasforgood_finalist_first_name');
  $last_name = field_get_items('ideasforgood_finalist', $finalist,
    'ideasforgood_finalist_last_name');
  $values = array(
    '@firstname' => $first_name[0]['safe_value'],
    '@lastname' => $last_name[0]['safe_value'],
  );

  $settings = array(
    'ideasforgood' => array(
      'contest_name' => $contest_name,
      'destination' => $destination,
      'vote_accepted' => $finalist->vote_accepted,
      'finalist_id' => $finalist->id,
      'email_from' => empty($user->mail) ? '' : $user->mail,
      'email_note' => t($email_note, $values),
      'twitter_template' => t($twitter_template, $values),
    ),
  );

  $commands = array();
  $commands[] = ajax_command_settings($settings, TRUE);
  $commands[] = ajax_command_replace($wrapper, $content);

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function ideasforgood_finalist_group($finalist) {

  // create an entity query
  $query = new EntityFieldQuery();

  // limit the query to the ideas for good voting group for the finalist
  $query->entityCondition('entity_type', 'ideasforgood_voting_group');
  $query->propertyCondition('name', $finalist->voting_group);

  // order the entries with the most recently updated first
  $query->propertyOrderBy('changed', 'DESC');

  // get the last entry if it exists
  $query->range(0, 1);
  $results = $query->execute();

  if (! empty($results)) {
    // load the voting group
    $groups = entity_load('ideasforgood_voting_group',
      array_keys($results['ideasforgood_voting_group']));
    return array_shift($groups);
  }
  return FALSE;
}

function ideasforgood_group_content($finalist, $reset = FALSE) {

  static $content;

  if (!isset($content) || $reset) {
    $content = array();
    if (!isset($content[$finalist->voting_group])) {

      // create an entity query
      $query = new EntityFieldQuery();

      // limit the query to the ideas for good voting group for the finalist
      $query->entityCondition('entity_type', 'ideasforgood_voting_group');
      $query->propertyCondition('name', $finalist->voting_group);

      // order the entries with the most recently updated first
      $query->propertyOrderBy('changed', 'DESC');

      // get the last entry if it exists
      $query->range(0, 1);
      $results = $query->execute();

      if (! empty($results)) {
        // load the voting group
        $groups = entity_load('ideasforgood_voting_group',
          array_keys($results['ideasforgood_voting_group']));
        $group = array_shift($groups);

        $content[$finalist->voting_group] = entity_build_content(
          'ideasforgood_voting_group', $group);
      }
    }
  }

  if (isset($content[$finalist->voting_group])) {
    return $content[$finalist->voting_group];
  }
  return array();
}
