<?php

/**
 * @file
 * Marigold Ideas for Good Contest
 */

/**
 * Implements hook_entity_info()
 */
function ideasforgood_entity_info() {

  $info = array();

  $info['ideasforgood_finalist'] = array(
    'label' => t('Marigold Ideas for Good Finalist'),
    'entity class' => 'IdeasForGoodFinalist',
    'controller class' => 'IdeasForGoodFinalistController',
    'base table' => 'ideasforgood_finalist',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ideasforgood_finalist_access',
    'module' => 'ideasforgood',
    'admin ui' => array(
      'path' => 'admin/content/ideasforgood/finalists',
      'file' => 'finalist.admin.inc',
      'controller class' => 'IdeasForGoodFinalistUIController',
    ),
    'view modes' => array(
      'full' => array(
        'label' => t('Default'),
        'custom settings' => FALSE,
      ),
      'register' => array(
        'label' => t('Register'),
        'custom settings' => FALSE,
      ),
      'vote' => array(
        'label' => t('Vote'),
        'custom settings' => FALSE,
      ),
      'thankyou' => array(
        'label' => t('Thank You'),
        'custom settings' => FALSE,
      ),
    ),
  );

  $info['ideasforgood_voting_group'] = array(
    'label' => t('Marigold Ideas for Good Voting Group'),
    'entity class' => 'IdeasForGoodVotingGroup',
    'controller class' => 'IdeasForGoodVotingGroupController',
    'base table' => 'ideasforgood_voting_group',
    'fieldable' => FALSE,
    'entity keys' => array(
       'id' => 'id',
    ),
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'ideasforgood_finalist_access',
    'module' => 'ideasforgood',
    'admin ui' => array(
      'path' => 'admin/content/ideasforgood/groups',
      'file' => 'voting_group.admin.inc',
      'controller class' => 'IdeasForGoodVotingGroupUIController',
    ),
  );

  return $info;
}

/**
 * Implements hook_permission()
 */
function ideasforgood_permission() {
  return array(
    'administer ideasforgood finalists' => array(
      'title' => t('Administer Ideas for Good finalists'),
      'description' => t('Edit and delete all Ideas for Good Finalists'),
    ),
    'edit ideasforgood finalists' => array(
      'title' => t('Edit Ideas for Good Finalists'),
      'description' => t('Edit all Ideas for Good finalists'),
    ),
    'view ideasforgood finalists' => array(
      'title' => t('View Ideas for Good Finalists'),
      'description' => t('View all Ideas for Good finalists'),
    ),
  );
}

function ideasforgood_finalist_access($op, $finalist = NULL, $account = NULL) {
  $op = ($op == 'view') ? 'view' : 'edit';
  if (user_access('administer ideasforgood finalists', $account) ||
      user_access("$op ideasforgood finalists", $account)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_theme()
 */
function ideasforgood_theme($existing, $type, $theme, $path) {
  return array(
    'ideasforgood_finalist__ideasforgood_finalist__full' => array(
      'render element' => 'elements',
      'template' => 'theme/finalist',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__register' => array(
      'render element' => 'elements',
      'template' => 'theme/register',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__vote' => array(
      'render element' => 'elements',
      'template' => 'theme/vote',
    ),
    'ideasforgood_finalist__ideasforgood_finalist__thankyou' => array(
      'render element' => 'elements',
      'template' => 'theme/thankyou',
    ),
  );
}

/**
 * Implements hook_views_api()
 */
function ideasforgood_views_api() {
  return array(
    'api' => 3,
  );
}

function ideasforgood_vote_form($form, &$form_state, $finalist) {

  $form_state['ideasforgood_finalist'] = $finalist;

  $wrapper = "ideasforgood-finalist-{$finalist->id}-dialog-body";

  // need to know who the vote is for
  $form['vote'] = array(
    '#type' => 'hidden',
    '#default_value' => $finalist->token,
  );

  // use a pretty button for submitting the vote
  $submit_src = implode('/', array(
    drupal_get_path('module', 'ideasforgood'),
    'images',
    'confirm_button.png',
  ));
  $form['submit'] = array(
    '#type' => 'image_button',
    '#src' => $submit_src,
    '#attributes' => array(
      'alt' => t('Confirm'),
    ),
    '#submit' => array('ideasforgood_vote_form_submit'),
    '#ajax' => array(
      'callback' => 'ideasforgood_vote_form_callback',
      'wrapper' => $wrapper,
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  return $form;
}

function ideasforgood_vote_form_submit(&$form, &$form_state) {

}

function ideasforgood_vote_form_callback(&$form, $form_state) {
  $finalist = $form_state['ideasforgood_finalist'];
  $finalist->vote_accepted = isset($form_state['vote_accepted'])
    ? $form_state['vote_accepted'] : FALSE;
  $controller = entity_get_controller('ideasforgood_finalist');
  return render($controller->view(array($finalist), 'thankyou'));
}

/* Ideas for Good Finalist API
 ******************************************************************************/

class IdeasForGoodFinalist extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'ideasforgood_finalist');
  }

  protected function defaultLabel() {
    return "{$this->token} [{$this->voting_group}]";
  }

  protected function defaultUri() {
    $path = implode('/', array(
      'admin',
      'content',
      'ideasforgood',
      'finalists',
      'manage',
      $this->id,
    ));
    return array('path' => $path);
  }
}

class IdeasForGoodFinalistController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'id' => '',
      'language' => '',
      'is_new' => TRUE,
      'token' => '',
      'voting_group' => '',
      'created' => 0,
      'changed' => 0,
    );
    return parent::create($values);
  }

  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {

    global $user;
    if ($view_mode == 'full') {
      if (!empty($user->uid)) {
        $content['voting_dialog'] = $this->view(array($entity), 'vote');
      }
      else {
        $content['voting_dialog'] = $this->view(array($entity), 'register');
      }
      $content['vote_for_me_button'] = array(
        'off' =>  implode('/', array(
          drupal_get_path('module', 'ideasforgood'),
          'images',
          'vote_button_off.png',
        )),
        'on' => implode('/', array(
          drupal_get_path('module', 'ideasforgood'),
          'images',
          'vote_button_on.png',
        )),
      );
    }
    else if ($view_mode == 'vote') {
      $content['vote_form'] = drupal_get_form('ideasforgood_vote_form', $entity);
      $content['cancel_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'cancel_button.png',
      ));
    }
    else if ($view_mode == 'register') {
      $content['connect_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'connect_button.png',
      ));
      $content['cancel_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'cancel_button.png',
      ));
    }
    else if ($view_mode == 'thankyou') {
      $content['facebook_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'facebook_share.png',
      ));
      $content['twitter_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'twitter_share.png',
      ));
      $content['email_button'] = implode('/', array(
        drupal_get_path('module', 'ideasforgood'),
        'images',
        'email_share.png',
      ));
    }
    return parent::buildContent($entity, $view_mode, $langcode, $content);
  }

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    // set/update the created and changed timestamps
    $entity->is_new = isset($entity->is_new) ? $entity->is_new : 0;
    if ($entity->is_new) {
      $entity->created = time();
    }
    $entity->changed = time();
    return parent::save($entity, $transaction);
  }
}

function ideasforgood_finalist_load($id, $reset = FALSE) {
  $finalists = ideasforgood_finalist_load_multiple(array($id), array(), $reset);
  return reset($finalists);
}

function ideasforgood_finalist_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ideasforgood_finalist', $ids, $conditions, $reset);
}

function ideasforgood_finalist_save(IdeasForGoodFinalist $finalist) {
  return $finalist->save();
}

function ideasforgood_finalist_delete(IdeasForGoodFinalist $finalist) {
  $finalist->delete();
}

function ideasforgood_finalist_delete_multiple(array $ids) {
  entity_get_controller('ideasforgood_finalist')->delete($ids);
}


/* Ideas for Good Voting Group API
 ******************************************************************************/

class IdeasForGoodVotingGroup extends Entity {

  public function __construct($values = array()) {
    parent::__construct($values, 'ideasforgood_voting_group');
  }

  protected function defaultLabel() {
    return $this->name;
  }

  protected function defaultUri() {
    $path = implode('/', array(
      'admin',
      'content',
      'ideasforgood',
      'groups',
      'manage',
      $this->id,
    ));
    return array('path' => $path);
  }
}

class IdeasForGoodVotingGroupController extends EntityAPIController {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    $values += array(
      'id' => '',
      'language' => '',
      'is_new' => TRUE,
      'name' => '',
      'voting_form_id' => 0,
      'email_field_id' => 0,
      'vote_field_id' => 0,
      'created' => 0,
      'changed' => 0,
    );
    return parent::create($values);
  }

  public function save($entity, DatabaseTransaction $transaction = NULL) {
    // set/update the created and changed timestamps
    $entity->is_new = isset($entity->is_new) ? $entity->is_new : 0;
    if ($entity->is_new) {
      $entity->created = time();
    }
    $entity->changed = time();
    return parent::save($entity, $transaction);
  }
}

function ideasforgood_voting_group_load($id, $reset = FALSE) {
  $groups = ideasforgood_voting_group_load_multiple(array($id), array(), $reset);
  return reset($groups);
}

function ideasforgood_voting_group_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('ideasforgood_voting_group', $ids, $conditions, $reset);
}

function ideasforgood_voting_group_save(IdeasForGoodVotingGroup $group) {
  return $group->save();
}

function ideasforgood_voting_group_delete(IdeasForGoodVotingGroup $group) {
  $group->delete();
}

function ideasforgood_voting_group_delete_multiple(array $ids) {
  entity_get_controller('ideasforgood_voting_group')->delete($ids);
}
