<?php
/**
 * @file
 * Adds a theme function which allows theme developers to use the JW Player.
 */

/**
 * Implements hook_menu().
 */
function jw_player_menu() {
  $items['admin/config/media/jw_player/settings'] = array(
    'title' => 'Settings',
    'description' => 'JW Player general settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer JW Player presets'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jw_player_settings_form'),
    'file' => 'jw_player.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function jw_player_permission() {
  return array(
    'administer JW Player presets' => array(
      'title' => t('administer JW Player presets'),
      'description' => t('Perform administration of JW Player presets'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function jw_player_theme() {
  return array(
    'jw_player' => array(
      'variables' => array(
        'file' => NULL,
        'sources' => NULL,
        'playlist' => NULL,
        'preset' => '',
        'image' => '',
        'html_id' => NULL,
        'options' => array(),
      ),
      'template' => 'theme/jw_player',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function jw_player_field_formatter_info() {
  $formatters = array(
    'jw_player' => array(
      'label' => t('JW player'),
      'field types' => array('file'),
      'settings' => array(
        'jwplayer_preset' => '',
      ),
    ),

    'jw_player_playlist' => array(
      'label' => t('JW player playlist'),
      'field types' => array('file'),
      'settings' => array(
        'jwplayer_preset' => '',
      ),
    ),

    'jw_player_sources' => array(
      'label' => t('JW player sources'),
      'field types' => array('file'),
      'settings' => array(
        'jwplayer_preset' => '',
      ),
    ),
  );
  return $formatters;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function jw_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $element = array();

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  // Formatter types.
  switch ($display['type']) {
    case 'jw_player':
    case 'jw_player_playlist':
    case 'jw_player_sources':
      $presets = jw_player_preset_load();

      // If there are presets prompt the user to select one or create another.
      // If no, prompt to create a preset.
      if (!empty($presets)) {
        foreach (jw_player_preset_load() as $preset => $item) {
          $options[$preset] = $item['preset_name'];
        }

        $element['jwplayer_preset'] = array(
          '#title' => t('Select preset'),
          '#type' => 'select',
          '#default_value' => ($settings['jwplayer_preset']) ?  $settings['jwplayer_preset'] : FALSE,
          '#options' => $options,
        );
        $element['links'] = array(
          '#theme' => 'links',
          '#links' => array(
            array(
              'title' => t('Create new preset'),
              'href' => 'admin/config/media/jw_player/add',
            ),
            array(
              'title' => t('Manage presets'),
              'href' => 'admin/config/media/jw_player',
            ),
          ),
        );
      }
      else {
        $element['no_preset_message'] = array(
          '#markup' => '<div class="messages warning">' . t('No presets are available. You must to <a href="@create">create a preset</a> to proceed.', array('@create' => url('admin/config/media/jw_player/add'))) . '</div>',
        );
      }
      break;

    default:
      break;
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function jw_player_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = array();
  $presets = jw_player_preset_load();

  if (isset($presets[$settings['jwplayer_preset']])) {
    $summary[] = t('Preset: @name', array('@name' => $presets[$settings['jwplayer_preset']]['preset_name']));
    $summary[] = t('Description: @description', array('@description' => $presets[$settings['jwplayer_preset']]['description']));

    $settings = $presets[$settings['jwplayer_preset']]['settings'];
    foreach ($settings as $key => $val) {
      // Filter out complex settings in the form of arrays (such as plugins).
      // @todo Tackle the display of enabled plugins separately.
      if (!is_array($val)) {
        $summary[] = t('@key: @val', array('@key' => $key, '@val' => !empty($val) ? $val : t('default')));
      }
    }
  }
  else {
    $summary[] = t('No preset selected');
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function jw_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'jw_player') {
    // Process files for the theme function.
    foreach ($items as $delta => $item) {

      // Give each instance of the player a unique id. The combination
      // of fid and preset are considered to be save even in cases where
      // the entire theme functions output is cached.
      // Prefixing the id makes sure that the id does not start with a
      // invalid numeric value.
      $id = $item['fid'] . $display['settings']['jwplayer_preset'];
      $element[$delta] = array(
        '#theme' => 'jw_player',
        '#file' => $item,
        '#preset' => $display['settings']['jwplayer_preset'],
        '#html_id' => drupal_html_id('jwplayer' . $id),
      );
    }
  }

  if ($display['type'] == 'jw_player_playlist' && count($items) > 0) {
    // Process files for the theme function.

    $id = $items[0]['fid'] . $display['settings']['jwplayer_preset'];
    $element = array(
      '#theme' => 'jw_player',
      '#playlist' => $items,
      '#preset' => $display['settings']['jwplayer_preset'],
      '#html_id' => drupal_html_id('jwplayer' . $id),
    );

  }

  if ($display['type'] == 'jw_player_sources' && count($items) > 0) {
    // Process files for the theme function.
    $id = $items[0]['fid'] . $display['settings']['jwplayer_preset'];
    $element = array(
      '#theme' => 'jw_player',
      '#sources' => $items,
      '#preset' => $display['settings']['jwplayer_preset'],
      '#html_id' => drupal_html_id('jwplayer' . $id),
    );

    if ($images = field_get_items($entity_type, $entity, 'field_video_thumbnail')) {
      $element['#image'] = $images[0];
    }

  }
  return $element;
}

/**
 * Retrieves all available skins.
 */
function jw_player_skins($name = NULL) {
  $skins = &drupal_static(__FUNCTION__);

  if (!isset($skins)) {
    $directory = libraries_get_path('jwplayer_skins');
    $skins = file_scan_directory($directory, '/\.xml|\.swf$/');
  }

  if ($name) {
    foreach ($skins as $file) {
      if ($file->name == $name) {
        return $file;
      }
    }
  }
  return $skins;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function jw_player_ctools_plugin_api($owner, $api) {
  if ($owner == 'jw_player' && $api == 'jw_player_presets') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function jw_player_ctools_plugin_directory($module, $type) {
  // Load the export_ui plugin.
  if ($type =='export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Load the given preset(s).
 * @param string $machine_name
 * @return array
 */
function jw_player_preset_load($machine_name = NULL) {
  ctools_include('export');
  if (isset($machine_name)) {
    $items = ctools_export_crud_load('jwplayer_preset', $machine_name);

    // CTools returns an object, so we explictly typecast it to array before
    // returning.
    return $items = (array) $items;
  }
  else {
    $result = ctools_export_crud_load_all('jwplayer_preset');
    if (!empty($result)) {
      foreach ($result as $key => $item) {
        $items[$key] = (array) $item;
      }
      return $items;
    }
  }
}

/**
 * Returns the default settings for JW Player. Used in cases where a preset is
 * not provided when the JW Player theme function is called.
 */
function jw_player_default_settings() {
  $defaults = &drupal_static(__FUNCTION__);

  if (!isset($defaults)) {
    $flash_filename =
    $defaults = array(
      'width' => '640',
      'height' => '480',
      'autoplay' => FALSE,
      'controlbar' => 'bottom',
    );
  }

  return $defaults;
}

/**
 * Process variables for jw_player.tpl.php.
 */
function template_preprocess_jw_player(&$variables) {

  // Load defaults as the starting point.
  $default_settings = jw_player_default_settings();

  // Load preset if set.
  $preset_settings = array();
  if (!empty($variables['preset'])) {
    $preset = jw_player_preset_load($variables['preset']);
    // Additional check to ensure that the preset has actually loaded. This
    // prevents problems where a preset has been deleted but a field is still
    // configured to use it.
    if (!empty($preset)) {
      $preset_settings = $preset['settings'];
    }
  }

  // Get any preset override options that were sent through the formatter or
  // theme call.
  $options = array();
  if (isset($variables['options'])) {
    $options = $variables['options'];
    unset($variables['options']);
  }

  // Merge all variables together. Preset settings take priority over defaults,
  // variables passed directly to the theme function take priority over both.
  $variables = array_merge($default_settings, $preset_settings, $options, $variables);


  // The html_id should have been previously set. But we need to make
  // sure we do have one.
  if (!isset($variables['html_id'])) {
    $id = $variables['file']['fid'] . $variables['preset'];
    $variables['html_id'] = drupal_html_id('jwplayer' . $id);
  }

  // Check if there is one or multiple files. If one file then we set 'file', if
  // there are multiple files we set 'levels'. Note that levels is used for both
  // multiple video formats as well as for adaptive bitrates.
  if (isset($variables['sources'])) {
    $variables['config']['playlist'][0] = array();
    $variables['config']['playlist'][0]['image'] = file_create_url($variables['image']['uri']);
    foreach ($variables['sources'] as $key => $source) {
      $variables['config']['playlist'][0]['sources'][$key]['file'] = file_create_url($source['uri']);
      if (isset($source['getid3']) && $source['getid3']['width'] > 0 && $source['getid3']['height'] > 0) {
        $variables['config']['playlist'][0]['sources'][$key]['width'] = $source['getid3']['width'];
        $variables['config']['playlist'][0]['sources'][$key]['height'] = $source['getid3']['height'];
      }
      elseif (isset($source['field_width']) && isset($source['field_height'])) {
        $variables['config']['playlist'][0]['sources'][$key]['width'] = $source['field_width'][LANGUAGE_NONE][0]['value'];
        $variables['config']['playlist'][0]['sources'][$key]['height'] = $source['field_height'][LANGUAGE_NONE][0]['value'];
      }
    }
  }

  elseif (isset($variables['playlist'])) {
    $variables['config']['playlist'] = array();
    foreach ($variables['playlist'] as $key => $source) {
      $variables['config']['playlist'][$key]['file'] = file_create_url($source['uri']);
    }
  }

  else {
   $variables['config']['file'] = file_create_url($variables['file']['uri']);
  }

  // Resolve skin url
  $skin = !empty($variables['skin']) ? jw_player_skins($variables['skin']) : '';
  $variables['skin'] = !empty($skin) ? file_create_url($skin->uri) : '';

  // Copy player variables into their own array to be set as JavaScript
  // configuration.
  // @todo Bad smell here. Refactoring needed.
  $config_variables = array(
    'width',
    'height',
    'playlist.position',
    'playlist.size',
    'skin',
    'stretching',
  );
  foreach ($config_variables as $key) {
    if (!empty($variables[$key])) {
      $variables['config'][$key] = $variables[$key];
    }
  }

  if (isset($variables['autostart']) && $variables['autostart']) {
    $variables['config']['autostart'] = 'true';
  }

  if (isset($variables['controls']) && !$variables['controls']) {
    $variables['config']['controls'] = 'false';
  }

  // If the preset has the primary mode set, modify the modes array so that it
  // comes first.
  if (isset($variables['primary']) && $variables['primary'] == 'flash') {
    $variables['config']['primary'] = 'flash';
  }
}

/**
 * Implements hook_process_HOOK().
 *
 * Add the JW Player Javascript according to the method selected.
 */
function jw_player_process_jw_player(&$variables) {

  $variables['jw_player_inline_js_code'] = stripslashes(json_encode($variables['config']));

  // Add js file that enables url based seeking.
  drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js');
  //drupal_add_js(drupal_get_path('module', 'jw_player') . '/jw_player.js');
  drupal_add_js(drupal_get_path('module', 'jw_player') . '/jw_player_seek.js');

}

/**
 * Implements hook_init().
 *
 */
function jw_player_init() {
  // Add script file if requested.
  if (variable_get('jw_player_all_pages', FALSE)) {
    drupal_add_js(libraries_get_path('jwplayer') . '/jwplayer.js');
  }
  // Add key if available.
  if ($key = variable_get('jw_player_key', NULL)) {
    drupal_add_js('jwplayer.key="' . $key . '"',
    array('type' => 'inline', 'scope' => 'header', 'weight' => 5)
    );
  }
}

/**
 * Retrieves all available preset plugins.
 */
function jw_player_preset_plugins($name = NULL) {
  $plugins = &drupal_static(__FUNCTION__);

  if (!isset($plugins)) {
    $plugins = module_invoke_all('jw_player_plugin_info');
    // Allow modules to alter other modules' plugin definitions
    drupal_alter('jw_player_plugin_info', $plugins);
  }

  if ($name && isset($plugins[$name])) {
    return $plugins[$name];
  }

  return $plugins;
}
