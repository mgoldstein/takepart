<?php

/**
 * Implements hook_help().
 */
function search_api_sorts_help($path, array $arg) {
  if ($path == 'admin/config/search/search_api/index/%/sorts') {
    return t('Select the indexed fields for which you want to enable sorting. ' .
        'Before the sort blocks is actually displayed, you will have to enable and configure it at the <a href="!url">block administration page</a>.',
        array('!url' => url('admin/structure/block')));
  }
}

/**
 * Implements hook_menu().
 */
function search_api_sorts_menu() {
  $items['admin/config/search/search_api/index/%search_api_index/sorts'] = array(
    'title' => 'Sorts',
    'description' => 'Select the sort fields to display.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('search_api_sorts_index_select', 5),
    'access arguments' => array('administer search_api'),
    'weight' => -1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE | MENU_CONTEXT_PAGE,
    'file' => 'search_api_sorts.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function search_api_sorts_theme() {
  $themes['search_api_sorts_form_table'] = array(
    'render element' => 'element',
    'file' => 'search_api_sorts.admin.inc',
  );
  $themes['search_api_sorts_list'] = array(
    'variables' => array(
      'terms' => array(),
      'hidden' => array(),
      'active' => array(),
    ),
    'file' => 'search_api_sorts.theme.inc',
  );
  $themes['search_api_sorts_sort'] = array(
    'variables' => array(
      'name' => '',
      'field' => '',
      'count' => 0,
      'path' => NULL,
      'options' => array(),
      'active' => FALSE,
    ),
    'file' => 'search_api_sorts.theme.inc',
  );

  return $themes;
}

/**
 * Implements hook_entity_info().
 */
function search_api_sorts_entity_info() {
  $info['search_api_sort'] = array(
    'label' => t('Search sort'),
    'controller class' => 'EntityAPIController',
    'entity class' => 'SearchApiSort',
    'base table' => 'search_api_sort',
    'uri callback' => 'search_api_sort_url',
    'module' => 'search_api_sorts',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'field',
      'label' => 'name',
    ),
  );

  return $info;
}

/**
 * Implements hook_permission().
 */
function search_api_sorts_permission() {
  return array(
    'use search_api_sorts' => array(
      'title' => t('Use search sorts'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function search_api_sorts_block_info() {
  $blocks = array(
    'search-sorts' => array(
      'info'   => t('Search sorts'),
      'cache'  => DRUPAL_NO_CACHE,
      'weight' => 4,
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function search_api_sorts_block_view($delta = '') {
  if (!user_access('use search_api_sorts')) {
    return;
  }
  if ($delta == 'search-sorts') {
    return search_api_sorts_block_search_sorts_view();
  }
}

/**
 * Get a list of sorts field names for the current search index id
 * 
 * @return a cached query object
 */
function search_api_sorts_search_sorts($index_id, $enabled = 1, $reset = FALSE) {
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache[$index_id . '_' . $enabled]) || $reset) {
    $query = db_select('search_api_sort', 's')
    ->fields('s', array('field', 'name'))
    ->condition('index_id', $index_id)
    ->condition('enabled', $enabled)
    ->execute();
    
    $data = array();
    while ($row = $query->fetch()) {
      $data[] = $row;
    }
    
    $cache[$index_id . '_' . $enabled] = $data;
  }
  return $cache[$index_id . '_' . $enabled];
}

/**
 * View the "Search sorts" block.
 */
function search_api_sorts_block_search_sorts_view() {
  $index = drupal_static('search_api_sorts_search_api_query_alter', array());
  if (!$index) {
    return;
  }
  
  $search_sorts = search_api_sorts_search_sorts($index['id']);
  if (empty($search_sorts)) {
    return;
  } 
  
  $path = $_GET['q'];
  $params = drupal_get_query_parameters($_GET, array('q', 'page'));
  
  $sort = variable_get('search_api_sorts_default_sort', '');
  if (isset($params['sort']) && !empty($params['sort'])) {
    $sort = $params['sort'];
  }
  
  $order = variable_get('search_api_sorts_default_order', 'asc');
  if (isset($params['order']) && !empty($params['order'])) {
    $order = $params['order'];
  }

  $items = array();
  foreach ($search_sorts as $key => $data) {
    $params['sort'] = $data->field;
    $params['order'] = $order;
    $classes = array('sort-item');
    
    // active sort field logic
    if ($sort == $data->field) {
      $classes[] = 'active';
      $classes[] = 'sort-' . $order;
      
      // now flip sort order for active item
      $params['order'] = ($order == 'asc') ? 'desc' : 'asc';
      
      // create separate params for a 'remove sort' link
      $remove_params = $params;
      unset($remove_params['sort']);
      unset($remove_params['order']);
      
      $items[] = array(
        'class' => $classes,
        'data' => l('(-)', $_GET['q'], array('query' => $remove_params, 'attributes' => array('class' => array('search-api-facet-remove')))) 
                  . ' ' . $data->name
                  . ' ' . l(theme_tablesort_indicator(array('style' => $params['order'])), $_GET['q'], array('html' => TRUE, 'query' => $params, 'attributes' => array('class' => array('search-api-facet-value')))),
      );
    }
    else {
      // regular sort field logic
      $items[] = array(
        'class' => $classes,
        'data' => l($data->name, $_GET['q'], array('query' => $params, 'attributes' => array('class' => array('search-api-facet-value'))))
      );      
    }
  }

  return array(
    'subject' => t('Sort by'),
    'content' => theme('item_list', array('items' => $items, 'attributes' => array('class' => array('search-api-facets')))),
  );
}

/**
 * Load multiple sorts at once, determined by IDs or deltas, or by other
 * conditions.
 *
 * @see entity_load()
 *
 * @param $ids
 *   An array of sort IDs or machine names.
 * @param $conditions
 *   An array of conditions on the {search_api_sort} table in the form
 *   'field' => $value.
 * @param $reset
 *   Whether to reset the internal entity_load cache.
 *
 * @return array
 *   An array of SearchApiSort objects keyed by machine name.
 */
function search_api_sorts_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('search_api_sort', $ids, $conditions, $reset);
}

/**
 * Implements hook_search_api_query_alter().
 */
function search_api_sorts_search_api_query_alter(SearchApiQueryInterface $query) {
  if (!user_access('use search_api_sorts')) {
    return;
  }
  
  // static save current search id
  $index = &drupal_static(__FUNCTION__, array());
  $index['id'] = $query->getIndex()->machine_name;
  
  // alter sort field and sort order
  $order = strtoupper(variable_get('search_api_sorts_default_order', 'asc')); 
  if (isset($_GET['order']) && !empty($_GET['order'])) {
    $order = $_GET['order'];
  } 
  $sort = variable_get('search_api_sorts_default_sort', '');
  if (isset($_GET['sort']) && !empty($_GET['sort'])) {
    $sort = $_GET['sort'];
  } 
  if (!empty($order) && !empty($sort)) {
    $query->sort($sort, $order);  
  }
}