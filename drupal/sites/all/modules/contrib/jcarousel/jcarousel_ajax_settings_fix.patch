diff --git a/js/jcarousel.js b/js/jcarousel.js
index 0517a26..2c0b2d2 100644
--- a/js/jcarousel.js
+++ b/js/jcarousel.js
@@ -8,56 +8,58 @@
 Drupal.behaviors.jcarousel = {};
 Drupal.behaviors.jcarousel.attach = function(context, settings) {
   settings = settings || Drupal.settings;
-  $.each(settings.jcarousel.carousels, function(key, options) {
-    var $carousel = $(options.selector + ':not(.jcarousel-processed)', context);
+  if (settings.jcarousel != undefined) {
+    $.each(settings.jcarousel.carousels, function(key, options) {
+      var $carousel = $(options.selector + ':not(.jcarousel-processed)', context);
 
-    // If this carousel has already been processed or doesn't exist, move on.
-    if (!$carousel.length) {
-      return;
-    }
-
-    // Callbacks need to be converted from a string to an actual function.
-    $.each(options, function(optionKey) {
-      if (optionKey.match(/Callback$/) && typeof options[optionKey] == 'string') {
-        var callbackFunction = window;
-        var callbackParents = options[optionKey].split('.');
-        $.each(callbackParents, function(objectParent) {
-          callbackFunction = callbackFunction[callbackParents[objectParent]];
-        });
-        options[optionKey] = callbackFunction;
+      // If this carousel has already been processed or doesn't exist, move on.
+      if (!$carousel.length) {
+        return;
       }
-    });
 
-    // Add standard options required for AJAX functionality.
-    if (options.ajax && !options.itemLoadCallback) {
-      options.itemLoadCallback = Drupal.jcarousel.ajaxLoadCallback;
-    }
+      // Callbacks need to be converted from a string to an actual function.
+      $.each(options, function(optionKey) {
+        if (optionKey.match(/Callback$/) && typeof options[optionKey] == 'string') {
+          var callbackFunction = window;
+          var callbackParents = options[optionKey].split('.');
+          $.each(callbackParents, function(objectParent) {
+            callbackFunction = callbackFunction[callbackParents[objectParent]];
+          });
+          options[optionKey] = callbackFunction;
+        }
+      });
+
+      // Add standard options required for AJAX functionality.
+      if (options.ajax && !options.itemLoadCallback) {
+        options.itemLoadCallback = Drupal.jcarousel.ajaxLoadCallback;
+      }
 
-    // If auto-scrolling, pause animation when hoving over the carousel.
-    if (options.auto && options.autoPause && !options.initCallback) {
-      options.initCallback = function(carousel, state) {
-        Drupal.jcarousel.autoPauseCallback(carousel, state);
-      };
-    }
+      // If auto-scrolling, pause animation when hoving over the carousel.
+      if (options.auto && options.autoPause && !options.initCallback) {
+        options.initCallback = function(carousel, state) {
+          Drupal.jcarousel.autoPauseCallback(carousel, state);
+        };
+      }
 
-    // Add navigation to the carousel if enabled.
-    if (options.navigation && !options.setupCallback && !options.itemVisibleInCallback) {
-      options.setupCallback = function(carousel) {
-        Drupal.jcarousel.addNavigation(carousel, options.navigation);
-      };
-      options.itemLastInCallback = {
-        onAfterAnimation: Drupal.jcarousel.updateNavigationActive
-      };
-    }
+      // Add navigation to the carousel if enabled.
+      if (options.navigation && !options.setupCallback && !options.itemVisibleInCallback) {
+        options.setupCallback = function(carousel) {
+          Drupal.jcarousel.addNavigation(carousel, options.navigation);
+        };
+        options.itemLastInCallback = {
+          onAfterAnimation: Drupal.jcarousel.updateNavigationActive
+        };
+      }
 
-    if (!options.hasOwnProperty('buttonNextHTML') && !options.hasOwnProperty('buttonPrevHTML')) {
-      options.buttonNextHTML = Drupal.theme('jCarouselButton', 'next');
-      options.buttonPrevHTML = Drupal.theme('jCarouselButton', 'previous');
-    }
+      if (!options.hasOwnProperty('buttonNextHTML') && !options.hasOwnProperty('buttonPrevHTML')) {
+        options.buttonNextHTML = Drupal.theme('jCarouselButton', 'next');
+        options.buttonPrevHTML = Drupal.theme('jCarouselButton', 'previous');
+      }
 
-    // Initialize the jcarousel.
-    $carousel.addClass('jcarousel-processed').jcarousel(options);
-  });
+      // Initialize the jcarousel.
+      $carousel.addClass('jcarousel-processed').jcarousel(options);
+    });
+  }
 };
 
 Drupal.jcarousel = {};
