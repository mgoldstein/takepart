<?php
/**
 * @file
 * The Wordlet Module
 */

/*
 * The configuration is stored in a separate file for easy edititing.
 */
include_once dirname(__FILE__) . '/wordlet.config.inc';

/**
 * Inverts the wordlet configuration array to be keyed by path.
 */
function wordlet_page_paths() {
  $values = &drupal_static(__FUNCTION__, array());
  if (!isset($values['paths'])) {
    $paths = array();
    foreach (_wordlet_configuration() as $name => $config) {
      if (!empty($config['path'])) {
        $paths[$config['path']] = $name;
      }
    }
    $values['paths'] = $paths;
  }
  return $values['paths'];
}

/**
 * Set or retrieve the active wordlet page configuration.
 */
function wordlet_active_page($page = NULL) {
  $value = &drupal_static(__FUNCTION__, FALSE);
  if (isset($page)) {
    $value = $page;
  }
  return $value;
}

/**
 * Fill out a wordlet page configuration with default values.
 */
function _wordlet_page_defaults(&$page, $name) {

  // All configurations should have a name and title
  $page += array(
    'name' => $name,
    'title' => $name,
    'published' => FALSE,
    'load' => array(),
  );

  if (!empty($page['path'])) {
    // Those configurations with a path should have content and wrapper
    // templates, a list of JS files, and a list of CSS files.
    $page += array(
      'wrappers' => array('html'),
      'css' => array(),
      'js' => array(),
    );
  }
  return $page;
}

/**
 * Wordlet page menu placeholder loader.
 */
function wordlet_page_load($name = NULL) {
  $values = &drupal_static(__FUNCTION__, array());

  if (isset($name)) {
    if (!isset($values[$name])) {
      // Requesting a single wordlet page
      $pages = _wordlet_configuration();
      if (isset($pages[$name])) {
        $values[$name] = _wordlet_page_defaults($pages[$name], $name);
      }
      else {
        $values[$name] = FALSE;
      }
    }
    return $values[$name];
  }
  else {
    // Requesting all wordlet pages
    foreach(_wordlet_configuration() as $name => $page) {
      if (!isset($values[$name])) {
        $values[$name] = _wordlet_page_defaults($page, $name);
      }
    }
    return $values;
  }
}

/**
 * Wordlet place holder loader.
 */
function wordlet_load($id = NULL) {
  $entities = entity_load('wordlet', isset($id) ? array($id) : FALSE);
  return isset($id) ? reset($entities) : $entities;
}

/**
 * Implements hook_entity_info().
 */
function wordlet_entity_info() {
  return array(
    'wordlet' => array(
      'label' => t('Wordlet'),
      'controller class' => 'WordletController',
      'base table' => 'wordlet',
      'uri callback' => 'entity_class_uri',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
        'status' => 'status',
        'module' => 'module',
      ),
      'entity class' => 'Wordlet',
      'access callback' => 'wordlet_access',
      'module' => 'wordlet',
      'admin ui' => array(
        'path' => 'admin/wordlet/page/%wordlet_page',
        'file' => 'wordlet.admin.inc',
        'controller class' => 'WordletUIController',
      ),
    )
  );
}

/**
 * Implements hook_permission().
 */
function wordlet_permission() {
  return array(
    'administer wordlet' => array(
      'title' => t('Administer wordlets'),
      'restrict access' => TRUE,
    ),
    'add wordlet' => array(
      'title' => t('Add wordlets'),
      'restrict access' => TRUE,
    ),
    'edit wordlet' => array(
      'title' => t('Edit wordlets'),
      'restrict access' => TRUE,
    ),
    'delete wordlet' => array(
      'title' => t('Delete wordlets'),
      'restrict access' => TRUE,
    ),
    'administer wordlet page' => array(
      'title' => t('Administer wordlet pages'),
      'restrict access' => TRUE,
    ),
    'view wordlet page' => array(
      'title' => t('View wordlet pages'),
    ),
    'preview wordlet page' => array(
      'title' => t('Preview unpublished wordlet pages'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for wordlet pages.
 */
function wordlet_page_access($op, $page = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer', 'view');
  if (in_array($op, $allowed_ops)) {
    // Adjust the operation for unpublished content
    $published = variable_get("wordlet_{$page['name']}_published",
      $page['published']);
    if ($op == 'view' && !$published) {
      $op = 'preview';
    }
    return user_access("$op wordlet page")
      || user_access("administer wordlet page");
  }
  return FALSE;
}

/**
 * Access callback for wordlets.
 */
function wordlet_access($op, $wordlet = NULL, $account = NULL,
  $entity_type = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer', 'add', 'edit', 'delete');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op wordlet") || user_access("administer wordlet");
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function wordlet_menu() {
  return array(
    'admin/wordlet' => array(
      'title' => 'Wordlets',
      'description' => 'Manage wordlet pages.',
      'page callback' => 'wordlet_page_overview_callback',
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer'),
      'weight' => 20,
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/wordlet/overview' => array(
      'title' => 'Overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/wordlet/import' => array(
      'title' => 'Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_import_form'),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer'),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
    ),
    'wordlet/%wordlet_page' => array(
      'title callback' => 'wordlet_page_title',
      'title arguments' => array(1),
      'page callback' => 'wordlet_page_view_callback',
      'page arguments' => array(1),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('view', 1),
      //'type' => MENU_NORMAL_ITEM,
    ),
    'wordlet/%wordlet_page/view' => array(
      'title' => 'View',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'wordlet/%wordlet_page/edit' => array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_edit_form', 1),
      'access callback' => 'wordlet_access',
      'access arguments' => array('edit'),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
      'file' => 'wordlet.admin.inc',
      'file path' => drupal_get_path('module', 'wordlet'),
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function wordlet_admin_paths() {
  return array(
    'wordlet/*/edit' => TRUE,
  );
}

/**
 * Implements hook_theme().
 */
function wordlet_theme() {
  $hooks = array();

  foreach (wordlet_page_load() as $name => $page) {

    if (!empty($page['path'])) {

      // content hook
      $theme_name = str_replace('_', '-', $wrapper);
      $hooks["wordlet_{$name}"] = array(
        'variables' => array(),
        'template' => "wordlet-{$theme_name}",
        'preprocess functions' => array(
          'wordlet_preprocess_page_template',
        ),
      );

      // wrapper hooks
      foreach ($page['wrappers'] as $wrapper) {
        $theme_wrapper = str_replace('_', '-', $wrapper);
        if (!isset($hooks["wordlet_wrapper_{$wrapper}"])) {
          $hooks["wordlet_wrapper_{$wrapper}"] = array(
            'render element' => 'unprocessed_content',
            'template' => "wordlet-wrapper-{$theme_wrapper}",
            'preprocess functions' => array(
              'wordlet_preprocess_wrapper_template',
            ),
            'override preprocess functions' => TRUE,
          );
        }
      }
    }
  }
  return $hooks;
}

function wordlet_preprocess_page_template(&$variables) {
  _tp3_fill_template_vars($variables);
  $tabs = menu_local_tabs();
  $header = theme('takepart3_header', $variables);
  if ($tabs) {
    $header .= render($tabs);
  }
  $variables['header'] = $header;
  $variables['footer'] = theme('takepart3_footer', $variables);
}

function wordlet_preprocess_wrapper_template(&$variables) {
  _tp3_fill_template_vars($variables);
  $variables['tabs'] = menu_local_tabs();
  $variables['header'] = theme('takepart3_header', $variables);
  $variables['footer'] = theme('takepart3_footer', $variables);
  $variables['content'] = theme($variables['unprocessed_content']);
  unset($variables['unprocessed_content']);
}

/**
 * Wordlet page title callback.
 */
function wordlet_page_title($page) {
  return $page['title'];
}

/**
 * Implements hook_url_inbound_alter().
 */
function wordlet_url_inbound_alter(&$path, $original_path, $path_language) {
  $paths = wordlet_page_paths();
  if (isset($paths[$original_path])) {
    $path = 'wordlet/' . $paths[$original_path];
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function wordlet_url_outbound_alter(&$path, &$options, $original_path) {
  $matches = array();
  if (preg_match('|^wordlet/([A-Za-z0-9_]+)(/view)?$|', $path, $matches)) {
    $wordlet_page = wordlet_page_load($matches[1]);
    if ($wordlet_page !== FALSE && !empty($wordlet_page['path'])) {
      $path = $wordlet_page['path'];
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function wordlet_page_alter(&$page) {
  $config = wordlet_active_page();
  if ($config !== FALSE) {
    $page['#theme'] = "wordlet_{$config['name']}";
    $page['#theme_wrappers'] = array();
    foreach ($config['wrappers'] as $wrapper) {
      if ($wrapper == 'html') {
        $page['#theme_wrappers'][] = $wrapper;
      }
      else {
        $page['#theme_wrappers'][] = "wordlet_wrapper_{$wrapper}";
      }
    }
  }
}

/**
 * Wordlet page admin overview callback.
 */
function wordlet_page_overview_callback() {

  // Table headers
  $active_header = array(
    t('Title'),
    t('Name'),
    t('Configured'),
    t('Pending'),
    array(
      'data' => t('Operations'),
      'colspan' => 2,
    ),
  );
  $orphan_header = array(
    t('Name'),
    t('Values'),
    t('Operations'),
  );

  // Destination for operation links
  $destination = drupal_get_destination();

  // Get the number of wordlets that have been configured
  $query = db_select('wordlet', 'w');
  $query->fields('w', array('page'));
  $query->addExpression('COUNT(w.name)', 'count');
  $query->condition('w.type', '', '!=');
  $query->groupBy('w.page');
  $configured_counts = $query->execute()->fetchAllKeyed();

  // Get the number of wordlets that still need to be configured
  $query = db_select('wordlet', 'w');
  $query->fields('w', array('page'));
  $query->addExpression('COUNT(w.name)', 'count');
  $query->condition('w.type', '', '=');
  $query->groupBy('w.page');
  $pending_counts = $query->execute()->fetchAllKeyed();

  // Load wordlet page configurations
  $active_pages = wordlet_page_load();

  $active_rows = array();
  foreach ($active_pages as $name => $page) {

    // Value count
    if (isset($configured_counts[$name])) {
      $configured_count = $configured_counts[$name]['count'];
    }
    else {
      $configured_count = 0;
    }
    if (isset($pending_counts[$name])) {
      $pending_count = $pending_counts[$name]['count'];
    }
    else {
      $pending_count = 0;
    }

    // Operations
    $list_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('manage'),
        '#href' => 'admin/wordlet/page/' . $name,
      ),
    );
    if (!empty($page['path'])) {
      $view_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('view'),
          '#href' => 'wordlet/' . $name,
        ),
      );
    }
    else {
      $view_operation = '';
    }

    $active_rows[$name] = array(
      $page['title'],
      $name,
      $configured_count,
      $pending_count,
      $view_operation,
      $list_operation,
    );
  }

  // Get the number of wordlets that are not listed in the configuration
  $query = db_select('wordlet', 'w');
  $query->fields('w', array('page'));
  $query->addExpression('COUNT(w.name)', 'count');
  $query->condition('w.page', array_keys($active_pages), 'NOT IN');
  $query->groupBy('w.page');
  $orphan_pages = $query->execute()->fetchAllKeyed();

  ksort($orphan_pages);

  $orphan_rows = array();
  foreach ($orphan_pages as $name => $count) {

    // Operations
    $list_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('manage'),
        '#href' => 'admin/wordlet/page/' . $name,
      ),
    );

    $orphan_rows[$name] = array(
      $name,
      $count,
      $list_operation,
    );
  }

  // Return the page content
  return array(
    'active_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Active Wordlet Pages'),
    ),
    'wordlet_pages' => array(
      '#theme' => 'table',
      '#header' => $active_header,
      '#rows' => $active_rows,
      '#empty' => t('No worldet pages available.'),
    ),
    'orphan_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Orphan Wordlet Pages'),
    ),
    'orphan_pages' => array(
      '#theme' => 'table',
      '#header' => $orphan_header,
      '#rows' => $orphan_rows,
      '#empty' => t('None (someone took Jonathan Swift seriously)'),
    ),
  );
}

/**
 * Wordlet page admin import form.
 */
function wordlet_page_import_form($form, &$form_state) {

  $form['json'] = array(
    '#title' => t('Wordlets to import'),
    '#description' => t('JSON array of wordlets to import.'),
    '#type' => 'textarea',
    '#rows' => 20,
    '#cols' => 80,
    '#default_value' => '',
  );

  $form['overwrite'] = array(
    '#title' => t('Check this box to overwrite any existing wordlets in
      the database that are also present in the JSON import data. Otherwise, the
      import will be aborted (<em>NO wordlets will be imported</em>) if one or
      more wordlets in the JSON import data already exists in the database.'),
    '#description' => t('Overwrite existing wordlets.'),
    '#type' => 'checkbox',
    '#default_value' => NULL,
  );

  $form['actions'] = array('#type' => 'actions');
  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import wordlets'),
    '#weight' => 40,
  );

  return $form;
}

/**
 * Wordlet page admin import form.
 */
function wordlet_page_import_form_validate($form, &$form_state) {

  $json = drupal_json_decode($form_state['values']['json']);
  if (!isset($json)) {
    form_set_error('json', t('The import data could not be parsed.'));
  }
  elseif (empty($json)) {
    form_set_error('json', t('There is nothing to import.'));
  }
  else {
    $incomplete = 0;
    $existing = 0;
    foreach ($json as $wordlet) {

      // Check each wordlet for the required keys
      if (isset($wordlet['name']) && isset($wordlet['page'])) {

        // Check for collisions if overwrite was not selected
        if (empty($form_state['values']['overwrite'])) {
          $result = db_select('wordlet', 'w')
            ->fields('w')
            ->condition('w.page', $wordlet['page'])
            ->condition('w.name', $wordlet['name'])
            ->execute();
          if ($result->rowCount()) {
            $existing += 1;
            drupal_set_message(t('Wordlet @name already exists for @page.', array(
              '@name' => $wordlet['name'], '@page' => $wordlet['page'])), 'warning');
          }
        }
      }
      else {
        $incomplete += 1;
      }
    }

    if ($existing > 0) {
      form_set_error('json', t('@count wordlets already exist.', array(
        '@count' => $existing)));
    }
    if ($incomplete > 0) {
      form_set_error('json', t('@count wordlets are missing key values.', array(
        '@count' => $incomplete)));
    }
  }
}

/**
 * Wordlet page admin import form.
 */
function wordlet_page_import_form_submit($form, &$form_state) {

  $json = drupal_json_decode($form_state['values']['json']);

  $imported = 0;
  if (!empty($json)) {
    foreach ($json as $wordlet) {

      // Default values.
      $values = array(
        'page' => '',
        'name' => '',
        'title' => '',
        'description' => '',
        'type' => '',
        'allow_markup' => 0,
        'enabled' => 1,
        'integer_value' => 0,
        'string_value' => '',
        'text_value' => '',
        'markup' => 0,
      );

      // Check for any existing wordlet, or create a new one
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'wordlet');
      $query->propertyCondition('page', $wordlet['page']);
      $query->propertyCondition('name', $wordlet['name']);
      $result = $query->execute();

      if (!empty($result['wordlet'])) {
        $entities = entity_load('wordlet', array_keys($result['wordlet']));
        $entity = reset($entities);
      }
      else {
        $entity = entity_create('wordlet', $values);
      }

      // Set the wordlet properties
      foreach (array_keys($values) as $attribute) {
        if (!empty($wordlet[$attribute])) {
          $entity->{$attribute} = $wordlet[$attribute];
        }
      }

      // Save.
      $entity->save();
    }
  }

  drupal_set_message(t('@count wordlet(s) imported.', array(
    '@count' => $imported)));
}

/**
 * Wordlet page full page edit form
 */
function wordlet_page_edit_form($form, &$form_state, $page) {

  // No such page.
  if ($page === FALSE) {
    return drupal_not_found();
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'wordlet');
  $query->propertyCondition('page', $page['name']);
  $query->propertyCondition('type', '', '!=');
  $result = $query->execute();

  if (!empty($result['wordlet'])) {

    $entities = entity_load('wordlet', array_keys($result['wordlet']));
    foreach ($entities as $entity) {

      if ($entity->type == 'single-line') {
        $form[$entity->name] = wordlet_single_line_form(
          array('#type' => 'container', '#tree' => TRUE),
          $form_state, $entity, 'edit');
      }
      elseif ($entity->type == 'multiple-lines') {
        $form[$entity->name] = wordlet_multiple_lines_form(
          array('#type' => 'container', '#tree' => TRUE),
          $form_state, $entity, 'edit');
      }
      elseif ($entity->type == 'node-reference') {
        $form[$entity->name] = wordlet_node_reference_form(
          array('#type' => 'container', '#tree' => TRUE),
          $form_state, $entity, 'edit');
      }
    }

    $form['actions'] = array('#type' => 'actions');
    $submit = array();
    if (!empty($form['#submit'])) {
      $submit += $form['#submit'];
    }
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save wordlet'),
      '#weight' => 40,
    );

    // Save the wordlets for the submit handler.
    $form_state['wordlet_page'] = $page;
    $form_state['wordlets'] = $entities;
  }
  else {

  }

  return $form;
}

function wordlet_page_edit_form_submit($form, &$form_state) {

  $wordlets = $form_state['wordlets'];
  $page = $form_state['wordlet_page'];

  foreach ($wordlets as $wordlet) {
    if (isset($form_state['values'][$wordlet->name])) {
      $values = $form_state['values'][$wordlet->name];
      foreach ($values as $attribute => $value) {
        $wordlet->{$attribute} = $value;
      }
      $wordlet->save();
    }
  }

  drupal_set_message(t('The page @title has been updated.',
    array('@title' => $page['title'])));
}

function wordlet_load_for_page($page) {

  $wordlets = array();

  // Limit that query to wordlets for the page.
  $load = array_merge($page['load'], array($page['name']));
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'wordlet');
  $query->propertyCondition('page', $load, 'IN');

  $result = $query->execute();
  if (!empty($result['wordlet'])) {
    $entities = entity_load('wordlet', array_keys($result['wordlet']));
    foreach ($entities as $entity) {
      if (isset($wordlets[$entity->name])) {
        $existing = $wordlets[$entity->name];
        if (empty($existing->type) == empty($entity->type)) {
          // They are both configured, or both not configured, the position
          // in the load array determines which to use
          $existing_pos = array_search($existing->page, $load);
          $current_pos = array_search($entity->page, $load);
          if ($existing_pos < $current_pos) {
            $wordlets[$entity->name] = $entity;
          }
        }
        elseif (!empty($entity->type)) {
          // The current entity should be used regardless of position in the
          // load array as it is the one that is configured
          $wordlets[$entity->name] = $entity;
        }
      }
      else {
        // First time encountering this name
        $wordlets[$entity->name] = $entity;
      }
    }
  }

  return $wordlets;
}

/**
 * Wordlet page view callback.
 */
function wordlet_page_view_callback($page) {

  // No such page.
  if ($page === FALSE) {
    return drupal_not_found();
  }

  // Load the wordlets that will be used on the page
  $page['wordlets'] = wordlet_load_for_page($page);

  // Set the active page configuration
  wordlet_active_page($page);

  // Add the page CSS and JS.
  foreach ($page['css'] as $filename) {
    drupal_add_css(WORDLET_CSS_DIRECTORY . $filename, array(
      'type' => 'file',
      'group' => CSS_THEME,
      'weight' => 20,
    ));
  }
  foreach ($page['js'] as $filename) {
    drupal_add_js(WORDLET_JS_DIRECTORY . $filename, array(
      'type' => 'file',
      'group' => JS_THEME,
      'weight' => 20,
    ));
  }

  if (wordlet_access('edit')) {
    $path = drupal_get_path('module', 'wordlet');
    drupal_add_css($path . '/css/wordlet.css', array(
      'type' => 'file',
      'group' => CSS_THEME,
      'weight' => 20,
    ));
    drupal_add_js($path . '/js/wordlet.js', array(
      'type' => 'file',
      'group' => JS_THEME,
      'weight' => 20,
    ));
  }

  // Structure is in the template, content in the wordlets.
  return '';
}

function wordlet($name) {
  $page = wordlet_active_page();
  if ($page === FALSE) {
    return NULL;
  }
  if (isset($page['wordlets'][$name])) {
    $wordlet = $page['wordlets'][$name];
  }
  else {
    $values = array(
      'page' => $page['name'],
      'name' => $name,
    );
    $wordlet = entity_create('wordlet', $values);
    $wordlet->save();
    $page['wordlets'][$name] = $wordlet;
    wordlet_active_page($page);
  }

  $controller = entity_get_controller('wordlet');
  if (empty($_COOKIE['show_wordlets'])) {
    // Not even trying to edit wordlets
    return $controller->viewMarkup($wordlet);
  }
  else {
    // Output the markup for the appropriate level of access
    if (wordlet_access('administer', $wordlet)) {
      return $controller->editMarkup($wordlet, TRUE);
    }
    elseif (wordlet_access('edit', $wordlet)) {
      return $controller->editMarkup($wordlet);
    }
    else {
      return $controller->viewMarkup($wordlet);
    }
  }
}

function w($name) {
  return wordlet($name);
}

function wordlet_edit_mode($configure = FALSE) {
  if (!empty($_COOKIE['show_wordlets'])) {
    if ($configure) {
      return wordlet_access('administer');
    }
    else {
      return wordlet_access('edit');
    }
  }
  return FALSE;
}
