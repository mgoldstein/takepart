<?php
/**
 * @file
 * The Wordlet Module
 */

/*
 * The configuration is stored in a separate file for easy edititing.
 */
include_once dirname(__FILE__) . '/wordlet.config.inc';

/**
 * Implements hook_permission().
 */
function wordlet_permission() {
  return array(
    'administer wordlet' => array(
      'title' => t('Administer wordlets'),
      'restrict access' => TRUE,
    ),
    'add wordlet' => array(
      'title' => t('Add wordlets'),
      'restrict access' => TRUE,
    ),
    'edit wordlet' => array(
      'title' => t('Edit wordlets'),
      'restrict access' => TRUE,
    ),
    'delete wordlet' => array(
      'title' => t('Delete wordlets'),
      'restrict access' => TRUE,
    ),
    'administer wordlet page' => array(
      'title' => t('Administer wordlet pages'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for wordlet pages.
 */
function wordlet_page_access($op, $page = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op wordlet page")
      || user_access("administer wordlet");
  }
  return FALSE;
}

/**
 * Access callback for wordlets.
 */
function wordlet_access($op, $wordlet = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer', 'add', 'edit', 'delete');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op wordlet") || user_access("administer wordlet");
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function wordlet_menu() {
  return array(
    'admin/wordlet' => array(
      'title' => 'Wordlets',
      'description' => 'Manage wordlet pages.',
      'page callback' => 'wordlet_page_overview_callback',
      'access callback' => 'wordlet_access',
      'access arguments' => array('edit'),
      'weight' => 20,
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/wordlet/overview' => array(
      'title' => 'Overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/wordlet/import' => array(
      'title' => 'Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_import_form', 1),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer', 1),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/wordlet/manage/%wordlet_page' => array(
      'title callback' => 'wordlet_page_title',
      'title arguments' => array(3),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_edit_form', 1), 
      'access callback' => 'wordlet_access',
      'access arguments' => array('administer'),
      'weight' => 10,
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/wordlet/manage/%wordlet_page/edit' => array(
      'title' => 'Edit',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/wordlet/manage/%wordlet_page/export' => array(
      'title' => 'Export',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_export_form', 1), 
      'access callback' => 'wordlet_access',
      'access arguments' => array('administer'),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/wordlet/manage/%wordlet_page/delete' => array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_export_form', 1),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer', 1),
      'weight' => 20,
      'type' => MENU_LOCAL_TASK,
    ),
    'wordlet/%wordlet_page' => array(
      'title callback' => 'wordlet_page_title',
      'title arguments' => array(1),
      'page callback' => 'wordlet_page_view_callback',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Wordlet page title callback.
 */
function wordlet_page_title($wordlet_page) {
  return $wordlet_page['title'];
}

/**
 * Wordlet page menu placeholder loader.
 */
function wordlet_page_load($name) {
  $info = wordlet_configuration();
  if (isset($info[$name])) {
    $info[$name]['name'] = $name;
    return $info[$name];
  }
  return FALSE;
}

/**
 * Implements hook_url_inbound_alter().
 */
function wordlet_url_inbound_alter(&$path, $original_path, $path_language) {
  $paths = wordlet_page_paths();
  if (isset($paths[$original_path])) {
    $path = 'wordlet/' . $paths[$original_path];
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function wordlet_url_outbound_alter(&$path, &$options, $original_path) {
  $matches = array();
  if (preg_match('|^wordlet/([A-Za-z0-9_]+)$|', $path, $matches)) {
    $wordlet = wordlet_page_load($matches[1]);
    if ($wordlet !== FALSE && !empty($wordlet['path'])) {
      $path = $wordlet['path'];
    }
  }
}

/**
 * Inverts the wordlet configuration array to be keyed by path.
 */
function wordlet_page_paths() {
  $values = &drupal_static(__FUNCTION__, array());
  if (!isset($values['paths'])) {
    $paths = array();
    foreach (wordlet_configuration() as $name => $info) {
      if (!empty($info['path'])) {
        $paths[$info['path']] = $name;
      }
    }
    $values['paths'] = $paths;
  }
  return $values['paths'];
}

/**
 * Wordlet page admin overview callback.
 */ 
function wordlet_page_overview_callback() {

  // Table headers
  $active_header = array(
    t('Title'),
    t('Name'),
    t('Values'),
    array(
      'data' => t('Operations'),
      'colspan' => 3,
    ),
  );
  $orphan_header = array(
    t('Name'),
    t('Values'),
    array(
      'data' => t('Operations'),
      'colspan' => 3,
    ),
  );

  // Destination for operation links
  $destination = drupal_get_destination();

  // Get the value counts
  $query = db_select('wordlet', 'w');
  $query->fields('w', array('type'));
  $query->addExpression('COUNT(w.name)', 'count');
  $query->groupBy('w.type');
  $counts = $query->execute()->fetchAllKeyed();

  // Load the table
  $configuration = wordlet_configuration();

  $active_rows = array();
  foreach (wordlet_configuration() as $name => $page) {

    // Value count
    if (isset($counts[$name])) {
      $count = $counts[$name]['count'];
    }
    else {
      $count = 0;
    }

    // Operations
    $edit_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('edit'),
        '#href' => 'admin/wordlet/manage/' . $name,
        '#options' => array('query' => $destination),
      ),
    );
    $export_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('export'),
        '#href' => 'admin/wordlet/manage/' . $name . '/export',
      ),
    );
    if (!empty($page['path'])) {
      $view_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('view'),
          '#href' => 'wordlet/' . $name,
        ),
      );
    }
    else {
      $view_operation = '';
    }

    $active_rows[$name] = array(
      $page['title'],
      $name,
      $count,
      $view_operation,
      $edit_operation,
      $export_operation,
    );
  }

  // Merge and sort the two list of names
  $pages = array_diff_key($counts, $configuration);
  ksort($pages);

  $orphan_rows = array();
  foreach ($pages as $name => $count) {

    // Operations
    $edit_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('edit'),
        '#href' => 'admin/wordlet/manage/' . $name,
        '#options' => array('query' => $destination),
      ),
    );
    if (wordlet_page_access('administer')) {
      $export_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('export'),
          '#href' => 'admin/wordlet/manage/' . $name . '/export',
        ),
      );
      $delete_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('delete'),
          '#href' => 'admin/wordlet/manage/' . $name . '/delete',
          '#options' => array('query' => $destination),
        ),
      );
    }
    else {
      $export_operation = '';
      $delete_operation = '';
    }

    $orphan_rows[$name] = array(
      $name,
      $count,
      $edit_operation,
      $export_operation,
      $delete_operation,
    );
  }

  // Return the page content
  return array(
    'active_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Active Wordlet Pages'),
    ),
    'wordlet_pages' => array(
      '#theme' => 'table',
      '#header' => $active_header,
      '#rows' => $active_rows,
      '#empty' => t('No worldet pages available.'),
    ),
    'orphan_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Orphan Wordlet Pages'),
    ),
    'orphan_pages' => array(
      '#theme' => 'table',
      '#header' => $orphan_header,
      '#rows' => $orphan_rows,
      '#empty' => t('None (someone took Jonathan Swift seriously)'),
    ),
  );
}

/**
 * Wordlet page admin import form.
 */ 
function wordlet_page_import_form($form, &$form_state, $page) {
  $banner = drupal_get_path('module', 'wordlet') . '/images/banner.gif';
  $form['banner'] = array(
    '#type' => 'markup',
    '#markup' => '<center><p><img src="/' . $banner . '" /></p></center>',
  );
  $barrier = drupal_get_path('module', 'wordlet') . '/images/barrier.gif';
  $form['barrier'] = array(
    '#type' => 'markup',
    '#markup' => '<center><p><img src="/' . $barrier . '" /></p></center>',
  );
  return $form;
}

/**
 * Wordlet page admin edit form.
 */ 
function wordlet_page_edit_form($form, &$form_state, $page) {
  return $form;
}

/**
 * Wordlet page admin export form.
 */ 
function wordlet_page_export_form($form, &$form_state, $page) {
  return $form;
}

/**
 * Wordlet page admin view callback.
 */ 
function wordlet_page_view_callback($page) {
  if ($page === FALSE) {
    return drupal_not_found();
  }
  if (empty($page['page_template'])) {
    return drupal_not_found();
  }
  $hook = "wordlet_page__" . $page['name'];
  return theme($hook, array(
    'config' => $page, 
  ));
}


/**
 * Implements hook_entity_info().
 */
/*
function wordlet_entity_info() {
  $info = array();
  $info['wordlet'] = array(
    'label' => t('Wordlet'),
    'controller class' => 'WordletController',
    'base table' => 'wordlet',
    'uri callback' => 'entity_class_uri',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'name' => 'name',
      'status' => 'status',
      'module' => 'module',
    ),
    'entity class' => 'Wordlet',
    'access callback' => 'wordlet_access',
    'module' => 'wordlet',
    'admin ui' => array(
      'path' => 'admin/wordlet',
      'file' => 'wordlet.admin.inc',
      'controller class' => 'WordletUIController',
    ),
  );
  return $info;
}
*/

/**
 * Wordlet item menu placeholder loader.
 */
function wordlet_load($name, $page) {
  return new StdClass();
}

/**
 * Implements hook_theme().
 */
function wordlet_theme() {
  $items = array();
  foreach (wordlet_configuration() as $name => $config) {
    $items[$name] = array(
      'variables' => array(
        'config' => NULL, 
        'wordlets' => NULL,
      ),
      'template' => 'templates/' . $config['page_template'],
    );
  }
  return $items;
}
