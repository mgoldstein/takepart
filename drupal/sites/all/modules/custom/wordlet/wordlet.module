<?php
/**
 * @file
 * The Wordlet Module
 */

/*
 * The configuration is stored in a separate file for easy edititing.
 */
include_once dirname(__FILE__) . '/wordlet.config.inc';

/**
 * Inverts the wordlet configuration array to be keyed by path.
 */
function wordlet_page_paths() {
  $values = &drupal_static(__FUNCTION__, array());
  if (!isset($values['paths'])) {
    $paths = array();
    foreach (_wordlet_configuration() as $name => $config) {
      if (!empty($config['path'])) {
        $paths[$config['path']] = $name;
      }
    }
    $values['paths'] = $paths;
  }
  return $values['paths'];
}

/**
 * Set or retrieve the active wordlet page configuration.
 */
function wordlet_active_page($page = NULL) {
  $value = &drupal_static(__FUNCTION__, FALSE);
  if (isset($page)) {
    $value = $page;
  }
  return $value;
}

/**
 * Fill out a wordlet page configuration with default values.
 */
function _wordlet_page_defaults(&$page, $name) {
  
  // All configurations should have a name and title
  $page += array(
    'name' => $name,
    'title' => $name,
  );

  if (!empty($page['path'])) {
    // Those configurations with a path should have content and wrapper
    // templates, a list of JS files, and a list of CSS files.
    $page += array(
      'templates' => array(
        'content' => 'page',
        'wrapper' => 'html',
      ),
      'css' => array(),
      'js' => array(),
    );
    $page['templates'] += array(
      'content' => 'page',
      'wrapper' => 'html',
    ); 
  }
  return $page;
}

/**
 * Wordlet page menu placeholder loader.
 */
function wordlet_page_load($name = NULL) {
  $values = &drupal_static(__FUNCTION__, array());

  if (!empty($name)) {
    if (!isset($values[$name])) {
      // Requesting a single wordlet page
      $pages = _wordlet_configuration();
      if (isset($pages[$name])) {
        $values[$name] = _wordlet_page_defaults($pages[$name]);
      }
      else {
        $values[$name] = FALSE;
      }
    }
    return $values[$name];
  }
  else {
    // Requesting all wordlet pages
    foreach(_wordlet_configuration() as $name => $page) {
      if (!isset($values[$name])) {
        $values[$name] = _wordlet_page_defaults($page);
      }
    }
    return $values;
  }
}

/**
 * Implements hook_permission().
 */
function wordlet_permission() {
  return array(
    'administer wordlet' => array(
      'title' => t('Administer wordlets'),
      'restrict access' => TRUE,
    ),
    'add wordlet' => array(
      'title' => t('Add wordlets'),
      'restrict access' => TRUE,
    ),
    'edit wordlet' => array(
      'title' => t('Edit wordlets'),
      'restrict access' => TRUE,
    ),
    'delete wordlet' => array(
      'title' => t('Delete wordlets'),
      'restrict access' => TRUE,
    ),
    'administer wordlet page' => array(
      'title' => t('Administer wordlet pages'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for wordlet pages.
 */
function wordlet_page_access($op, $page = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op wordlet page")
      || user_access("administer wordlet");
  }
  return FALSE;
}

/**
 * Access callback for wordlets.
 */
function wordlet_access($op, $wordlet = NULL) {
  // Block unknown operations.
  $allowed_ops = array('administer', 'add', 'edit', 'delete');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op wordlet") || user_access("administer wordlet");
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function wordlet_menu() {
  return array(
    'admin/wordlet' => array(
      'title' => 'Wordlets',
      'description' => 'Manage wordlet pages.',
      'page callback' => 'wordlet_page_overview_callback',
      'access callback' => 'wordlet_access',
      'access arguments' => array('edit'),
      'weight' => 20,
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/wordlet/overview' => array(
      'title' => 'Overview',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/wordlet/import' => array(
      'title' => 'Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_import_form', 1),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer', 1),
      'weight' => 0,
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/wordlet/manage/%wordlet_page' => array(
      'title callback' => 'wordlet_page_title',
      'title arguments' => array(3),
      'page callback' => 'wordlet_page_list_callback',
      'page arguments' => array(1), 
      'access callback' => 'wordlet_access',
      'access arguments' => array('administer'),
      'weight' => 10,
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/wordlet/manage/%wordlet_page/list' => array(
      'title' => 'List',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
/*
    'admin/wordlet/manage/%wordlet_page/export' => array(
      'title' => 'Export',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_export_form', 1), 
      'access callback' => 'wordlet_access',
      'access arguments' => array('administer'),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK,
    ),
    'admin/wordlet/manage/%wordlet_page/delete' => array(
      'title' => 'Delete',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wordlet_page_export_form', 1),
      'access callback' => 'wordlet_page_access',
      'access arguments' => array('administer', 1),
      'weight' => 20,
      'type' => MENU_LOCAL_TASK,
    ),
*/
    'wordlet/%wordlet_page' => array(
      'title callback' => 'wordlet_page_title',
      'title arguments' => array(1),
      'page callback' => 'wordlet_page_view_callback',
      'page arguments' => array(1),
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Wordlet page title callback.
 */
function wordlet_page_title($page) {
  return $page['title'];
}

/**
 * Implements hook_url_inbound_alter().
 */
function wordlet_url_inbound_alter(&$path, $original_path, $path_language) {
  $paths = wordlet_page_paths();
  if (isset($paths[$original_path])) {
    $path = 'wordlet/' . $paths[$original_path];
  }
}

/**
 * Implements hook_url_outbound_alter().
 */
function wordlet_url_outbound_alter(&$path, &$options, $original_path) {
  $matches = array();
  if (preg_match('|^wordlet/([A-Za-z0-9_]+)$|', $path, $matches)) {
    $wordlet = wordlet_page_load($matches[1]);
    if ($wordlet !== FALSE && !empty($wordlet['path'])) {
      $path = $wordlet['path'];
    }
  }
}

/**
 * Implements hook_page_alter().
 */
function wordlet_page_alter(&$page) {
  $config = wordlet_active_page();
  if ($config !== FALSE) {
    $page['#theme'] = $config['templates']['content'];
    $page['#theme_wrappers'] = array($config['templates']['wrapper']);
  }
}

/**
 * Wordlet page admin overview callback.
 */ 
function wordlet_page_overview_callback() {

  // Table headers
  $active_header = array(
    t('Title'),
    t('Name'),
    t('Values'),
    array(
      'data' => t('Operations'),
      'colspan' => 2,
    ),
  );
  $orphan_header = array(
    t('Name'),
    t('Values'),
    t('Operations'),
  );

  // Destination for operation links
  $destination = drupal_get_destination();

  // Get the value counts
  $query = db_select('wordlet', 'w');
  $query->fields('w', array('type'));
  $query->addExpression('COUNT(w.name)', 'count');
  $query->groupBy('w.type');
  $counts = $query->execute()->fetchAllKeyed();

  // Load wordlet page configurations
  $active_pages = wordlet_page_load();

  $active_rows = array();
  foreach ($active_pages as $name => $page) {

    // Value count
    if (isset($counts[$name])) {
      $count = $counts[$name]['count'];
    }
    else {
      $count = 0;
    }

    // Operations
    $list_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('manage'),
        '#href' => 'admin/wordlet/manage/' . $name,
        '#options' => array('query' => $destination),
      ),
    );
    $export_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('export'),
        '#href' => 'admin/wordlet/manage/' . $name . '/export',
      ),
    );
    if (!empty($page['path'])) {
      $view_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('view'),
          '#href' => 'wordlet/' . $name,
        ),
      );
    }
    else {
      $view_operation = '';
    }

    $active_rows[$name] = array(
      $page['title'],
      $name,
      $count,
      $view_operation,
      $list_operation,
      //$export_operation,
    );
  }

  // Merge and sort the two list of names
  $orphan_pages = array_diff_key($counts, $configuration);
  ksort($orphan_pages);

  $orphan_rows = array();
  foreach ($orphan_pages as $name => $count) {

    // Operations
    $list_operation = array(
      'data' => array(
        '#type' => 'link',
        '#title' => t('manage'),
        '#href' => 'admin/wordlet/manage/' . $name,
        '#options' => array('query' => $destination),
      ),
    );
    if (wordlet_page_access('administer')) {
      $export_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('export'),
          '#href' => 'admin/wordlet/manage/' . $name . '/export',
        ),
      );
      $delete_operation = array(
        'data' => array(
          '#type' => 'link',
          '#title' => t('delete'),
          '#href' => 'admin/wordlet/manage/' . $name . '/delete',
          '#options' => array('query' => $destination),
        ),
      );
    }
    else {
      $export_operation = '';
      $delete_operation = '';
    }

    $orphan_rows[$name] = array(
      $name,
      $count,
      $list_operation,
      //$export_operation,
      //$delete_operation,
    );
  }

  // Return the page content
  return array(
    'active_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Active Wordlet Pages'),
    ),
    'wordlet_pages' => array(
      '#theme' => 'table',
      '#header' => $active_header,
      '#rows' => $active_rows,
      '#empty' => t('No worldet pages available.'),
    ),
    'orphan_heading' => array(
      '#theme' => 'html_tag',
      '#tag' => 'h2',
      '#value' => t('Orphan Wordlet Pages'),
    ),
    'orphan_pages' => array(
      '#theme' => 'table',
      '#header' => $orphan_header,
      '#rows' => $orphan_rows,
      '#empty' => t('None (someone took Jonathan Swift seriously)'),
    ),
  );
}

/**
 * Wordlet page admin import form.
 */ 
function wordlet_page_import_form($form, &$form_state, $page) {
  $banner = drupal_get_path('module', 'wordlet') . '/images/banner.gif';
  $form['banner'] = array(
    '#type' => 'markup',
    '#markup' => '<center><p><img src="/' . $banner . '" /></p></center>',
  );
  $barrier = drupal_get_path('module', 'wordlet') . '/images/barrier.gif';
  $form['barrier'] = array(
    '#type' => 'markup',
    '#markup' => '<center><p><img src="/' . $barrier . '" /></p></center>',
  );
  return $form;
}

/**
 * Wordlet page admin list form.
 */ 
function wordlet_page_list_callback($page, $action = 'list') {
  $edit = $_POST;

  $is_delete = isset($edit['operation']) && ($edit['operation'] == 'delete');
  $is_export = isset($edit['operation']) && ($edit['operation'] == 'export');
  $have_wordlets = isset($edit['wordlets']) && $edit['wordlets'];
  if ($is_delete && $have_wordlets) {
    return drupal_get_form('wordlet_page_multiple_delete_confirm', $page);
  }
  elseif ($is_export && $have_wordlets) {
    return drupal_get_form('wordlet_page_export_download', $page);
  }
  else {
    return drupal_get_form('wordlet_page_admin_overview', $page);
  }
}

/**
 * List the selected wordlets and verify that the admin wants to delete them.
 *
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @return
 *   TRUE if the wordlets should be deleted, FALSE otherwise.
 * @ingroup forms
 * @see wordlet_page_multiple_delete_confirm_submit()
 */
function wordlet_page_multiple_delete_confirm($form, &$form_state, $page) {
  $edit = $form_state['input'];

  $form_state['wordlet_page'] = $page;

  $form['wordlets'] = array(
    '#prefix' => '<ul>',
    '#suffix' => '</ul>',
    '#tree' => TRUE,
  );

  // array_filter() returns only elements with actual values.
  $wordlet_counter = 0;
  foreach (array_filter($edit['wordlets']) as $id => $value) {
    $wordlet = entity_load_single('wordlet', $id);
    if (is_object($wordlet) && is_numeric($wordlet->id)) {
      $title = db_query('SELECT title FROM {wordlet} WHERE id = :id',
        array(':id' => $id))->fetchField();
      $form['wordlets'][$id] = array('#type' => 'hidden', '#value' => $id,
        '#prefix' => '<li>', '#suffix' => check_plain($title) . '</li>');
      $wordlet_counter++;
    }
  }
  $form['operation'] = array(
    '#type' => 'hidden', 
    '#value' => 'delete'
  );

  if (!$wordlet_counter) {
    drupal_set_message(t('There do not appear to be any wordlets to delete, or
      your selected wordlet was deleted by another administrator.'));
    drupal_goto('admin/wordlet/manage/' . $page['name']);
  }
  else {
    return confirm_form($form,
      t('Are you sure you want to delete these wordlets?'),
      'admin/wordlet/manage/' . $page['name'],
      t('This action cannot be undone.'),
      t('Delete wordlets'), t('Cancel'));
  }
}

/**
 * Process wordlet_page_multiple_delete_confirm form submissions.
 */
function wordlet_page_multiple_delete_confirm_submit($form, &$form_state) {
  $page = $form_state['wordlet_page'];
  if ($form_state['values']['confirm']) {
    entity_delete_multiple('wordlet', array_keys($form_state['values']['wordlets']));
    cache_clear_all();
    $count = count($form_state['values']['wordlets']);
    watchdog('content', 'Deleted @count wordlets.', array('@count' => $count));
    drupal_set_message(format_plural($count, 'Deleted 1 wordlet.',
      'Deleted @count wordlets.'));
  }
  $form_state['redirect'] = 'admin/wordlet/manage/' . $page['name'];
}

/**
 * List the selected wordlets and allow the admin to download them.
 *
 * @param $form_state
 *   An associative array containing the current state of the form.
 * @ingroup forms
 * @see wordlet_page_export_download_submit()
 */
function wordlet_page_export_download($form, &$form_state, $page) {
  $edit = $form_state['input'];

  $form_state['wordlet_page'] = $page;

  $form['wordlets'] = array(
    '#prefix' => '<ul>',
    '#suffix' => '</ul>',
    '#tree' => TRUE,
  );

  // array_filter() returns only elements with actual values.
  $wordlet_counter = 0;
  foreach (array_filter($edit['wordlets']) as $id => $value) {
    $wordlet = entity_load_single('wordlet', $id);
    if (is_object($wordlet) && is_numeric($wordlet->id)) {
      $title = db_query('SELECT title FROM {wordlet} WHERE id = :id',
        array(':id' => $id))->fetchField();
      $form['wordlets'][$id] = array('#type' => 'hidden', '#value' => $id,
        '#prefix' => '<li>', '#suffix' => check_plain($title) . '</li>');
      $wordlet_counter++;
    }
  }
  $form['operation'] = array(
    '#type' => 'hidden', 
    '#value' => 'export'
  );

  if (!$wordlet_counter) {
    drupal_set_message(t('There do not appear to be any wordlets to export, or
      your selected wordlet(s) were deleted by another administrator.'));
    drupal_goto('admin/wordlet/manage/' . $page['name']);
  }
  else {
    return $form;
  }
}

/**
 * Process wordlet_page_export_download form submissions.
 */
function wordlet_page_export_download_submit($form, &$form_state) {
  $page = $form_state['wordlet_page'];
  $form_state['redirect'] = 'admin/wordlet/manage/' . $page['name'];
}

function wordlet_page_admin_overview($form, &$form_state, $page) {

  $form_state['wordlet_page'] = $page;

  // Build an 'Management Actions' form.
  $form['options'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bulk Wordlet Actions'),
    '#attributes' => array('class' => array('container-inline')),
  );

  $options = array(
    'export' => t('Export the selected wordlets'),
    'delete' => t('Delete the selected wordlets'),
  );

  $form['options']['operation'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#title_display' => 'invisible',
    '#options' => $options,
    '#default_value' => 'publish',
  );
  $form['options']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Validate wordlet_page_admin_overview form submissions.
 */
function wordlet_page_admin_overview_validate($form, &$form_state) {
  $form_state['values']['wordlets']
    = array_diff($form_state['values']['wordlets'], array(0));
  // We can't execute any 'bulk actions' if no wordlets were selected.
  if (count($form_state['values']['wordlets']) == 0) {
    form_set_error('', t('Select one or more wordlets to perform the operation on.'));
  }
}



/**
 * Wordlet page view callback.
 */ 
function wordlet_page_view_callback($page) {
  if ($page === FALSE) {
    return drupal_not_found();
  }
  if (empty($page['templates'])) {
    return drupal_not_found();
  }
  wordlet_active_page($page);
  return '';
}

/**
 * Implements hook_entity_info().
 */
function wordlet_entity_info() {
  $info = array();
  $info['wordlet'] = array(
    'label' => t('Wordlet'),
    'controller class' => 'WordletController',
    'base table' => 'wordlet',
    'uri callback' => 'entity_class_uri',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'label' => 'title',
      'name' => 'name',
      'status' => 'status',
      'module' => 'module',
    ),
    'entity class' => 'Wordlet',
    'access callback' => 'wordlet_access',
    'module' => 'wordlet',
    'admin ui' => array(
      'path' => 'admin/wordlet/manage/%/wordlet/%wordlet',
      'file' => 'wordlet.admin.inc',
      'controller class' => 'WordletUIController',
    ),
  );
  return $info;
}

/**
 * Wordlet item menu placeholder loader.
 */
function wordlet_load($name, $page) {
  return new StdClass();
}
