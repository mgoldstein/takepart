<?php
/**
 * @file
 * Sets up the base table for the wordlet entity.
 */

/**
 * Implements hook_schema().
 */
function wordlet_schema() {
  $schema = array();

  $schema['wordlet'] = array(
    'description' => 'The base table for wordlet entities.',
    'fields' => array(
      // Primary key
      'id' => array(
        'description' => 'Primary key identifier for the wordlet.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),

      // Configuration values
      'page' => array(
        'description' => 'The page to which the wordlet belongs.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'name' => array(
        'description' => 'The machine name of the wordlet.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human readable title of the wordlet.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description of the wordlet purpose.',
        'type' => 'text',
      ),
      'type' => array(
        'description' => 'The type of the wordlet.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'format' => array(
        'description' => '0 = plain text, 1 = limited HTML, 2 = full HTML.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'enabled' => array(
        'description' => '0 = disabled, 1 = enabled.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'cardinality' => array(
        'description' => '0 = unlimited, else the number of values.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 1,
      ),
      'weight' => array(
        'description' => 'Display order on full page edit form.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => 0,
      ),

      // Edit values
      'items_data' => array(
        'description' => 'Serialized item values.',
        'type' => 'text',
      ),
      'keys_data' => array(
        'description' => 'Value keys used by the wordlet.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),

      // Backend values
      'created' => array(
        'description' => 'The Unix timestamp when the wordlet was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the wordlet was last changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
        'description' => 'The exportable status of the entity.',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'page' => array('page'),
    ),
    'unique keys' => array(
      'name' => array('page', 'name'),
    ),
  );

  return $schema;
}

/**
 * Add columns to support wordlet lists and serialized values.
 */
function wordlet_update_7100(&$sandbox) {

  db_add_field('wordlet', 'cardinality', array(
    'description' => '0 = unlimited, else the number of values.',
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 1,
  ));

  db_add_field('wordlet', 'weight', array(
    'description' => 'Display weight.',
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => 0,
  ));

  db_add_field('wordlet', 'format', array(
    'description' => '0 = plain text, 1 = limited HTML, 2 = full HTML.',
    'type' => 'int',
    'size' => 'tiny',
    'unsigned' => TRUE,
    'not null' => TRUE,
    'default' => 0,
  ));

  db_add_field('wordlet', 'items_data', array(
    'description' => 'Serialized item values.',
    'type' => 'text',
  ));
}

/**
 * Update the existing wordlets to the serialized values.
 */
function wordlet_update_7101(&$sandbox) {

  $query = db_select('wordlet', 'w')->fields('w', array(
    'id', 'type', 'allow_markup', 'integer_value', 'string_value', 'text_value'));
  $result = $query->execute();

  $updates = array();
  foreach ($result as $row) {

    if ($row->type == 'single-line') {
      $updates[$row->id] = array(
        'cardinality' => 1,
        'format' => $row->allow_markup,
        'items_data' => serialize(array(array('text' => $row->string_value))),
      );
    }
    elseif ($row->type == 'multiple-lines') {
      $updates[$row->id] = array(
        'cardinality' => 1,
        'format' => $row->allow_markup,
        'items_data' => serialize(array(array('text' => $row->string_value))),
      );
    }
    elseif ($row->type == 'node-reference') {
      $updates[$row->id] = array(
        'cardinality' => 1,
        'format' => 0,
        'items_data' => serialize(array(array(
          'nid' => $row->integer_value,
          'view_mode' => $row->string_value
        ))),
      );
    }
  }

  foreach ($updates as $id => $update) {
    db_update('wordlet')
      ->fields($update)
      ->condition('id', $id)
      ->execute();
  }
}

/**
 * Remove the unused fields after the conversion to serialized values.
 */
function wordlet_update_7102(&$sandbox) {
  db_drop_field('wordlet', 'markup');
  db_drop_field('wordlet', 'allow_markup');
  db_drop_field('wordlet', 'integer_value');
  db_drop_field('wordlet', 'string_value');
  db_drop_field('wordlet', 'text_value');
}

/**
 * Add column for selected item values.
 */
function wordlet_update_7103(&$sandbox) {
  db_add_field('wordlet', 'keys_data', array(
    'description' => 'Value keys used by the wordlet.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
}
