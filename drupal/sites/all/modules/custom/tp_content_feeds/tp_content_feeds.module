<?php
/**
 * @file
 * TakePart Content Feeds
 */

/**
 * Implements hook_menu().
 */
function tp_content_feeds_menu() {
  return array(
    'api/feeds/content' => array(
      'page callback' => 'tp_content_feeds_content',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'tp_content_feeds_deliver_json',
    ),
    'api/feeds/tags' => array(
      'page callback' => 'tp_content_feeds_tags',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'tp_content_feeds_deliver_json',
    ),
    'api/feeds/queue/%' => array(
      'page callback' => 'tp_content_feeds_queue',
      'page arguments' => array(3),
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'tp_content_feeds_deliver_json',
    ),
  );
}

function tp_content_feeds_deliver_json($data) {
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Status', '200 OK');
  print drupal_json_encode($data);
}

function tp_content_feeds_pager_values($from, $start, $count) {

  $input = filter_input(INPUT_GET, 'from', FILTER_VALIDATE_INT, array(
    'default' => $from,
    'min_range' => 0,
    'max_range' => $from,
  ));
  if (!is_null($input)) {
    $from = $input;
  }

  $input = filter_input(INPUT_GET, 'start', FILTER_VALIDATE_INT, array(
    'default' => $start,
    'min_range' => 0,
    'max_range' => $start,
  ));
  if (!is_null($input)) {
    $start = $input;
  }

  $input = filter_input(INPUT_GET, 'count', FILTER_VALIDATE_INT, array(
    'default' => $count,
    'min_range' => 1,
    'max_range' => $count,
  ));
  if (!is_null($input)) {
    $count = $input;
  }

  return array($from, $start, $count);
}

function tp_content_feeds_get_topics($node) {

  $items = field_get_items('node', $node, 'field_topic', $node->language);
  $tids = array();
  if ($items !== FALSE) {
    foreach ($items as $item) {
      $tids[] = $item['tid'];
    }
  }
  $terms = taxonomy_term_load_multiple($tids);
  // Preserve the field order of the terms.
  $ordered_terms = array();
  foreach ($tids as $tid) {
    if (isset($terms[$tid])) {
      $ordered_terms[$tid] = $terms[$tid];
    }
  }
  $topics = array();
  foreach ($ordered_terms as $term) {
    $topics[] = $term->name;
  }
  return $topics;
}

function tp_content_feeds_get_thumbnail($node) {

  $thumbnail_sources = array(
    'field_thumbnail',
    'field_article_main_image',
    'field_gallery_main_image',
    'field_gallery_images',
  );

  $image = NULL;
  foreach ($thumbnail_sources as $field_name) {
    $items = field_get_items('node', $node, $field_name);
    if ($items !== FALSE && count($items) > 0) {
      $item = reset($items);
      $image = file_load($item['fid']);
      if ($image !== FALSE) { break; }
    }
  }

  if (!empty($image)) {
    $url = image_style_url('email_promo', $image->uri);
    list(,$resource) = explode('//', $url);
    return $resource;
  }
  return NULL;
}

function tp_content_feeds_prepare_node($node) {

  $uri = entity_uri('node', $node);
  $uri['options']['absolute'] = TRUE;
  $url = url($uri['path'], $uri['options']);
  list(,$resource) = explode('//', $url);

  return array(
    'title' => $node->title,
    'status' => intval($node->status),
    'type' => $node->type,
    'created_at' => intval($node->created),
    'updated_at' => intval($node->changed),
    'published_at' => empty($node->published_at) ? NULL : intval($node->published_at),
    'url' => $resource,
    'topics' => tp_content_feeds_get_topics($node),
    'thumbnail' => tp_content_feeds_get_thumbnail($node),
  );
}

function tp_content_feeds_content() {

  // The feed is paginated to reduce load on the TakePart.com servers.
  list($from, $start, $count) = tp_content_feeds_pager_values(REQUEST_TIME, 0, 100);

  // Limit to exported content types.
  $content_types = variable_get('tp_content_feeds_content_types', array());

  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('created', $from, '>=')
    ->condition('status', 0, '!=')
    ->condition('type', $content_types, 'IN')
    ->orderBy('created', 'ASC')
    ->range($start, $count)
    ->execute()
    ->fetchCol();

  $nodes = node_load_multiple($nids);
  // Preserve the queried order of the nodes.
  $ordered_nodes = array();
  foreach ($nids as $nid) {
    if (isset($nodes[$nid])) {
      $ordered_nodes[$nid] = $nodes[$nid];
    }
  }

  $content = array();
  foreach ($ordered_nodes as $nid => $node) {
    $content[$nid] = tp_content_feeds_prepare_node($node);
  }
  return $content;
}

function tp_content_feeds_tags() {

  // The feed is paginated to reduce load on the TakePart.com servers.
  list($from, $start, $count) = tp_content_feeds_pager_values(0, 0, 100);

  // Limit the exported vocabularies.
  $vocabularies = variable_get('tp_content_feeds_tag_vocabularies', array());

  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_vocabulary', 'v', 't.vid = v.vid');
  $results = $query->fields('t', array('tid', 'name'))
    ->fields('v', array('machine_name'))
    ->condition('v.machine_name', $vocabularies, 'IN')
    ->condition('t.tid', $from, '>=')
    ->range($start, $count)
    ->orderBy('t.tid', 'ASC')
    ->execute();

  $tags = array();
  foreach ($results as $tid => $term) {
    $tags[$term->tid] = array(
      'tag' => $term->name,
      'vocabulary' => $term->machine_name,
    );
  }

  return $tags;
}

function tp_content_feeds_queue($name) {

  $query = db_select('nodequeue_queue', 'q');
  $query->join('nodequeue_nodes', 'n', 'q.qid = n.qid');
  $results = $query->fields('n', array('nid', 'position'))
    ->condition('q.name', $name, '=')
    ->orderBy('n.position', 'ASC')
    ->execute()
    ->fetchAllKeyed();
  $nodes = array();
  foreach ($results as $nid => $position) {
    $nodes[] = array(
      'content_id' => $nid,
      'position' => intval($position),
    );
  }
  return $nodes;
}
