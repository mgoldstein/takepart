<?php
/**
 * Auto scroll for content on TakePart
 */

/**
 * Implements hook_menu
 */
function tp_auto_scroll_menu(){
  $items['autoscroll/%/%node'] = array(
    'page callback' => 'tp_auto_scroll_handler',
    'page arguments' => array(2, 1),
    'access arguments' => array('access content')
  );
  return $items;
}

/**
 * Menu callback for autoscroll
 */
function tp_auto_scroll_handler($node, $view_mode = 'full'){

  $cache_lifetime = variable_get('tp_auto_scroll_cache_lifetime', 3600);

  /* If a cached version of the node exists AND user is anonymous */
  $cache = 'autoscroll_'. $view_mode. '_'.$node->nid;
  global $user;
  if($cached = cache_get($cache, 'cache') && $user->uid == 0)  {
    $output = $cached->data;
  }

  if(empty($output)) {
    $node->disable_social = TRUE;

    /* Get the Node View */
    $node_view = node_view($node, $view_mode);
    $node_view_wrapper = drupal_render($node_view);

    /* Get the DDL */
    module_load_include('inc', 'tp_auto_scroll', 'inc/tp_auto_scroll_ddl');
    $ddl = tp_auto_scroll_build_ddl_content($node);
    $ddl_event = tp_auto_scroll_build_ddl_event($node->nid, $ddl);

    /* Save output */
    $output = array(
      'success' => 'true',
      'ddl' => $ddl_event,
      'output' => $node_view_wrapper,
    );

    /* Cache it for later use */
    cache_set($cache, $output, 'cache', REQUEST_TIME + $cache_lifetime);
  }

  /* Return output in json format */
//  drupal_json_output($output);
  print drupal_json_encode($output);
  drupal_exit();

}

/**
 * Where we want autoscroll to show
 */
function tp_auto_scroll_pager($node){
  global $base_url;

  $autoscroll_limit = variable_get('tp_auto_scroll_limit', 4);
  $selector_id = 'next-article';

  //loads the field topic based on node
  $field_topics = field_get_items('node', $node, 'field_topic');
 
  //preps the data correctly. primary topic only
  if (!empty($field_topics[0]['tid'])) {
    $topics = array($field_topics[0]['tid']);
  }

  /* Queue the nodes */
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->entityCondition('bundle', 'openpublish_article')
    ->fieldCondition('field_topic', 'tid', $topics, 'IN')
    ->propertyCondition('nid', $node->nid, '<>')
    ->propertyOrderBy('changed', 'DESC')
    ->range(0, $autoscroll_limit);
  $results = $query->execute();
  
  $articles = array();
  //original article
  
  //add based on a key name so the front end can use it correctly
  $og_data[$base_url. url('node/'. $node->nid)] = array(
    'width' => takepart_og_image_thumbnail_width($node->nid),
    'height' => takepart_og_image_thumbnail_height($node->nid)
  );
  foreach($results['node'] as $key => $article){
    $articles[] = '/autoscroll/full/'. $key;
    
    //does for each auto loaded articles
    $og_data[$base_url. url('node/'. $key)] = array(
      'width' => takepart_og_image_thumbnail_width($key), //this token function lives in takepart_og_image.module
      'height' => takepart_og_image_thumbnail_height($key), //this token function lives in takepart_og_image.module
    );
  }

  
  /* Add the settings */
  $settings = array(
    'tpAutoScroll' => array(
      array(
        'articles' => $articles,
        'next_selector' => '#'. $selector_id,
        'content_selector' => 'article',
        'limit' => $autoscroll_limit,
        'og_images' => $og_data
      ),
    ),
  );
  
  drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

  /* Add the behaviors */
  drupal_add_js(drupal_get_path('module', 'tp_auto_scroll'). '/js/tp_auto_scroll.js');

  /* Return the tag where we want the content to load */
  return theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'id' => $selector_id
      )
    )
  ));
}


/**
 * Implements hook_preprocess_node()
 */
function tp_auto_scroll_preprocess_node(&$variables){
  if($variables['view_mode'] == 'full'){
    /* Pass the ddl id */
    $variables['attributes_array']['data-ddl-page-id'] = $variables['node']->nid;

    //Data elements for og tags
    if(module_exists('metatag')){
      $metatags = metatag_generate_entity_metatags($variables['node'], 'node');
      if(isset($metatags['og:title'])){
        $og_title = $metatags['og:title']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-title'] = $og_title;
      }
      if(isset($metatags['og:description'])){
        $og_description = $metatags['og:description']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-description'] = $og_description;
      }
      if(isset($metatags['og:image'])){
        $og_image = $metatags['og:image']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-image'] = $og_image;
      }
      /* Statically set the URL, otherwise the ajax url will get returned */
      $variables['attributes_array']['data-tp-og-url'] = url('node/'. $variables['node']->nid);
    }
  }
}