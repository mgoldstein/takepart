<?php

/**
 * Auto scroll for content on TakePart
 */

/**
 * Implements hook_menu
 */
function tp_auto_scroll_menu(){
  $items['autoscroll/%/%node'] = array(
    'page callback' => 'tp_auto_scroll_handler',
    'page arguments' => array(2, 1),
    'access arguments' => array('access content')
  );
  return $items;
}

/**
 * Menu callback for autoscroll
 */
function tp_auto_scroll_handler($node, $view_mode = 'full'){

  $cache_lifetime = variable_get('tp_auto_scroll_cache_lifetime', 3600);

  /* If a cached version of the node exists AND user is anonymous, use the cached version */
  global $user;
  if($user->uid == 0){
    $cache = 'autoscroll_'. $view_mode. '_'.$node->nid;
    if($cached = cache_get($cache, 'cache'))  {
      $output = $cached->data;
    }
  }
  if(empty($output)) {

    $node->disable_social = TRUE;

    /*
    *This will belong to the node object. In Preprocesses you can see this by
    *looking for variable['autoscroll_load']
    */
    $node->autoscroll_load = TRUE;

    /* Get the Node View */
    $node_view = node_view($node, $view_mode);
    $node_view_wrapper = drupal_render($node_view);

    /* Get the DDL */
    module_load_include('inc', 'tp_auto_scroll', 'inc/tp_auto_scroll_ddl');
    $ddl = tp_auto_scroll_build_ddl_content($node);
    $ddl_event = tp_auto_scroll_build_ddl_event($node->nid, $ddl);

    //Get the ajax settings that need appending
    $settings = drupal_add_js();
    foreach($settings['settings']['data'] AS $key => $value) {
      if(key($value) == 'ajax') {
        //Change the id to be unique because the articles load the same
        //form the submit button id needs to be unique for proper attaching.
        foreach($value['ajax'] AS $id => $ajaxsettings) {
          $ajax['ajax'][$id."_".$node->nid] = $ajaxsettings;
          //Not Ideal, but we do not want to alter the forms because it will fail
          //on normal load. This will only happen on autoscroll load.
          $node_view_wrapper = str_replace('id="'.$id.'"','id="'.$id."_".$node->nid.'"',$node_view_wrapper);
        }
        $ajax['urlIsAjaxTrusted'] = $value['urlIsAjaxTrusted'];
      }
    }

    /* Save output */
    $output = array(
      'success' => 'true',
      'ddl' => $ddl_event,
      'output' => $node_view_wrapper,
      'settings' => $ajax,
    );

    /* Cache it for later use */
    if($user->uid == 0){
      cache_set($cache, $output, 'cache', REQUEST_TIME + $cache_lifetime);
    }
  }

  /* Return output in json format */
  print drupal_json_encode($output);
  drupal_exit();

}

/*
 * Alter the node query to include the publication date
 */
function tp_auto_scroll_query_NodeQuery_alter(QueryAlterableInterface $query){
  $query->leftJoin('publication_date', 'p', 'node.nid = p.nid');
  $query->orderBy('published_at', 'DESC');
}

/**
 * Where we want autoscroll to show
 */
function tp_auto_scroll_pager($node){
  global $base_url;

  $autoscroll_limit = variable_get('tp_auto_scroll_limit', 4);
  $selector_id = 'next-article'; //@dev: update selector if using a different one per content type

  //loads the field topic based on node
  $field_topics = field_get_items('node', $node, 'field_topic');

  //preps the data correctly. primary topic only
  if (!empty($field_topics[0]['tid'])) {
    $topics = array($field_topics[0]['tid']);
  }

  /* Queue the nodes */
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->entityCondition('bundle', array('feature_article'), 'IN')
    ->propertyCondition('nid', $node->nid, '<>')
    ->addTag('NodeQuery')
    //->propertyOrderBy('changed', 'DESC')
    ->range(0, $autoscroll_limit);

  //only add field condition if topic is set otherwise it will pull latest
  if (isset($topics) && !empty($topics)) {
    $query->fieldCondition('field_topic', 'tid', $topics, 'IN');
  }

  $results = $query->execute();
  $articles = array();
  //original article

  //add based on a key name so the front end can use it correctly
  $og_data[$base_url. url('node/'. $node->nid)] = array(
    'width' => takepart_og_image_thumbnail_width($node->nid),
    'height' => takepart_og_image_thumbnail_height($node->nid),
    'targets' => _tp_auto_scroll_node_targets($node),
    'data' => _tp_theme_support_reach_node_processor($node),
    'TopArticle' => TRUE
  );
  foreach($results['node'] as $key => $article){
    $articles[] = '/autoscroll/full/'. $key;
    $node_obj = node_load($key);
    //does for each auto loaded articles
    $og_data[$base_url. url('node/'. $key)] = array(
      'width' => takepart_og_image_thumbnail_width($key), //this token function lives in takepart_og_image.module
      'height' => takepart_og_image_thumbnail_height($key), //this token function lives in takepart_og_image.module
      'targets' => _tp_auto_scroll_node_targets($node_obj),
      'data' => _tp_theme_support_reach_node_processor($node_obj),
      'TopArticle' => FALSE
    );
    unset($node_obj);
  }


  /* Add the settings */
  $settings = array(
    'tpAutoScroll' => array(
      array(
        'articles' => $articles,
        'next_selector' => '#'. $selector_id,
        'content_selector' => 'article',
        'limit' => $autoscroll_limit,
        'auto_updates' => $og_data
      ),
    ),
  );

  drupal_add_js($settings, array('type' => 'setting', 'scope' => JS_DEFAULT));

  /* Add the behaviors */
  drupal_add_js(drupal_get_path('module', 'tp_auto_scroll'). '/js/tp_auto_scroll.js');

  /* Return the tag where we want the content to load */
  return theme('html_tag', array(
    'element' => array(
      '#tag' => 'div',
      '#attributes' => array(
        'id' => $selector_id
      ),
      '#value' => ''
    )
  ));
}

/**
 *  @function:
 *    function is used to set the node targeting
 */
function _tp_auto_scroll_node_targets($node) {
  //ensures that this is a node
  if (is_object($node) && is_numeric($node->nid)) {
    $targets = array(
      'FreeTag' => _tp_auto_scroll_node_term_ads($node, 'field_free_tag'),
      'PageTitle' => str_replace("'", "\\'", $node->title),
      'Type' => $node->type,
      'Topic' => _tp_auto_scroll_node_term_ads($node, 'field_topic'),
      'Series' => _tp_auto_scroll_node_term_ads($node, 'field_series'),
      'Sponsor' => _tp_auto_scroll_node_term_ads($node, 'field_sponsored'),
    );

    //returns data
    return $targets;
  }

  //by default return an empty array
  return array();
}

/**
 *  @function:
 *    code is used to mimic takepart_ads.module
 */
function _tp_auto_scroll_node_term_ads($node, $field_name, $json = FALSE) {
  $field = $node->{$field_name}['und'];

  //does for each value
  foreach ($field as $key => $value) {
    $term = taxonomy_term_load($value['tid']);
    $terms[] = str_replace(" & ", "-", $term->name);
  }

  $override = filter_input(INPUT_GET, 'dfpKeyval');
  if ($override) {
    $pairs = explode(",", $override);
    //does for each pair
    foreach ($pairs as $param) {
      $i = strpos($param, ":");
      if (strtolower(substr($param, 0, $i)) === "freetag") {
        $i++;
        $term = substr($param, $i);
        $terms[] = htmlspecialchars(trim($term), ENT_QUOTES, "UTF-8");
      }
    }
  }

  //if empty return empty qoutes
  if (empty($terms)) {
    return '""';
  }
  //if one return term
  elseif (count($terms) == 1 && !$json) {
    return $terms;
  }
  elseif ($json) {
    return $terms;
  }

  //default return array
  return '["' . implode('", "', $terms) . '"]';
}

/**
 * Implements hook_preprocess_node()
 */
function tp_auto_scroll_preprocess_node(&$variables){
  if($variables['view_mode'] == 'full'){
    /* Pass the ddl id */
    $variables['attributes_array']['data-ddl-page-id'] = $variables['node']->nid;

    //Data elements for og tags
    if(module_exists('metatag')){
      $metatags = metatag_generate_entity_metatags($variables['node'], 'node');
      if(isset($metatags['og:title'])){
        $og_title = $metatags['og:title']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-title'] = $og_title;
      }
      if(isset($metatags['og:description'])){
        $og_description = $metatags['og:description']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-description'] = $og_description;
      }
      if(isset($metatags['og:image'])){
        $og_image = $metatags['og:image']['#attached']['drupal_add_html_head'][0][0]['#value'];
        $variables['attributes_array']['data-tp-og-image'] = $og_image;
      }
      /* Statically set the URL, otherwise the ajax url will get returned */
      global $base_url;
      $variables['attributes_array']['data-tp-og-url'] = $base_url. url('node/'. $variables['node']->nid);
    }
  }
}

/**
 * Implements hook_token_info().
 */
function tp_auto_scroll_token_info() {
    $token_file_path = drupal_get_path("module", "tp_auto_scroll")
    . "/inc/tp_auto_scroll.token.inc";

  $info['types']['tp_auto_scroll'] = array(
    'name' => t('TakePart Auto Scroll'),
    'description' => t("Tokens used for setting autoscroll meta data"),
  );

  $info['tokens']['tp_auto_scroll']['clean_url'] = array(
    'name' => t('Clean URL'),
    'description' => t("Blocks URL of autoscroll JSON from infiltrating meta data"),
    'dynamic' => TRUE,
    'function' => array(
      'file' => $token_file_path,
      'function' => "tp_auto_scroll_clean_url",
    ),
  );
  return $info;
}

/**
 *  Implements hook_tp_video_player_config_alter().
 */
function tp_auto_scroll_tp_video_player_config_alter(&$config, &$display, &$file) {
  //Get the current path
  $cur_path = current_path();

  //If the current path is an autoscroll url(autoscroll/%/%node) than we will force auto start
  if(strpos($cur_path, 'autoscroll/') !== FALSE) {
    $config['autostart'] = FALSE;
  }
}
