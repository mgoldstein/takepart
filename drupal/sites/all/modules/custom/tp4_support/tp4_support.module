<?php
/**
 * @file
 * TakePart dule for functions related to the Nov 2013 redesign
 * of TakePart and the TP4 Theme.
 */

/**
 * Implements hook_help().
 */
function tp4_support_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tp4_support':
      return '<p>' . t('Support module for the TP4 theme and the Nov, 2013 redesign.') . '</p>';
  }
}

/**
* Implements hook_entity_info_alter().
*
* Add view modes for homepage content display.
*/
function tp4_support_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['feature_main'] = array(
    'label' => t('Main Feature'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['feature_main_tpl'] = array(
    'label' => t('Main TPL Feature'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['feature_secondary'] = array(
    'label' => t('Secondary Feature'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['feature_topic'] = array(
    'label' => t('Topic Feature'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['feature_video'] = array(
    'label' => t('Video Feature'),
    'custom settings' => TRUE,
  );
}

/**
 * Hook Black Info
 */
function tp4_support_block_info(){
  $blocks = array();
  $blocks['tp4_footer'] = array(
    'info' => t('Footer for Homepage Redesign'),
  );
  $blocks['tp4_fat_header'] = array(
    'info' => t('Fat Header for the new TP4 theme'),
  );
  $blocks['tp4_dont_miss'] = array(
    'info' => t('Don\'t miss homepage promo'),
  );
  $blocks['tp4_graveyard'] = array(
    'info' => t('Graveyard'),
  );
  $blocks['tp4_slim_nav'] = array(
    'info' => t('Slim Nav'),
  );
  $blocks['tp4_mobile_menu_header'] = array(
    'info' => t('Mobile Menu Header')
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 */
function tp4_support_block_view($delta = ''){
  $block = array();
  switch($delta){
    case 'tp4_footer':
      $block['content'] = theme('tp4_support_footer');
    break;
    case 'tp4_fat_header':
      $block['content'] = tp4_support_fat_header();
    break;
    case 'tp4_dont_miss':
      $block['content'] = tp4_support_dont_miss();
    break;
    case 'tp4_graveyard':
      module_load_include('inc', 'tp4_support', 'tp4_support_graveyard');
      $block['content'] = tp4_support_graveyard();
    break;
    case 'tp4_slim_nav':
      $block['content'] = theme('tp4_support_slim_nav');
    break;
    case 'tp4_mobile_menu_header':
      $block['content'] = theme('tp4_support_mobile_menu_header');
    break;
  }
  return $block;
}
/**
 * Implements hook_block_configure
 */
function tp4_support_block_configure($delta = ''){
  $form = array();

  if ($delta == 'tp4_footer') {
    $form['tp4_support_footer_text'] = array(
      '#type' => 'text_format',
      '#default_value' => variable_get('tp4_support_footer_text', t('TakePart is the digital division of Participant Media')),
      '#format' => variable_get('tp4_support_footer_text_format', filter_default_format()),
      '#title' => t('Footer Text'),
      '#description' => t('Text for the footer region'),
    );
  }
  if ($delta == 'tp4_dont_miss') {
    $form['tp4_support_dont_miss_label'] = array(
      '#type' => 'textfield',
      '#title' => t('Label'),
      '#description' => t('Label for the promo'),
      '#default_value' => variable_get('tp4_support_dont_miss_label', NULL),
    );
    $form['tp4_support_dont_miss_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Promo'),
      '#description' => t('Text for the don\'t miss promo region'),
      '#default_value' => variable_get('tp4_support_dont_miss_text', NULL),
    );
    $form['tp4_support_dont_miss_link'] = array(
      '#type' => 'textfield',
      '#title' => t('Link'),
      '#description' => t('URL for the promo text'),
      '#default_value' => variable_get('tp4_support_dont_miss_link', NULL),
    );
    $form['tp4_support_dont_miss_link_target'] = array(
      '#type' => 'select',
      '#title' => t('Link Target'),
      '#options' => array(
          0 => t('_blank'),
          1 => t('_top'),
       ),
      '#description' => t('Target for the link'),
      '#default_value' => variable_get('tp4_support_dont_miss_link_target', 1),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save
 */
function tp4_support_block_save($delta = '', $edit = array()) {
  if ($delta == 'tp4_footer') {
    $filtered_text = check_markup($edit['tp4_support_footer_text']['value'], $edit['tp4_support_footer_text']['format']);
    variable_set('tp4_support_footer_text_format', $edit['tp4_support_footer_text']['format']);
    variable_set('tp4_support_footer_text', $filtered_text);
  }
  if ($delta == 'tp4_dont_miss') {
    variable_set('tp4_support_dont_miss_label', $edit['tp4_support_dont_miss_label']);
    variable_set('tp4_support_dont_miss_text', $edit['tp4_support_dont_miss_text']);
    variable_set('tp4_support_dont_miss_link', $edit['tp4_support_dont_miss_link']);
    variable_set('tp4_support_dont_miss_link_target', $edit['tp4_support_dont_miss_link_target']);
  }
}

/**
 * Implements hook_bean_types_api_info().
 */
function tp4_support_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function tp4_support_bean_types() {
  $plugins = array();
  $plugin_path = drupal_get_path('module', 'tp4_support') . '/plugins/bean';
  $plugins['featured_campaigns_module'] = array(
    'label' => t('Featured Campaings Module'),
    'description' => t('A listing of campaigns.'),
    'handler' => array(
      'class' => 'FeaturedCampaignsBean',
      'parent' => 'bean',
    ),
    'path' => $plugin_path,
    'file' => 'FeaturedCampaignsBean.class.php',
  );
  return $plugins;
}

/**
 * Implements hook_theme
 */
function tp4_support_theme() {
  return array(
    'tp4_support_footer' => array(
      'variables' => array(
        'footer_text' => '',
        'footer_menu' => menu_tree('menu-takepart-links'),
        'social_links' => menu_tree('menu-social-footer-follow'),
        'corporate_links' => menu_tree('menu-corporate-footer'),
      ),
      'template' => 'tp4-support-footer'
    ),
    'tp4_support_fat_header' => array(
      'arguments' => array(),
      'template' => 'tp4-support-fat-header',
      'variables' => array(
        'logo' => $logo,
        'user_links' => $user_links,
        'search' => $search,
        'megamenu' => $megamenu,
      ),
    ),
    'tp4_support_slim_nav' => array(
      'arguments' => array(),
      'template' => 'tp4-support-slim-nav',
      'variables' => array(
        'logo' => '',
        'slimnav' => '',
        'social_menu' => array(),
        'user_links' => array(),
        'search' => array(),
      ),
    ),
    'tp4_support_graveyard' => array(
      'arguments' => array(),
      'template' => 'tp4-support-graveyard',
    ),
    'tp4_author_full' => array(
      'template' => 'field-formatter--author-full',
      'variables' => array(
        'items' => array(),
        'entity' => '',
      )
    ),
    'tp4_promo_content' => array(
      'template' => 'field-formatter--promo-content',
      'variables' => array(
        'items' => array(),
        'entity' => '',
      )
    ),
    'tp4_support_mobile_menu_header' => array(
      'template' => 'tp4-support-mobile-menu-header',
      'variables' => array(
        'user_links' => array(),
        'social_menu' => array(),
      )
    ),
    'tp4_support_featured_campaign' => array(
      'variables' => array(
        'items' => array(),
        'entity' => '',
      ),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function tp4_support_preprocess_page(&$variables) {
	// If this is an iframe, use the iframe template
	if (arg(0) === 'iframes') {
		$variables['theme_hook_suggestions'][] = 'page__entity_iframe__node';
	}
}

function tp4_menu_link__menu_takepart_links(array $variables) {
	$element = $variables['element'];
	$sub_menu = '';

	if ($element['#below']) {
		$sub_menu = drupal_render($element['#below']);
	}
	$output = l($element['#title'], $element['#href'], array_merge($element['#localized_options'], array('absolute' => true, 'https' => true)));

	return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Implements template_preprocess_HOOK().
 * Set up variables for the tp4_support_footer
 * theme hook.
 */
function template_preprocess_tp4_support_footer(&$variables) {
  global $base_url;

  // In the cases where the CSS isn't part of the theme
  drupal_add_css($base_url.base_path().drupal_get_path('theme', 'tp4').'/css/styles.css');

  $variables['footer_menu_links'] = drupal_render($variables['footer_menu']);
  if (arg(0) === 'iframes') {
    $variables['footer_menu_links'] = str_replace('https://', 'http://', $variables['footer_menu_links']);
  }

  if (empty($variables['footer_text'])){
    $variables['footer_text'] = variable_get('tp4_support_footer_text', '');
  }
}

/**
 * Implements template_preprocess_HOOK().
 *
 * Set up variables for the tp4_support_slim_nav
 * theme hook.
 */
function template_preprocess_tp4_support_slim_nav(&$variables) {
  global $base_url;
  global $user;

  // In the cases where the CSS isn't part of the theme
  drupal_add_css($base_url.base_path().drupal_get_path('theme', 'tp4').'/css/styles.css');

  $image = theme('image', array(
    'path' => drupal_get_path('theme', 'tp4') . '/images/takepart_logo.png',
    'alt' => variable_get('site_name', 'TakePart'),
  ));
  if (arg(0) === "iframes") {
    $variables['logo'] = l($image, '<front>', array('html' => TRUE,'absolute' => TRUE, 'https' => FALSE));
  }
  else {
    $variables['logo'] = l($image, '<front>', array('html' => TRUE));
  }
  $variables['user_links'] = array(
    '#theme' => 'links',
    '#links' => array(),
  );

  if($user->uid == 0) {
    $variables['user_links']['#links']['login'] = array(
      'title' => t('Sign in'),
      'href' => $base_url . '/user',
    );
  }
  else {
    $variables['user_links']['#links']['user'] = array(
      'title' => $user->name,
      'href' => $base_url . '/user',
    );
    $variables['user_links']['#links']['logout'] = array(
      'title' => t('Sign out'),
      'href' => $base_url . '/user/logout',
    );
  }
  $variables['social_menu'] = menu_tree('menu-social-header-follow');
  $variables['search'] = drupal_get_form('search_block_form');

  $slimnav = menu_tree_all_data('menu-megamenu', $link = NULL, $max_depth = 1);
  menu_tree_add_active_path($slimnav);
  $variables['slimnav'] = drupal_render(menu_tree_output($slimnav));

  $variables['search'] = array(
    '#prefix' => '<div class="search">',
    '#suffix' => '</div>',
    0 => array(
      '#markup' => '<div class="search-toggle"></div>',
    ),
    1 => module_invoke('search_api_page', 'block_view', '2'),
  );

  // replace some things with https:// if we're using iframes
  if (arg(0) === 'iframes') {
    $variables['slimnav'] = str_replace('https://', 'http://', $variables['slimnav']);
    $variables['search'] = array();
  }

}

/**
 * Implements template_preprocess_HOOK().
 *
 * Set up variables for tp4_support_mobile_menu_header
 * theme hook.
 *
 * @param  array $variables
 */
function template_preprocess_tp4_support_mobile_menu_header(&$variables) {
  global $base_url;
  global $user;

  $variables['user_links'] = array(
    '#theme' => 'links',
    '#links' => array(),
  );

  if($user->uid == 0) {
    $variables['user_links']['#links']['login'] = array(
      'title' => t('Sign in'),
      'href' => $base_url . '/user',
    );
  }
  else {
    $variables['user_links']['#links']['user'] = array(
      'title' => $user->name,
      'href' => $base_url . '/user',
    );
  }
  $variables['social_menu'] = menu_tree('menu-social-header-follow');

}

/**
 * Implements theme_HOOK().
 *
 * Output HTML for the featured campaigns module.
 *
 * @return string HTML output for a featured campaign item.
 */
function theme_tp4_support_featured_campaign(&$variables) {
  foreach ($variables['items'] as $item) {
    $page_url = url('node/' . $item['target_id']);
    $page = node_load($item['target_id']);
  }
  if (isset($page)) {
    foreach(field_get_items('node', $page, 'field_campaign_reference') as $item) {
      $campaign = node_load($item['target_id']);
    }
  }

  $content = array(
    'image' => array(),
    'label' => array(),
    'headline' => array(),
    'link' => array(),
  );
  // define what we want to check and the order
  // in which we want to check it
  $iterator = array(
    'image' => array(
      array(
        'type' => 'field_collection_item',
        'entity' => $variables['entity'],
        'field' => 'field_thumbnail',
        'display' => array('type' => 'image', 'settings' => array('image_style' => 'homepage_featured_image', 'image_link' => '')),
      ),
      array(
        'type' => 'node',
        'entity' => $page,
        'field' => 'field_thumbnail',
        'display' => array('type' => 'image', 'settings' => array('image_style' => 'homepage_featured_image', 'image_link' => '')),
      ),
      array(
        'type' => 'node',
        'entity' => $campaign,
        'field' => 'field_thumbnail',
        'display' => array('type' => 'image', 'settings' => array('image_style' => 'homepage_featured_image', 'image_link' => '')),
      ),
    ),
    'label' => array(
      array(
        'type' => 'field_collection_item',
        'entity' => $variables['entity'],
        'field' => 'field_promo_label',
        'display' => array(),
      ),
      array(
        'type' => 'node',
        'entity' => $campaign,
        'field' => 'field_topic',
        'display' => array('type' => 'taxonomy_term_reference_plain'),
      ),
    ),
    'headline' => array(
      array(
        'type' => 'field_collection_item',
        'entity' => $variables['entity'],
        'field' => 'field_promo_headline_wysiw',
        'display' => array(),
      ),
      array(
        'type' => 'node',
        'entity' => $page,
        'field' => 'field_promo_headline',
        'display' => array(),
      ),
      array(
        'type' => 'node',
        'entity' => $campaign,
        'field' => 'field_promo_headline',
        'display' => array(),
      ),
    ),
    'link' => array(
      array(
        'type' => 'field_collection_item',
        'entity' => $variables['entity'],
        'field' => 'field_featured_campaign_link',
        'display' => array(),
      ),
    ),
  );

  // if we don't have a $page, prevent errors
  // by unsetting items in $iterator
  if (!isset($page)) {
    unset($iterator['image'][1]);
    unset($iterator['image'][2]);
    unset($iterator['label'][1]);
    unset($iterator['headline'][1]);
    unset($iterator['headline'][2]);
  }

  // work your magic
  foreach($iterator as $field => $candidates) {
    foreach($candidates as $candidate) {
      if (empty($content[$field])) {
        if ($items = field_get_items($candidate['type'], $candidate['entity'], $candidate['field'])) {
          $content[$field] = field_view_value($candidate['type'], $candidate['entity'], $candidate['field'], $items[0], $candidate['display']);
        }
      }
    }
  }

  // add some html
  $content['label']['#prefix'] = '<h4>';
  $content['label']['#suffix'] = '</h4>';
  $content['headline']['#prefix'] = '<h2>';
  $content['headline']['#suffix'] = '</h2>';

  // render the contents of the field collection item
  $return = drupal_render($content['image']) . drupal_render($content['label']) . drupal_render($content['headline']);

  // render the outer link; check the override first
  if (!empty($content['link'])) {
    $content['link']['#element']['html'] = TRUE;
    $content['link']['#element']['title'] = $return;
    $return = $content['link'];
  }
  else if (isset($page_url)) {
    // $page_url was constructed with the "URL" function
    // so we may need to strip an initial slash
    $return = l($return, preg_replace('#^/#', '', $page_url), array('html' => TRUE));
  }

  // render() will just return a string if it's passed one
  return render($return);
}

function tp4_support_fat_header(){
  global $base_url;
  global $user;
  $logo = $base_url . '/'. drupal_get_path('theme', 'tp4'). '/images/takepart_logo.png';
  if($user->uid == 0){
    $user_links = array();
    $user_links = array(
      '<li>'. l('Sign in', $base_url. '/user'). '</li>',
    );
  }
  else {
    $user_links = array(
      '<li class="user">'. l($user->name, $base_url. '/user'). '</li>',
      '<li>'. l('Sign out', $base_url. '/user/logout'). '</li>',
    );
    $search = drupal_render(drupal_get_form('search_block_form'));
  }
  $megamenu = module_invoke('tp_megamenu', 'block_view', 'tp_megamenu_megamenu');
  $megamenu = $megamenu['content'];

  return theme('tp4_support_fat_header', array('logo' => $logo, 'user_links' => $user_links, 'search' => $search, 'megamenu' => $megamenu));
}

function tp4_support_dont_miss(){
  $dont_miss_label = variable_get('tp4_support_dont_miss_label', NULL);
  $dont_miss_text = variable_get('tp4_support_dont_miss_text', NULL);
  $dont_miss_link = variable_get('tp4_support_dont_miss_link', NULL);
  $dont_miss_link_target = variable_get('tp4_support_dont_miss_link_target', 1);
  $output = '';
  if($dont_miss_text != NULL){
    $output .= '<div class="promo"><div class="inner">';
    if($dont_miss_label != NULL){
      $output .= '<label>'. $dont_miss_label. '</label>';
    }
    if($dont_miss_link == NULL){
      $output .= '<div class="text">'. $dont_miss_text. '</div>';
    }
    else{
      $target = ($dont_miss_link_target == 1 ? '_top' : '_blank');
      $output .= l($dont_miss_text, $dont_miss_link, array('html' => true, 'attributes' => array('class' => array ('text'), 'target' => $target)));
    }
    $output .= '</div></div>';
  }
  return $output;
}

/*
 * Implements hook_field_formatter_info()
 */
function tp4_support_field_formatter_info(){
  return array(
    'tp4_author_full' => array(
      'label' => t('Author w/ image and bio field formatter'),
      'field types' => array('node_reference'),
    ),
    'tp4_promo_content' => array(
      'label' => t('Promo Content'),
      'field types' => array('field_collection'),
    ),
    'tp4_featured_campaign' => array(
      'label' => t('Featured Campaign'),
      'field types' => array('entityreference'),
    ),
  );
}

/*
 * Implements hook_field_formatter_view()
 */
function tp4_support_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  $settings = $display['settings'];
  switch($display['type']){
    case 'tp4_author_full':
      $element = array(
        '#theme' => 'tp4_author_full',
        '#items' => $items,
        '#entity' => $entity,
      );
    break;
    case 'tp4_promo_content':
      $element = array(
        '#theme' => 'tp4_promo_content',
        '#items' => $items,
        '#entity' => $entity,
      );
    break;
    case 'tp4_featured_campaign':
      $element = array(
        '#theme' => 'tp4_support_featured_campaign',
        '#items' => $items,
        '#entity' => $entity,
      );
    break;
  }
  return $element;
}

function tp4_support_preprocess_block(&$variables) {
  if($variables['block_html_id'] == 'block-views-takeaction-homepage-block'){
    $variables['theme_hook_suggestions'][] = 'block__views__homepage_columns_block';
  }
  else if ($variables['block']->bid === 'tp4_support-tp4_mobile_menu_header') {
    $variables['classes_array'][] = 'mobile-menu-header';
  }
}

function tp4_support_form_alter(&$form, &$form_state, $form_id){
  /**
   *  addresses issues from bg_color.
   *  issue related to module being updated as it wiped the changes away.
   *  code will alter the saved values from the db to the front end for rgb as there are only a few rgba values
   */
  if (isset($form['field_campaign_bg_color'])) {
    $language = $form['language']['#value'];
    
    //does this only if it exist
    if (isset($form['field_campaign_bg_color'][$language])) {
      //grabs the max delta from the values
      $max_delta = $form['field_campaign_bg_color'][$language]['#max_delta'];
      
      //ensures that this does it for the max delta allowed
      for ($i = 0; $i < $max_delta + 1; $i++) {
        //only continue if rgb is set
        if (isset($form['field_campaign_bg_color'][$language][$i]['rgb'])) {
          $default_value = $form['field_campaign_bg_color'][$language][$i]['rgb']['#default_value'];
          
          //changes the rgb to hex
          if (stripos($default_value, 'rgb(') !== FALSE || stripos($default_value, 'rgba(') !== FALSE) {
            //sanitizes the rgb to hex
            $rgb = str_replace('rgb(', '', $default_value); //address rgb
            $rgb = str_replace('rgba(', '', $default_value); //addresses rgba
            $rgb = str_replace(')', '', $rgb);
            $rgb = explode(',', $rgb);
            $hex = _tp4_support_rgb_to_hex((int)$rgb[0], (int)$rgb[1], (int)$rgb[2]);
            
            //this address rgba as rgb[4] has a value. this is not used currently so setting it to no color
            if (isset($rgb[4])) {
              $form['field_campaign_bg_color'][$language][$i]['rgb']['#default_value'] = '';
            }
            //else set the hex value from rgb
            elseif (!empty($hex)) {
              $form['field_campaign_bg_color'][$language][$i]['rgb']['#default_value'] = $hex;
            }
          }
        }
      }
    }
  }
  
  if($form['#form_id'] == 'search_api_page_search_form_site_search'){
    $form['keys_2']['#attributes']['placeholder'] = t('Search');
    $form['#action'] = '/';
  }

  $tab_title_override = variable_get('main_feature_tab_title_override', NULL);
  if($form['#form_id'] == 'ctools_node_content_type_edit_form'){
    $form['main_feature_tab_title_override'] = array(
      '#title' => t('TAB Title Override'),
      '#default_value' => t($tab_title_override),
      '#type' => 'textfield',
      '#description' => t('Override for the take action title'),
      '#states' => array(
        'visible' => array(
          ':input[name="build_mode"]' => array('value' => 'feature_main'),
        ),
      )
    );
    $form['#submit'][] = 'tp4_support_panel_main_feature';
  }
}

/**
 *  @function:
 *    Function is used to convert rgb to hex
 */
function _tp4_support_rgb_to_hex($r, $g, $b) {
  //convert to hex
  $hex = "#";
  $hex.= str_pad(dechex($r), 2, "0", STR_PAD_LEFT);
  $hex.= str_pad(dechex($g), 2, "0", STR_PAD_LEFT);
  $hex.= str_pad(dechex($b), 2, "0", STR_PAD_LEFT);

  return $hex;
}


function tp4_support_panel_main_feature($form, &$form_state) {
  variable_set('main_feature_tab_title_override', $form['main_feature_tab_title_override']['#value']);
}

/**
 * Implements hook_url_inbound_alter().
 *
 * Performs the following substitutions:
 * * Redirect paths that begin with "teach/stories" to the
 *   teach stories webapp.
 */
function tp4_support_url_inbound_alter(&$path, $original_path, $path_language) {
  if (preg_match('/^teach\/stories/', $path)) {
    $path = 'wordlet/teach_browse_stories';
  }
}

function tp4_support_page_alter(&$page) {
  $node = menu_get_object();
  $campaign_types = variable_get('card_types', array());
  $campaign_types[] = 'campaign_page';
  if (isset($node) && in_array($node->type, $campaign_types)) {
    unset($page['page_bottom']['omniture']);
  }
}

/**
 * Implements hook_menu_attribute_info_alter().
 */
function tp4_support_menu_attribute_info_alter(&$info) {
  $info['title']['label'] = t('Description');
  $info['id']['description'] = t("Specifies a unique ID for the link (example: 'series')");
  $info['name']['label'] = t('More Label');
  $info['name']['description'] = t('Text for the more link on MegaMenus');
  $info['rel']['label'] = t('Anchor Tag');
  $info['rel']['description'] = t('Add an anchor tag to the link above here.');
}

/**
 * Alter homepage callback to function that checks for content length.
 */
function tp4_support_page_delivery_callback_alter(&$callback) {
  if ($callback == 'drupal_deliver_html_page' && current_path() == 'tp4_homepage') {
    $callback = 'tp4_support_deliver_homepage';
  }
}

/**
 * If homepage content is empty, return a 500 status code to prevent CDN caching.
 */
function tp4_support_deliver_homepage($page_callback_result) {
  if (empty($page_callback_result['content'])) {
    drupal_add_http_header('Content-Type', 'text/plain');
    drupal_add_http_header('Status', '500 Internal Server Error');
  }
  else {
    drupal_deliver_html_page($page_callback_result);
  }
}

/**
 *  Implements hook_token_info().
 */
function tp4_support_token_info() {
  $info = array();
  
  //new type of token
  $info['types']['tp4_support_tokens'] = array(
    'name' => t('TP4 Support Tokens'),
    'description' => t('Custom tokens for TP4'),
  );
  
  //token area
  $info['tokens']['tp4_support_tokens']['campaign_thumbnail'] = array(
    'name' => t('Campaign Thumbnail'),
    'description' => t('If a campaign thumbnail exist and a reference is set then it will pull that thumbnail, otherwise fallback to the node\'s thumbnail'),
    'needs-data' => 'node'
  );
  
  $info['tokens']['tp4_support_tokens']['campaign'] = array(
    'name' => t('Campaign Description'),
    'description' => t('If a campaign field exist and a reference is set then it will pull that field, otherwise fallback to the node\'s field'),
    'dynamic' => TRUE,
  );
  
  //return the new defined token
  return $info;
}

/**
 *  Implements hook_tokens().
 */
function tp4_support_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  
  //token for tp4 support
  if ($type == 'tp4_support_tokens') {
    //does it for each token available
    foreach ($tokens as $name => $value) {
      //switch based on token name
      switch ($name) {
        case 'campaign_thumbnail':
          $replacements[$value] = _tp4_support_token_campaign_thumbnail($data);
          break;
      }
      
      //does for dynamic
      if (stripos($name, 'campaign:') !== FALSE) {
        $replacements[$value] = _tp4_support_token_campaign_info($data, $tokens[$name]);
      }
    }
  }
  
  //return the replacement
  return $replacements;
}
function _tp4_support_token_campaign_info($data = array(), $token) {
  //variables
  $node = $data['node'];
  $output = NULL;
  
  //sanitizes the token to get field
  $field = str_replace('[', '', $token);
  $field = str_replace(']', '', $field);
  $field_array = explode(':', $field);
  $count_field = count($field_array);
  $field_name = $field_array[$count_field - 1];
  
  //first level: node level return
  $output = _tp4_support_get_field_value($node, $field_name, 'node');
  
  //second level: only if output is empty return parent level
  if (empty($output) && is_object($node) && isset($node->field_campaign_reference)) {
    $campaign_item = field_get_items('node', $node, 'field_campaign_reference');
    
    //checks to ensure that the target id is numeric
    if (is_numeric($campaign_item[0]['target_id'])) {
      //loads the parent
      $parent_node = node_load($campaign_item[0]['target_id']);
      
      //calls the same function as first level but uses parent node
      $output = _tp4_support_get_field_value($parent_node, $field_name, 'parent');  
    }
  }
  
  //third level: return value or NULL if nothing has been found
  return $output;
}

/**
 *  @function:
 *    This function is used to return the markup of fields
 */
function _tp4_support_get_field_value($node, $field_name = '', $level) {
  $output = NULL;
  
  //check if the field exist in the node level  
  if (is_object($node) && isset($node->$field_name) && !empty($node->$field_name)) {
    //return only if a value is set
    $field_item = field_get_items('node', $node, $field_name);
    $field_value = field_view_value('node', $node, $field_name, $field_item[0]);
  
    //return the output only if the value is set
    if (isset($field_value['#markup']) && !empty($field_value['#markup'])) {
      $output = $field_value['#markup'];
    }
  }
 
  //allows other to alter the token using hook_tp4_token_campaign_alter().
  drupal_alter('tp4_token_campaign', $node, $field_name, $output, $level);
 
  return $output;
}

/**
 *  @function:
 *    Token function that is used to grab the correct thumbnail for campaign pages
 *
 *    @precedence:
 *      1. Node Level Thumbnail
 *      2. Parent Campaign Level Thumbnail
 *      3. No Thumbnail
 */
function _tp4_support_token_campaign_thumbnail($data = array()) {
  $node = $data['node'];
  
  //only does this if the field_thumbnail is not set
  if (isset($node->field_thumbnail) && empty($node->field_thumbnail)) {
    //checks to ensure that the node is passed and only do this for campaign that has the field set.
    if (is_object($node) && isset($node->field_campaign_reference)) {
      //grabs the target id
      $campaign_item = field_get_items('node', $node, 'field_campaign_reference');
      
      //checks to ensure that the target id is numeric
      if (is_numeric($campaign_item[0]['target_id'])) {
        //return campaign nid
        return $campaign_item[0]['target_id'];
      }
      else {
        //fallback to return node nid
        return $node->nid;
      }
    }
  }
  //return the node nid if the field is not empty
  elseif (isset($node->field_thumbnail) && !empty($node->field_thumbnail)) {
    return $node->nid;
  }
  
  //default return 0
  return 0;
}

/**
 *  Implements hook_menu_alter().
 */
function tp4_support_menu_alter(&$items) {
  //alters the page callback for the node reference. ensure that this module is after node_reference.
  $items['node_reference/autocomplete/%/%/%']['page callback'] = 'tp4_support_node_reference_autocomplete';
}

/**
 *  @function:
 *    This function is used to override the autocomplete provided by node_reference.
 *    This code was taken from the node_reference.module.
 *    Autocomplete now comes back with published vs unpublished.
 */
function tp4_support_node_reference_autocomplete($entity_type, $bundle, $field_name, $string = '') {
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  $options = array(
    'string' => $string,
    'match' => $instance['widget']['settings']['autocomplete_match'],
    'limit' => 10,
  );
  $references = node_reference_potential_references($field, $options);

  $matches = array();
  foreach ($references as $id => $row) {
    // Markup is fine in autocompletion results (might happen when rendered
    // through Views) but we want to remove hyperlinks.
    $suggestion = preg_replace('/<a href="([^<]*)">([^<]*)<\/a>/', '$2', $row['rendered']);
    
    //adds in additional status
    $node = node_load($id);
    $status = ($node->status) ? '[Published]' : '[Unpublished]';
    
    // Add a class wrapper for a few required CSS overrides.
    $matches[$row['title'] . " [nid:$id]"] = '<div class="reference-autocomplete">' . $suggestion . ' ' . $status .  '</div>';
  }

  drupal_json_output($matches);
}

function tp4_support_menu() {
	$items['iframes/%'] = array(
		'type' => MENU_NORMAL_ITEM,
		'page callback' => 'tp4_support_iframes',
		'page arguments' => array(1),
		'access callback' => TRUE,
	);
	return $items;
}

function tp4_support_iframes($arg) {

	switch($arg) {
		case 'header':
		case 'slim-header':
			$block = module_invoke('tp4_support', 'block_view', 'tp4_slim_nav');
			return '<div id="page-wrapper"><div class="slimnav slim-nav responsive">'.render($block['content']).'</div></div>';
			break;
		case 'footer':
			$block = module_invoke('tp4_support', 'block_view', 'tp4_footer');
			return '<div class="footer-wrapper"><footer id="footer" class="region region-footer"><div id="block-tp4-support-tp4-footer" class="block">'.render($block['content']).'</div><footer></div>';
			break;
	}
}