<?php
/**
 * @file
 * TakePart module for functions related to flashcards.
 */

/**
 * Implements hook_help().
 */
function tp_flashcards_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tp_flashcards':
    return '<p>' . t('Support module for TakePart flashcards.') . '</p>';
  }
}

/**
 * Implements template_preprocess_node().
 *
 * For the full view of certain nodes, filter the node body
 * per flashcard.
 *
 * @todo This probably should use hook_node_view().
 */
function tp_flashcards_preprocess_node(&$variables) {
  $types_to_flashcard = array(
    'openpublish_article',
    'feature_article',
    'openpublish_photo_gallery',
    'video',
  );

  if (in_array($variables['type'], $types_to_flashcard) && $variables['view_mode'] === 'full') {
    foreach(_tp_flashcards_get_all() as $nid => $flashcard) {
      $synonyms = array_map('preg_quote', _tp_flashcards_get_synonyms($flashcard));
      $pattern = '/\b(' . implode('|', $synonyms) . ')\b(?![^<]*<\/a)/i';
      $variables['content']['body'][0]['#markup'] = preg_replace($pattern, '<a data-flashcard="' . $nid . '" href="' . url('node/' . $nid). '" class="flashcard">$0</a>', $variables['content']['body'][0]['#markup'], 1);
    }
  }
}

/**
 * Return an associative array of flashcards.
 *
 * Uses a static variable and a the database for caching.
 *
 * @return $flashcards An associative array of flashcards
 */
function _tp_flashcards_get_all() {
  $flashcards = &drupal_static(__FUNCTION__);

  if (!isset($flashcards)) {

    // default value is empty
    $flashcards = array();

    if ($cache = cache_get('tp_flashcards_list')) {
      $flashcards = $cache->data;
    } else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'flashcard')
        ->propertyCondition('status', 1);
      $result = $query->execute();

      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $flashcards = entity_load('node', $nids);
      }

      // @todo make this CACHE_PERMANENT
      // and clear the value on flashcard create/update/delete
      cache_set('tp_flashcards_list', $flashcards, 'cache', CACHE_TEMPORARY);
    }
  }

  return $flashcards;
}

/**
 * Return an array of synonyms for a given flashcard.
 *
 * @param StdClass $flashcard A node object of type "flashcard"
 *
 * @return $synonyms an associative array of synonyms
 */
function _tp_flashcards_get_synonyms($flashcard) {
  $synonyms = array();

  foreach (field_get_items('node', $flashcard, 'field_flashcard_synonyms') as $item) {
    $synonyms[] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_synonyms', $item, array('label' => 'hidden')));
  }

  return $synonyms;
}
