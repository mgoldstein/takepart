<?php
/**
 * @file
 * TakePart module for functions related to flashcards.
 */

module_load_include('inc', 'tp_flashcards', 'tp_flashcards.block');

/**
 * Implements hook_help().
 */
function tp_flashcards_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tp_flashcards':
    return '<p>' . t('Support module for TakePart flashcards.') . '</p>';
  }
}

/**
 * Implements template_preprocess_page().
 *
 * Include flashcards JS/CSS in every page, and disable
 * the system_main block on flashcard node pages.
 */
function tp_flashcards_preprocess_page(&$variables) {
  // build up the array of flashcard terms for the tooltip displays
  $data = array();
  foreach (_tp_flashcards_get_all() as $nid => $flashcard) {
    $card = array();
    $items = field_get_items('node', $flashcard, 'field_flashcard_display_name');
    $card['title'] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_display_name', $items[0]));
    $items = field_get_items('node', $flashcard, 'field_flashcard_pronunciation');
    $card['pronunciation'] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_pronunciation', $items[0]));
    $items = field_get_items('node', $flashcard, 'field_flashcard_short_definition');
    $card['definition'] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_short_definition', $items[0]));
    $items = field_get_items('node', $flashcard, 'field_flashcard_page_headline');
    $card['page_title'] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_page_headline', $items[0]));
    $data[$nid] = $card;
  }

  drupal_add_js(array('flashcards' => $data), 'setting');
  drupal_add_css(drupal_get_path('module', 'tp_flashcards') . '/css/tooltipster.css');
  drupal_add_js(drupal_get_path('module', 'tp_flashcards') . '/js/vendor/jquery.tooltipster.min.js');
  drupal_add_js(drupal_get_path('module', 'tp_flashcards') . '/js/tp_flashcards.js');

  // the tp4_flashcards context (in a feature required by this module)
  // renders the system_main block in the preface region.
  // we can delete it from the content region on flashcard node pages
  if (!path_is_admin(current_path()) && isset($variables['node']) && $variables['node']->type === 'flashcard') {
    unset($variables['page']['content']['system_main']);
  }
}

/**
 * Implements template_preprocess_node().
 *
 * For the full view of certain nodes, filter the node body
 * per flashcard. For flashcards, set up template variables and
 * replace the title with the page_title field.
 *
 * @todo This probably should use hook_node_view().
 */
function tp_flashcards_preprocess_node(&$variables) {
  $types_to_flashcard = array(
    'openpublish_article',
    'feature_article',
    'openpublish_photo_gallery',
    'video',
  );

  // replace flashcards on editorial content types
  if (in_array($variables['type'], $types_to_flashcard) && $variables['view_mode'] === 'full') {
    foreach(_tp_flashcards_get_all() as $nid => $flashcard) {
      $synonyms = array_map('preg_quote', _tp_flashcards_get_synonyms($flashcard));
      $pattern = _tp_flashcards_get_replacement_pattern($synonyms);
      $variables['content']['body'][0]['#markup'] = preg_replace($pattern, '<a data-flashcard="' . $nid . '" href="' . url('node/' . $nid). '" class="flashcard">$0</a>', $variables['content']['body'][0]['#markup'], 1);
    }
  }
  else if (!empty($variables['field_campaign_instructional'])) {
    foreach(_tp_flashcards_get_all() as $nid => $flashcard) {
      $synonyms = array_map('preg_quote', _tp_flashcards_get_synonyms($flashcard));
      $pattern = _tp_flashcards_get_replacement_pattern($synonyms);
      $variables['content']['field_campaign_instructional'][0]['#markup'] = preg_replace($pattern, '<a data-flashcard="' . $nid . '" href="' . url('node/' . $nid). '" class="flashcard">$0</a>', $variables['content']['field_campaign_instructional'][0]['#markup'], 1);
    }
  }

  // setup 
  if ($variables['type'] === 'flashcard') {
    foreach (field_get_items('node', $variables['node'], 'field_flashcard_page_headline') as $item) {
      $variables['title'] = drupal_render(field_view_value('node', $variables['node'], 'field_flashcard_page_headline', $item));
    }

    if ($variables['view_mode'] === 'full') {
      // set up CTA link
      $items = field_get_items('node', $variables['node'], 'field_flashcard_related_category');
      $path = url('taxonomy/term/' . $items[0]['entity']->tid);
      $items = field_get_items('node', $variables['node'], 'field_flashcard_related_cta_text');
      $text = drupal_render(field_view_value('node', $variables['node'], 'field_flashcard_related_cta_text', $items[0]));
      $variables['flashcard_cta_link'] = array(
        '#theme' => 'link',
        '#text' => $text,
        '#path' => substr($path, 1),
        '#options' => array('attributes' => array('class' => array('flashcard-cta-link'))),
      );
    }
  }
}

/**
 * Implements hook_node_view().
 *
 * Alter the title of flashcards when loaded.
 */
function tp_flashcards_node_view($node) {
  if ($node->type == 'flashcard') {
    foreach (field_get_items('node', $node, 'field_flashcard_page_headline') as $item) {
      $node->title = drupal_render(field_view_value('node', $node, 'field_flashcard_page_headline', $item));
    }
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 *
 * Alter the node title of flashcards when they appear in views. 
 *
 * @param array $variables theme variables
 */
function tp_flashcards_preprocess_views_view_fields(&$variables) {
  if ($variables['row']->node_type === "flashcard" && isset($variables['fields']['title'])) {
    $type = $variables['row']->_field_data['nid']['entity_type'];
    $node = $variables['row']->_field_data['nid']['entity'];
    $field = $variables['fields']['title'];

    foreach (field_get_items($type, $node, 'field_flashcard_page_headline') as $item) {
      $page_headline = drupal_render(field_view_value($type, $node, 'field_flashcard_page_headline', $item));
    }
    $variables['fields']['title']->content = preg_replace("/{$field->raw}/", $page_headline, $field->content);
  }
}

/**
 * Implements hook_node_presave().
 *
 * Clear out flashcards cache on node create/update.
 */
function tp_flashcards_node_presave($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Implements hook_node_delete().
 *
 * Clear out flashcards cache on node delete.
 */
function tp_flashcards_node_delete($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Return an associative array of flashcards.
 *
 * Uses a static variable and a the database for caching.
 *
 * @return $flashcards An associative array of flashcards
 */
function _tp_flashcards_get_all() {
  $flashcards = &drupal_static(__FUNCTION__);

  if (!isset($flashcards)) {

    // default value is empty
    $flashcards = array();

    if ($cache = cache_get('tp_flashcards_list')) {
      $flashcards = $cache->data;
    } else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'flashcard')
        ->propertyCondition('status', 1);
      $result = $query->execute();

      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $flashcards = entity_load('node', $nids);
      }

      // @todo make this CACHE_PERMANENT
      // and clear the value on flashcard create/update/delete
      cache_set('tp_flashcards_list', $flashcards, 'cache', CACHE_TEMPORARY);
    }
  }

  return $flashcards;
}

/**
 * Return an array of synonyms for a given flashcard.
 *
 * @param StdClass $flashcard A node object of type "flashcard"
 *
 * @return $synonyms an associative array of synonyms
 */
function _tp_flashcards_get_synonyms($flashcard) {
  $synonyms = array();

  foreach (field_get_items('node', $flashcard, 'field_flashcard_synonyms') as $item) {
    $synonyms[] = drupal_render(field_view_value('node', $flashcard, 'field_flashcard_synonyms', $item, array('label' => 'hidden')));
  }

  return $synonyms;
}

/**
 * Construct the regex pattern to match flashcard terms in editorial content.
 *
 * @param  array  $synonyms An array of regex-escaped strings to match
 *
 * @return string           The flashcard display pattern
 */
function _tp_flashcards_get_replacement_pattern($synonyms) {
  return '/\b(' . implode('|', $synonyms) . ')\b(?!(?:[^<]*(?:<([^\s]+)[^<]+</\2)|(?:</[^\s]+>))*[^<]*</a)/i';
}
