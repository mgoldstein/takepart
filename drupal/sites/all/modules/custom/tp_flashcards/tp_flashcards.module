<?php
/**
 * @file
 * TakePart module for functions related to flashcards.
 */

/* Disable the parsing of article body text per TP-3321
 * Commented out functions tp_flashcards_preprocess_node, 
 * _tp_flashcards_get_replacement_pattern, _tp_flashcards_get_all, 
 * tp_flashcards_preprocess_page, tp_flashcards_init,
 * _tp_flashcards_parse_static_var, _tp_flashcards_get_synonyms, 
 * and tp_flashcards_parse_html
 */

module_load_include('inc', 'tp_flashcards', 'tp_flashcards.block');

/**
 * Implements hook_help().
 */
function tp_flashcards_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tp_flashcards':
    return '<p>' . t('Support module for TakePart flashcards.') . '</p>';
  }
}

/**
 * Implements hook_node_view().
 *
 * Alter the title of flashcards when loaded.
 */
function tp_flashcards_node_view($node) {
  if ($node->type == 'flashcard') {
    foreach (field_get_items('node', $node, 'field_flashcard_page_headline') as $item) {
      $node->title = drupal_render(field_view_value('node', $node, 'field_flashcard_page_headline', $item));
    }
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 *
 * Alter the node title of flashcards when they appear in views.
 *
 * @param array $variables theme variables
 */
function tp_flashcards_preprocess_views_view_fields(&$variables) {
  if ($variables['row']->node_type === "flashcard" && isset($variables['fields']['title'])) {
    $type = $variables['row']->_field_data['nid']['entity_type'];
    $node = $variables['row']->_field_data['nid']['entity'];
    $field = $variables['fields']['title'];

    foreach (field_get_items($type, $node, 'field_flashcard_page_headline') as $item) {
      $page_headline = drupal_render(field_view_value($type, $node, 'field_flashcard_page_headline', $item));
    }
    $variables['fields']['title']->content = preg_replace("/{$field->raw}/", $page_headline, $field->content);
  }
}

/**
 * Implements hook_node_presave().
 *
 * Clear out flashcards cache on node create/update.
 */
function tp_flashcards_node_presave($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Implements hook_node_delete().
 *
 * Clear out flashcards cache on node delete.
 */
function tp_flashcards_node_delete($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Get a render array for the flashcard Call to Action link
 *
 * @param  StdClass $node The node object whose cta link we're building
 * @return array          A render array
 */
function _tp_flashcards_get_cta_link($node) {
  if ($items = field_get_items('node', $node, 'field_flashcard_related_category')) {
    $path = url('taxonomy/term/' . $items[0]['target_id']);
  } else {
    // we don't have a taxonomy term and will fall back
    // to searching for the first synonym
    $items = field_get_items('node', $node, 'field_flashcard_synonyms');
    $term = drupal_render(field_view_value('node', $node, 'field_flashcard_synonyms', $items[0]));
    $path = urldecode(url('search/' . $term));
  }

  foreach (field_get_items('node', $node, 'field_flashcard_related_cta_text') as $item) {
    $text = drupal_render(field_view_value('node', $node, 'field_flashcard_related_cta_text', $item));
  }

  return array(
    '#theme' => 'link',
    '#text' => $text,
    '#path' => substr($path, 1),
    '#options' => array('attributes' => array('class' => array('flashcard-cta-link'))),
  );
}