<?php

/**
 * @file
 * TakePart module for functions related to flashcards.
 */

/* Disable the parsing of article body text per TP-3321
 * 
 * Removed functions _tp_flashcards_get_replacement_pattern, tp_flashcards_init,
 * _tp_flashcards_parse_static_var, _tp_flashcards_get_synonyms,
 * and tp_flashcards_parse_html
 */

module_load_include('inc', 'tp_flashcards', 'tp_flashcards.block');

/**
 * Implements hook_help().
 */
function tp_flashcards_help($path, $arg) {
  switch ($path) {
    case 'admin/help#tp_flashcards':
    return '<p>' . t('Support module for TakePart flashcards.') . '</p>';
  }
}

/**
 * Return an associative array of flashcards.
 *
 * Uses a static variable and a the database for caching.
 *
 * @return $flashcards An associative array of flashcards
 */
function _tp_flashcards_get_all() {
  $flashcards = &drupal_static(__FUNCTION__);

  if (!isset($flashcards)) {

    // default value is empty
    $flashcards = array();

    if ($cache = cache_get('tp_flashcards_list')) {
      $flashcards = $cache->data;
    } else {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'flashcard')
        ->propertyCondition('status', 1);
      $result = $query->execute();

      if (isset($result['node'])) {
        $nids = array_keys($result['node']);
        $flashcards = entity_load('node', $nids);
      }

      // @todo make this CACHE_PERMANENT
      // and clear the value on flashcard create/update/delete
      cache_set('tp_flashcards_list', $flashcards, 'cache', CACHE_TEMPORARY);
    }
  }
  return $flashcards;
}

/**
 * Implements template_preprocess_page().
 *
 * Disable the system_main block on flashcard node pages.
 */
function tp_flashcards_preprocess_page(&$variables) {
  // build up the array of flashcard terms for the tooltip displays
  $data = array();
  foreach (_tp_flashcards_get_all() as $nid => $flashcard) {
    $card = array();
    $items = field_get_items('node', $flashcard, 'field_flashcard_display_name');
    $content = field_view_value('node', $flashcard, 'field_flashcard_display_name', $items[0]);
    $card['title'] = drupal_render($content);
    $items = field_get_items('node', $flashcard, 'field_flashcard_pronunciation');
    $content = field_view_value('node', $flashcard, 'field_flashcard_pronunciation', $items[0]);
    $card['pronunciation'] = drupal_render($content);
    $items = field_get_items('node', $flashcard, 'field_flashcard_short_definition');
    $content = field_view_value('node', $flashcard, 'field_flashcard_short_definition', $items[0]);
    $card['definition'] = drupal_render($content);
    $items = field_get_items('node', $flashcard, 'field_flashcard_page_headline');
    $content = field_view_value('node', $flashcard, 'field_flashcard_page_headline', $items[0]);
    $card['page_title'] = drupal_render($content);
    $data[$nid] = $card;
  }
  
  if (!path_is_admin(current_path()) && isset($variables['node']) && $variables['node']->type === 'flashcard') {
    unset($variables['page']['content']['system_main']);
  }
}

/**
 * Implements template_preprocess_node().
 *
 * For flashcards, set up template variables and replace the title with the
 * page_title field.
 *
 * @todo This probably should use hook_node_view().
 */
function tp_flashcards_preprocess_node(&$variables) {
  if ($variables['type'] === 'flashcard') {
    foreach (field_get_items('node', $variables['node'], 'field_flashcard_page_headline') as $item) {
      $variables['title'] = drupal_render(field_view_value('node', $variables['node'], 'field_flashcard_page_headline', $item));
    }
  }
}

  /**
 * Implements hook_node_view().
 *
 * Alter the title of flashcards when loaded.
 */
function tp_flashcards_node_view($node) {
  if ($node->type == 'flashcard') {
    foreach (field_get_items('node', $node, 'field_flashcard_page_headline') as $item) {
      $node->title = drupal_render(field_view_value('node', $node, 'field_flashcard_page_headline', $item));
    }
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 *
 * Alter the node title of flashcards when they appear in views.
 *
 * @param array $variables theme variables
 */
function tp_flashcards_preprocess_views_view_fields(&$variables) {
  if ($variables['row']->node_type === "flashcard" && isset($variables['fields']['title'])) {
    $type = $variables['row']->_field_data['nid']['entity_type'];
    $node = $variables['row']->_field_data['nid']['entity'];
    $field = $variables['fields']['title'];

    foreach (field_get_items($type, $node, 'field_flashcard_page_headline') as $item) {
      $page_headline = drupal_render(field_view_value($type, $node, 'field_flashcard_page_headline', $item));
    }
    $variables['fields']['title']->content = preg_replace("/{$field->raw}/", $page_headline, $field->content);
  }
}

/**
 * Implements hook_node_presave().
 *
 * Clear out flashcards cache on node create/update.
 */
function tp_flashcards_node_presave($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Implements hook_node_delete().
 *
 * Clear out flashcards cache on node delete.
 */
function tp_flashcards_node_delete($node) {
  if ($node->type == 'flashcard') {
    cache_clear_all('tp_flashcards_list', 'cache');
  }
}

/**
 * Get a render array for the flashcard Call to Action link
 *
 * @param  StdClass $node The node object whose cta link we're building
 * @return array          A render array
 */
function _tp_flashcards_get_cta_link($node) {
  if ($items = field_get_items('node', $node, 'field_flashcard_related_category')) {
    $path = url('taxonomy/term/' . $items[0]['target_id']);
  } else {
    // we don't have a taxonomy term and will fall back
    // to searching for the first synonym
    $items = field_get_items('node', $node, 'field_flashcard_synonyms');
    $term = drupal_render(field_view_value('node', $node, 'field_flashcard_synonyms', $items[0]));
    $path = urldecode(url('search/' . $term));
  }

  foreach (field_get_items('node', $node, 'field_flashcard_related_cta_text') as $item) {
    $text = drupal_render(field_view_value('node', $node, 'field_flashcard_related_cta_text', $item));
  }

  return array(
    '#theme' => 'link',
    '#text' => $text,
    '#path' => substr($path, 1),
    '#options' => array('attributes' => array('class' => array('flashcard-cta-link'))),
  );
}