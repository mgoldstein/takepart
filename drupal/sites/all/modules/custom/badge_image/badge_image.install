<?php
/**
 * @file
 * Sets up the base table for the badge image entity and a table to store
 * information about the entity types.
 */

/**
 * Implements hook_schema().
 */
function badge_image_schema() {
  $schema = array();

  $schema['badge_image'] = array(
    'description' => 'The base table for badge image entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier for the entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {badge_img_type}.type of the entity.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'text' => array(
        'description' => 'The text entered by the user.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'fid' => array(
        'description' => 'The {file_managed}.fid of the badge image.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'description' => 'The {users}.id who authored the badge. If set to 0, this badge was created by an anonymous user.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => "The author's hostname.",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the badge was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the badge was last changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type' => array('type'),
    ),

  );

  $schema['badge_image_type'] = array(
    'description' => 'Store information about defined badge image types',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier of the type.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine readable name of the type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human readable name of the type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'fid' => array(
        'description' => 'The {file_managed}.fid of the blank badge image.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'font_size' => array(
        'description' => 'The size of the font for user entered text.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'font_angle' => array(
        'description' => 'The angle of the font for the user entered text.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'offset_y' => array(
        'description' => 'The vertical offset of the user entered text.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'max_length' => array(
        'description' => 'The maximum length of the user entered text.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      // Exportable entity fields.
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  return $schema;
}
