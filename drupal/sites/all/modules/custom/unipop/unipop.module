<?php
/**
 * @file
 * Universal Popups Support module.
 *
 */

/*
 * not needed yet...
 *
// bring in the rest of the code
$path = drupal_get_path('module', 'unipop');
require_once($path . '/unipop.nodeops.inc');
require_once($path . '/unipop.blockops.inc');
*/

/***
 * implentation of hook_init()
 */
function unipop_init() {
  $path = drupal_get_path('module', 'unipop');
  drupal_add_css($path . '/css/unipop.css', array('every_page' => TRUE));
  drupal_add_js($path . '/js/unipop.js', 'file');
}



/**
 * Implements hook_menu().
 */
function unipop_menu() {
  $items['unipop/video_id_from_node/%'] = array(
    'title' => 'Unipop callback to get the youtube id of a video from a video node id',
    'page callback' => 'unipop_get_video_id_from_node',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['unipop/video_preview_from_node/%'] = array(
    'title' => 'Unipop callback to get the youtube preview of a video from a video node id',
    'page callback' => 'unipop_get_video_preview_from_node',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  /*
    $items['admin/config/system/unipop/settings'] = array(
      'title' => 'Universal Popup Settings',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('unipop_settings_form'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'unipop.admin.inc',
    );
  */
  return $items;
}


/***
 * @param $nid      nid of video node
 *
 * function: get the youtube id of a video from a video node id
 *
 */
function unipop_get_youtube_id($nid) {
  static $youtube_lookup;     // poor man's cache; lookup of youtube ids
                              //   key=our video node id, data=youtube id

  if (!isset($youtube_lookup)) {
    $youtube_lookup = array();
  }

  if (!isset($youtube_lookup[$nid])) {
    $node = node_load($nid);
    if (!$node) {
      watchdog('unipop', 'cannot open video node ' . $nid, WATCHDOG_ERROR);
      return(0);
    } else {
      $file = file_load($node->field_video_embedded['und'][0]['fid']);
      $uri = explode('/', $file->uri);
      $youtube_lookup[$nid] = $uri[3];
    }
  }

  $youtube_id = $youtube_lookup[$nid];

  return $youtube_id;
}


/***
 * function: Unipop callback to get the youtube id of a video from a video node id
 *
 * arg is the nid
 *
 * url is /unipop/video_id_from_node/VIDEO_ID
 */
function unipop_get_video_id_from_node() {
  $youtube_id = unipop_get_youtube_id(arg(2));

  print $youtube_id;
  drupal_exit();
}


/***
 * function: Unipop callback to return youtube inline preview from a video node id
 *
 * arg is the nid
 *
 * url is /unipop/video_preview_from_node/VIDEO_ID
 */
function unipop_get_video_preview_from_node() {
  $youtube_id = unipop_get_youtube_id(arg(2));

  $output = '<iframe width="480" height="360" src="http://www.youtube.com/embed/' . $youtube_id . '?hl=en&fs=1&showinfo=0" frameborder="0" allowfullscreen></iframe>';

  print $output;
  drupal_exit();
}


/***
 * @param $op       operation
 * @param $title    popup title
 * @param $type     page type
 *
 * set/load page load metrics for the page
 *
 * if $op us "set", the title and type info are added to the page list
 *
 * if $op is "load", the metrics javascript is generated for the page
 */
function unipop_set_metric_page_load($op, $title = NULL, $type = NULL) {
  // we need to store page title and type info for every popup
  static $metric_titles;
  static $metric_types;

  if (!isset($metric_titles)) {
    $metric_titles = array();
    $metric_types  = array();
  }

  switch ($op) {
    case 'set':
      // add metrics data
      $metric_titles[] = $title;
      $metric_types[]  = $type;
      break;
    case 'load':
      if (count($metric_titles) > 0) {
        // we have metrics data, create the page load javascript
        $i = 0;
        foreach ($metric_titles as $idx => $title) {
          $js  = 'var modaltitle = "' . addslashes($title) . '";' . "\n";
          $js .= 'var modaltype = "' . $metric_types[$idx] . '";' . "\n";

          $js .= <<<EOT
    s.linkTrackVars="eVar30, prop30, eVar40, prop40, eVar42, prop42, events";
    s.linkTrackEvents="event40";
    s.events='event40';
    s.prop30=s.pageName;
    s.eVar30=s.pageName;
    s.prop40=modaltype+':'+modaltitle;
    s.eVar40=modaltype+':'+modaltitle;
    s.prop42=modaltype;
    s.eVar42=modaltype;
    s.tl(true, 'o', 'Video Popup Page Load');
EOT;
        }
        drupal_add_js($js, 'inline');
      }
      break;
  }
}


/***
 * @param $page
 *
 * Implementation of hook_html_head_alter();
 *
 * outputs metrics javascript for popups
 */
function unipop_html_head_alter(&$head_elements) {
  //unipop_set_metric_page_load('load');
}

