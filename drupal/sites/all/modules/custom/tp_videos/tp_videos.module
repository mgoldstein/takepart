<?php
/**
 * @file
 * Video content.
 */

use \Participant\MetaData\Video\YoutubeVideo;
use \Participant\MetaData\Video\JWPlatformVideo;

/**
 * Implements hook_entity_view_alter().
 */
function tp_videos_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#view_mode'] == 'iframe') {
    unset($build['links']);
  }
}

/**
 * Implements hook_token_info().
 */
function tp_videos_token_info() {
  return array(
    'tokens' => array(
      'node' => array(
        'iframe-embed-markup' => array(
          'name' => 'iFrame Embed Markup',
          'description' => t('Markup to embed the node in an iframe on another site.'),
          'type' => 'format',
        ),
        'iframe-embed-src' => array(
          'name' => 'iFrame Embed Source',
          'description' => t('Source for a node embed iframe.'),
          'type' => 'format',
        ),
        'iframe-embed-width' => array(
          'name' => 'iFrame Embed Width',
          'description' => t('Width for a node embed iframe.'),
          'type' => 'format',
        ),
        'iframe-embed-height' => array(
          'name' => 'iFrame Embed Height',
          'description' => t('Height for a node embed iframe.'),
          'type' => 'format',
        ),
        'attached-video-file-secure-url' => array(
          'name' => 'Video file URL',
          'description' => t("The URL to the video file referenced in a node's video field."),
          'type' => 'format',
        ),
        'attached-video-width' => array(
          'name' => 'Video width',
          'description' => "The width of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-height' => array(
          'name' => 'Video height',
          'description' => "The height of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-url' => array(
          'name' => 'Video URL',
          'description' => "Full URL of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-secure-url' => array(
          'name' => 'Video URL',
          'description' => "Full secure URL of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-image' => array(
          'name' => 'Video URL',
          'description' => "Full URL of the thumbnail for the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-secure-image' => array(
          'name' => 'Video URL',
          'description' => "Full secure URL of the thumbnail for the video in the node's video field",
          'type' => 'node',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function tp_videos_tokens($type, $tokens, array $data = array(),
  array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'iframe-embed-markup':
          $replacements[$original] = tp_videos_iframe_embed_markup($node);
          break;
        case 'iframe-embed-src':
          $replacements[$original] = tp_videos_iframe_embed_source($node, TRUE);
          break;
        case 'iframe-embed-width':
          $replacements[$original] = variable_get('twitter_player_card_iframe_width', 640);
          break;
        case 'iframe-embed-height':
          $replacements[$original] = variable_get('twitter_player_card_iframe_height', 480);
          break;
        case 'attached-video-file-secure-url':
          $replacements[$original] = tp_videos_attached_video_file_url($node, TRUE);
          break;
        case 'attached-video-url':
          $replacements[$original] = tp_videos_attached_video_opengraph_url($node);
          break;
        case 'attached-video-secure-url':
          $replacements[$original] = tp_videos_attached_video_opengraph_url($node, TRUE);
          break;
        case 'attached-video-width':
          $replacements[$original] = tp_videos_attached_video_width($node);
          break;
        case 'attached-video-height':
          $replacements[$original] = tp_videos_attached_video_height($node);
          break;
        case 'attached-video-image':
          $replacements[$original] = tp_videos_attached_video_image($node);
          break;
        case 'attached-video-secure-image':
          $replacements[$original] = tp_videos_attached_video_image($node, TRUE);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Markup for embedding a node using an iframe.
 */
function tp_videos_iframe_embed_markup($node) {
  global $base_url;
  $properties = array(
	  'width' => '100%',
		'height' => '100%',
    'src' => $base_url . '/entity_iframe/node/' . $node->nid,
    'frameborder' => '0',
    'class' => 'entity_iframe entity_iframe_node',
    'id' => 'entity_iframe_node_' . $node->nid,
	  'style' => 'position: absolute; top: 0; left: 0;',
  );
//	$width = variable_get('entity_iframe_width', ENTITY_IFRAME_WIDTH);
//  $height = variable_get('entity_iframe_height', ENTITY_IFRAME_HEIGHT);
//	$ratio = $height/$width*100;
	$ratio = 60;
  return '<div class="embed-container" style="position: relative; height: 0; padding-bottom:'. $ratio. '%">'. _entity_iframe_build_iframe($properties, 'video-embed'). '</div>';
}

/**
 * Source URL for embedding a node using an iframe.
 */
function tp_videos_iframe_embed_source($node, $https = FALSE) {
  global $base_url;
  $src_url = $base_url . '/entity_iframe/node/' . $node->nid;
  list(, $resource) = explode('://', $src_url, 2);
  $scheme = $https ? 'https://' : 'http://';
  return $scheme . $resource;
}

/**
 * Get the file referenced in a file field on a node.
 */
function tp_videos_attached_file($node, $field_name) {
  $file = field_get_items('node', $node, $field_name);
  if ($file !== FALSE && count($file) > 0) {
    $data = reset($file);
    return file_load($data['fid']);
  }
  return FALSE;
}

/**
 * Parse a media stream wapper URI
 */
function tp_videos_parse_wrapper_uri($uri) {
  $path = explode('://', $uri);
  $parts = explode('/', $path[1]);
  $params = array();
  $count = 0;
  $total = count($parts);
  if (!$total || ($total % 2)) {
    // If we have no parts, or an odd number of parts, it's malformed.
    return FALSE;
  }
  while ($count < $total) {
    // We iterate count for each step of the assignment to keep us honest.
    $params[$parts[$count++]] = $parts[$count++];
  }
  return $params;
}

function tp_videos_attached_video_object($node) {
  if ($file = tp_videos_attached_file($node, 'field_video')) {
    if ($params = tp_videos_parse_wrapper_uri($file->uri)) {
      if ($file->filemime == 'video/youtube') {
        return new YoutubeVideo($params['v'], 640);
      }
      elseif ($file->filemime == 'video/jwplatform') {
        if (substr($file->uri, 0, 16) === 'jwplatform-video') {
          $api = pm_jwplatform_get_api();
          return new JWPlatformVideo($api, $params['key'], 640);
        }
      }
    }
  }
  return NULL;
}

function tp_videos_attached_video_file_url($node, $https = FALSE) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->url($https);
}

function tp_videos_attached_video_opengraph_url($node, $https = FALSE) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->openGraphURL($https);
}

function tp_videos_attached_video_image($node, $https = FALSE) {
  $file = tp_videos_attached_file($node, 'field_thumbnail');
  if ($file !== FALSE) {
    $image_url = file_create_url($file->uri);
    $absolute_url = url($image_url, array('absolute' => TRUE));
    list(, $resource) = explode('://', $absolute_url, 2);
    $scheme = $https ? 'https://' : 'http://';
    return $scheme . $resource;
  }
  return NULL;
}

function tp_videos_attached_video_width($node) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->width();
}

function tp_videos_attached_video_height($node) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->height();
}
