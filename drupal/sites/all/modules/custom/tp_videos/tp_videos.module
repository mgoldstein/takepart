<?php
/**
 * @file
 * Video content.
 */

use \Participant\MetaData\Video\YoutubeVideo;
use \Participant\MetaData\Video\JWPlatformVideo;

/**
 * Include the playlist filter functions.
 */
require_once __DIR__ . '/classes/tp_videos_playlist.class.inc';

/**
 * Implements hook_entity_insert().
 */
function tp_videos_entity_insert($entity, $entity_type) {
  tp_videos_entity_update($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function tp_videos_entity_update($entity, $entity_type) {

  // Only concerned with (media) files.
  if ($entity_type !== 'file') { return; }

  // Create the appropriate importer.
  $importer = NULL;
  if ($entity->filemime === 'video/youtube') {
    $importer = new TakePart_YoutubeImporter();
    $params = tp_videos_parse_wrapper_uri($entity->uri);
    $url = "TakePart_YoutubeVideo:{$params['v']}";
  }
  elseif ($entity->filemime === 'video/vimeo') {
    $importer = new TakePart_VimeoImporter();
    $params = tp_videos_parse_wrapper_uri($entity->uri);
    $url = "TakePart_VimeoVideo:{$params['v']}";
  }
  elseif ($entity->filemime === 'video/jwplatform') {
    $importer = new TakePart_JWPlatformImporter();
    $params = tp_videos_parse_wrapper_uri($entity->uri);
    $url = "TakePart_JWPlatformVideo:{$params['key']}";
  }

  if (!empty($importer)) {

    $imported_video = $importer->import($url, TRUE);

    $video_controller = new TakePart_VideoController();
    $existing_video = $video_controller->loadByExternalKey($imported_video->type,
      $imported_video->external_key);

    if (is_null($existing_video)) {
      $video_controller->save($imported_video);
    }
    else {
      // Refresh the existing video data.
      $values = $imported_video->values();
      unset($values['created_at']);
      unset($values['updated_at']);
      unset($values['allowed_regions']);
      foreach ($values as $name => $value) {
        $existing_video->{$name} = $value;
      }
      $video_controller->save($existing_video);
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function tp_videos_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#view_mode'] == 'iframe') {
    unset($build['links']);
  }
}

/**
 * Implements hook_token_info().
 */
function tp_videos_token_info() {
  return array(
    'tokens' => array(
      'node' => array(
        'iframe-embed-markup' => array(
          'name' => 'iFrame Embed Markup',
          'description' => t('Markup to embed the node in an iframe on another site.'),
          'type' => 'format',
        ),
        'iframe-embed-src' => array(
          'name' => 'iFrame Embed Source',
          'description' => t('Source for a node embed iframe.'),
          'type' => 'format',
        ),
        'iframe-embed-width' => array(
          'name' => 'iFrame Embed Width',
          'description' => t('Width for a node embed iframe.'),
          'type' => 'format',
        ),
        'iframe-embed-height' => array(
          'name' => 'iFrame Embed Height',
          'description' => t('Height for a node embed iframe.'),
          'type' => 'format',
        ),
        'attached-video-file-secure-url' => array(
          'name' => 'Video file URL',
          'description' => t("The URL to the video file referenced in a node's video field."),
          'type' => 'format',
        ),
        'attached-video-width' => array(
          'name' => 'Video width',
          'description' => "The width of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-height' => array(
          'name' => 'Video height',
          'description' => "The height of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-url' => array(
          'name' => 'Video URL',
          'description' => "Full URL of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-secure-url' => array(
          'name' => 'Video URL',
          'description' => "Full secure URL of the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-image' => array(
          'name' => 'Video URL',
          'description' => "Full URL of the thumbnail for the video in the node's video field",
          'type' => 'node',
        ),
        'attached-video-secure-image' => array(
          'name' => 'Video URL',
          'description' => "Full secure URL of the thumbnail for the video in the node's video field",
          'type' => 'node',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function tp_videos_tokens($type, $tokens, array $data = array(),
  array $options = array()) {
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'iframe-embed-markup':
          $replacements[$original] = tp_videos_iframe_embed_markup($node);
          break;
        case 'iframe-embed-src':
          $replacements[$original] = tp_videos_iframe_embed_source($node, TRUE);
          break;
        case 'iframe-embed-width':
          $replacements[$original] = variable_get('twitter_player_card_iframe_width', 640);
          break;
        case 'iframe-embed-height':
          $replacements[$original] = variable_get('twitter_player_card_iframe_height', 480);
          break;
        case 'attached-video-file-secure-url':
          $replacements[$original] = tp_videos_attached_video_file_url($node, TRUE);
          break;
        case 'attached-video-url':
          $replacements[$original] = tp_videos_attached_video_opengraph_url($node);
          break;
        case 'attached-video-secure-url':
          $replacements[$original] = tp_videos_attached_video_opengraph_url($node, TRUE);
          break;
        case 'attached-video-width':
          $replacements[$original] = tp_videos_attached_video_width($node);
          break;
        case 'attached-video-height':
          $replacements[$original] = tp_videos_attached_video_height($node);
          break;
        case 'attached-video-image':
          $replacements[$original] = tp_videos_attached_video_image($node);
          break;
        case 'attached-video-secure-image':
          $replacements[$original] = tp_videos_attached_video_image($node, TRUE);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Markup for embedding a node using an iframe.
 */
function tp_videos_iframe_embed_markup($node) {
  global $base_url;
  $properties = array(
	  'width' => '100%',
		'height' => '100%',
    'src' => $base_url . '/entity_iframe/node/' . $node->nid,
    'frameborder' => '0',
    'class' => 'entity_iframe entity_iframe_node',
    'id' => 'entity_iframe_node_' . $node->nid,
	  'style' => 'position: absolute; top: 0; left: 0;',
  );
	if($playlist = field_get_items('node', $node, 'field_playlist_position')){
		if($playlist[0]['value'] == 'bottom'){
			$ratio = 95;
		}elseif($playlist[0]['value'] == 'right'){
			$ratio = 60; //change this
		}else{
			$ratio = 60;
		}
	}
  return '<div class="embed-container" style="position: relative; height: 0; padding-bottom:'. $ratio. '%">'. _entity_iframe_build_iframe($properties, 'video-embed'). '</div>';
}

/**
 * Source URL for embedding a node using an iframe.
 */
function tp_videos_iframe_embed_source($node, $https = FALSE) {
  global $base_url;
  $src_url = $base_url . '/entity_iframe/node/' . $node->nid;
  list(, $resource) = explode('://', $src_url, 2);
  $scheme = $https ? 'https://' : 'http://';
  return $scheme . $resource;
}

/**
 * Get the file referenced in a file field on a node.
 */
function tp_videos_attached_file($node, $field_name) {
  $file = field_get_items('node', $node, $field_name);
  if ($file !== FALSE && count($file) > 0) {
    $data = reset($file);
    return file_load($data['fid']);
  }
  return FALSE;
}

/**
 * Parse a media stream wapper URI
 */
function tp_videos_parse_wrapper_uri($uri) {
  $path = explode('://', $uri);
  $parts = explode('/', $path[1]);
  $params = array();
  $count = 0;
  $total = count($parts);
  if (!$total || ($total % 2)) {
    // If we have no parts, or an odd number of parts, it's malformed.
    return FALSE;
  }
  while ($count < $total) {
    // We iterate count for each step of the assignment to keep us honest.
    $params[$parts[$count++]] = $parts[$count++];
  }
  return $params;
}

function tp_video_play_inline_share($node) {
  $items = field_get_items('node', $node, 'field_sharing_inline');
  if ($items !== FALSE && count($items) > 0) {
    $first = reset($items);
    return strtolower(trim($first['value'])) == 1 ? TRUE : FALSE;
  }
  return FALSE;
}

function tp_video_allowed_regions($node) {
  $regions = array();
  $items = field_get_items('node', $node, 'field_allowed_regions');
  if ($items !== FALSE && count($items) > 0) {
    $data = reset($items);
    $list = trim($data['value']);
    if (!empty($list)) { $regions[] = $list; }
  }
  return $regions;
}

function tp_videos_attached_video_object($node) {

  // Make sure the video node has play inline sharing enabled
  if (!tp_video_play_inline_share($node)) {
    return NULL;
  }

  // Region limited video should not play inline when sharing
  $regions = tp_video_allowed_regions($node);
  if (!empty($regions)) {
    return NULL;
  }

  if ($file = tp_videos_attached_file($node, 'field_video')) {
    if ($params = tp_videos_parse_wrapper_uri($file->uri)) {
      // Youtube Videos
      if ($file->filemime == 'video/youtube') {
        return new YoutubeVideo($params['v'], 640);
      }
      // JWPlatform Videos (no playlists)
      elseif ($file->filemime == 'video/jwplatform'
        && substr($file->uri, 0, 16) === 'jwplatform-video') {
        $api = pm_jwplatform_get_api();
        return new JWPlatformVideo($api, $params['key'], 640);
      }
    }
  }
  return NULL;
}

function tp_videos_attached_video_file_url($node, $https = FALSE) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->url($https);
}

function tp_videos_attached_video_opengraph_url($node, $https = FALSE) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->openGraphURL($https);
}

function tp_videos_attached_video_image($node, $https = FALSE) {
  $file = tp_videos_attached_file($node, 'field_thumbnail');
  if ($file !== FALSE) {
    $image_url = file_create_url($file->uri);
    $absolute_url = url($image_url, array('absolute' => TRUE));
    list(, $resource) = explode('://', $absolute_url, 2);
    $scheme = $https ? 'https://' : 'http://';
    return $scheme . $resource;
  }
  return NULL;
}

function tp_videos_attached_video_width($node) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->width();
}

function tp_videos_attached_video_height($node) {
  $video = tp_videos_attached_video_object($node);
  return is_null($video) ? NULL : $video->height();
}


/**
 * Implements hook_entity_info_alter().
 */
function tp_videos_entity_info_alter(&$entity_info) {
	$entity_info['node']['view modes']['video_playlist_teaser'] = array(
		'label' => t('Video Playlist Teaser'),
		'custom settings' => TRUE,
	);
}

/**
 * Implements hook_preprocess_node().
 */
function tp_videos_preprocess_node(&$variables) {
	if($variables['type'] == 'video_playlist'){

		/* Use the selected view mode for playlists on the node view*/
		$view_mode = field_get_items('node', $variables['node'], 'field_playlist_view_mode');
		$view_mode = ($view_mode[0]['value'] != null ? $view_mode[0]['value'] : 'basic');
		$video_list = field_view_field('node', $variables['node'], 'field_video_list', array(
			'type' => 'video_playlist',
			'label' => 'hidden',
			'settings' => array(
				'playlist_view_mode' => $view_mode
			)
		));
		$variables['content']['field_video_list'] = $video_list;
	}

	if($variables['view_mode'] == 'video_playlist_teaser' && $variables['type'] == 'video') {

		$variables['theme_hook_suggestions'][] = 'node__' . $variables['type'] . '__video_playlist_teaser';
		$thumbnail = field_get_items('node', $variables['node'], 'field_thumbnail');
		$thumbnail = $thumbnail[0]['file']->uri;
		$thumbnail = image_style_url('video_navigation_thumb_155x87', $thumbnail);
		$promo_headline = field_get_items('node', $variables['node'], 'field_promo_headline');
		$promo_headline = $promo_headline[0]['value'];

		$variables['thumbnail'] = $thumbnail;
		$variables['promo_headline'] = $promo_headline;
		$variables['promo_headline'] = $promo_headline;

	}
}

/**
 * Implements hook_field_formatter_info()
 */
function tp_videos_field_formatter_info(){
	return array(
		'video_playlist' => array(
			'label' => t('Video Playlist'),
			'field types' => array('node_reference'),
			'settings'  => array(
				'playlist_view_mode' => 'Basic',
			),
		),
	);
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tp_videos_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$element = array();
	$element['playlist_view_mode'] = array(
		'#type'           => 'select',
		'#title'          => t('Playlist View Mode'),
		'#description'    => t('Select which view mode you would like to use'),
		'#default_value'  => $settings['playlist_view_mode'],
		'#options'        => array(
			'basic'  => 'Basic',
			'detailed' => 'Detailed',
			'hidelist'  => 'HideList',
		),
	);
	return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tp_videos_field_formatter_settings_summary($field, $instance, $view_mode) {
	$display = $instance['display'][$view_mode];
	$settings = $display['settings'];
	$summary = t('Using a view mode of @view_mode ', array(
		'@view_mode'     => $settings['playlist_view_mode'],
	));
	return $summary;
}

/**
 *  Implements hook_field_formatter_prepare_view().
 */
function tp_videos_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  //checks to ensure the field

  if ($field['field_name'] == 'field_video_list' && $field['type'] == 'node_reference') {

		$display = current($displays);
	  $display['settings']['playlist_view_mode'] = 'basic';

    //ensures there is at least the nid
    foreach ($items as $key => $value) {
      //only create if filter is set
      $filter = (isset($entities[$key]->field_playlist_filter) && isset($entities[$key]->field_playlist_filter['und'][0])) ? TRUE : FALSE;
      //if empty create a video to hide
      if (empty($value) && $filter) {
        $items[$key][0] = array(
          'nid' => $key,
          'access' => FALSE,
          'hide' => TRUE
        );
        
      }
    }
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function tp_videos_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
	$playlist = array();
  $files = array();
	$settings = $display['settings'];
	$view_mode = $settings['playlist_view_mode'];

  // Override the items list if necessary.
  _tp_videos_playlist_filter_list_parser($items, $entity);

	// Load the video nodes for the playlist
	$videos = node_load_multiple($items);

  // Processes the video to match sort order from query
  $videos_processed = array();
  foreach ($items as $key => $values) {
    $videos_processed[] = $videos[$values['nid']];
  }
  $videos = $videos_processed;

  //return empty array if no videos exist
  if (empty($videos)) {
    return array();
  }

  // Build the playlist
  switch ($view_mode) {
    case 'basic':
      $video_displays = array();
      foreach($videos as $video){
        $video_displays[] = node_view($video, 'video_playlist_teaser', $langcode = NULL);

        // Add the allowed regions to each file referenced by the video node.
        $items = field_get_items('node', $video, 'field_video');
        $allowed_regions = tp_video_player_video_allowed_regions('node', $video);
        foreach ($items as $item) {
          $files[] = $item + array('allowed_regions' => $allowed_regions);
        }

      }
      $playlist = array(
        '#theme' => 'tp_videos_basic',
        '#navigation' => array(
          '#theme' => 'tp_videos_navigation',
          '#video_displays' => $video_displays,
        ),
      );
      break;

    case 'detailed':
      $video_displays = array();
      foreach($videos as $video){
        $video_displays[] = node_view($video, 'video_playlist_teaser', $langcode = NULL);

        $items = field_get_items('node', $video, 'field_video');
        $allowed_regions = tp_video_player_video_allowed_regions('node', $video);
        foreach ($items as $item) {
          $files[] = $item + array('allowed_regions' => $allowed_regions);
        }

      }
      $playlist = array(
        '#theme' => 'tp_videos_detailed',
        '#navigation' => array(
          '#theme' => 'tp_videos_navigation',
          '#video_displays' => $video_displays,
        ),
      );
      break;

    case 'hidelist':
	    foreach($videos as $video){
		    $items = field_get_items('node', $video, 'field_video');
		    $allowed_regions = tp_video_player_video_allowed_regions('node', $video);
		    foreach ($items as $item) {
			    $files[] = $item + array('allowed_regions' => $allowed_regions);
		    }

	    }
      $playlist = array(
        '#theme' => 'tp_videos_hidelist',

      );
      break;
  }

  // Get the effective configuration for the playlist (global default + entity override)
  $playlist_configuration = tp_video_player_video_override_configuration(
    $entity_type, $entity, $langcode, 'full_page');

  $playlist_player = tp_video_player_player_view($playlist_configuration, $files);

  $element = array(
    '#theme' => 'tp_videos_wrapper',
    '#title' => $entity->title,
    '#playlist' => $playlist + array(
      '#playlist_player' => $playlist_player,
      '#videos' => $videos,
    ),
  );

  // All items are included in the playlist element.
  return array($element);
}

/**
 * Implements hook_theme()
 */
function tp_videos_theme(){
	return array(
		'tp_videos_wrapper' => array(
			'access' => array(),
			'template' => 'templates/playlist-wrapper',
			'variables' => array(
				'title' => '',
        'playlist' => NULL,
			),
		),
		'tp_videos_navigation' => array(
			'access' => array(),
			'template' => 'templates/playlist-navigation',
			'variables' => array(
				'video_displays' => array(),
			),
		),
		'tp_videos_basic' => array(
			'access' => array(),
			'template' => 'templates/playlist-basic',
			'variables' => array(
				'videos' => array(),
				'video_displays' => array(),
				'navigation' => '',
        'playlist_player' => NULL,
			),
		),
		'tp_videos_detailed' => array(
			'access' => array(),
			'template' => 'templates/playlist-detailed',
			'variables' => array(
				'videos' => array(),
				'video_displays' => array(),
				'navigation' => '',
        'playlist_player' => NULL,
			),
		),
		'tp_videos_hidelist' => array(
			'access' => array(),
			'template' => 'templates/playlist-hidelist',
			'variables' => array(
				'videos' => array(),
        'playlist_player' => NULL,
			),
		),
	);
}

/**
 *  Implements hook_form_alter().
 */
function tp_videos_form_alter(&$form, &$form_state, $form_id) {
  //switch based on form id
  switch ($form_id) {
    //adds state and validate function for video playlists content type
    case 'video_playlist_node_form':
      $form['field_playlist_items_count']['#states'] = array(
        'required' => array(
          ':input[name=field_playlist_filter\[und\]]' => array('filled' => TRUE)
        )
      );

      //adds a new validate function
      $form['#validate'][] = '_tp_videos_playlist_form_validate';
      break;
  }
}

/**
 *  @function:
 *    Custom Validate function for field
 */
function _tp_videos_playlist_form_validate(&$form, &$form_state) {
  $item_count = $form_state['values']['field_playlist_items_count']['und'][0]['value'];
  $filter = $form_state['values']['field_playlist_filter']['und'][0]['target_id'];

  //set error message and stop form
  if (!empty($filter) && empty($item_count)) {
    form_set_error('field_playlist_items_count', 'Playlist Items Count needs to be filled out');
  }
}

/**
 *  @function:
 *    This function is used to parse the list to create an automated playlist
 */
function _tp_videos_playlist_filter_list_parser(&$items, $entity) {
  if (is_object($entity)) {
    //variables from the entity video
    $filter = field_get_items('node', $entity, 'field_playlist_filter');
    $video_list_max = field_get_items('node', $entity, 'field_playlist_items_count');
    $video_list_sort = field_get_items('node', $entity, 'field_playlist_filter_sorting');

    //checks if the filter and video playlist max is set
    if (!empty($video_list_max)) {
      $video_list_max_processed = field_view_value('node', $entity, 'field_playlist_items_count', $video_list_max[0]);
      $video_list_auto_sort = field_view_value('node', $entity, 'field_playlist_filter_sorting', $video_list_sort[0]);
      $video_list = new tp_playlist_filter((int)$video_list_max_processed['#markup'], $video_list_auto_sort['#markup']);

      if (!empty($filter)) {
        if (isset($filter[0]['target_id'])) {
          $tax_obj = taxonomy_term_load($filter[0]['target_id']);
          $vid = $tax_obj->vid;
          $vocab = taxonomy_vocabulary_load($vid);

          //adds filter into the obj
          $video_list->add_filter(
            array(
              'target_id' => $filter[0]['target_id'],
              'vocab' => $vocab
            )
          );
        }
      }

      //adds the items into the obj
      foreach ($items as $key => $value) {
        if (!$value['hide']) {
          $video_list->add_video_nid($value['nid']);
        }
      }

      //returns the new items list
      $items = $video_list->get_results();
    }
  }
}
