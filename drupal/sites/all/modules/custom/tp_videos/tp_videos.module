<?php
/**
 * @file
 * Video content.
 */

module_load_include('inc', 'tp_videos', 'tp_videos.tokens');
module_load_include('inc', 'tp_videos', 'tp_videos.metadata');
module_load_include('inc', 'tp_videos', 'tp_videos.player_config');
module_load_include('inc', 'tp_videos', 'tp_videos.topic_promoted');

/**
 * Implements hook_menu().
 */
function tp_videos_menu() {
  $items = array();
  $items['admin/config/media/topic_video'] = array(
    'title' => 'Topic Promoted Videos',
    'description' => 'Promote one or more videos on nodes of a certain topic, or site-wide',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_videos_topic_promoted_admin_form'),
    'access arguments' => array('access administration pages')
  );

  return $items;
}

/**
 * Implements hook_entity_insert().
 */
function tp_videos_entity_insert($entity, $entity_type) {
  tp_videos_entity_update($entity, $entity_type);
}

/**
 * Implements hook_entity_update().
 */
function tp_videos_entity_update($entity, $entity_type) {

  // Only concerned with (media) files.
  if ($entity_type !== 'file') { return; }

  // Create or update the appropriate metadata.
  $metadata = NULL;
  if ($entity->filemime === 'video/youtube') {
    $metadata = tp_videos_fetch_youtube_metadata($entity);
  }
  elseif ($entity->filemime === 'video/vimeo') {
    $metadata = tp_videos_fetch_vimeo_metadata($entity);
  }
  elseif ($entity->filemime === 'video/jwplatform') {
    $metadata = tp_videos_fetch_jwplatform_metadata($entity);
  }

  if (!is_null($metadata)) {
    tp_videos_save_metadata($metadata);
  }
}

/**
 * Implements hook_entity_delete().
 */
function tp_videos_entity_delete($entity, $entity_type) {
  if ($entity_type === 'file') {
    tp_videos_delete_metadata($entity->fid);
  }
}

/**
 * Implements hook_entity_load().
 */
function tp_videos_entity_load($entities, $entity_type) {
  if ($entity_type === 'file') {
    $fids = array_keys($entities);
    $metadatas = tp_videos_load_multiple_metadata($fids);
    foreach ($metadatas as $fid => $metadata) {
      $entities[$fid]->tp_videos_metadata = $metadata;
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function tp_videos_entity_view_alter(&$build, $type) {
  if ($type == 'node' && $build['#view_mode'] == 'iframe') {
    unset($build['links']);
  }
}

/**
 * Implements hook_entity_info_alter().
 */
function tp_videos_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['video_playlist_teaser'] = array(
    'label' => t('Video Playlist Teaser'),
    'custom settings' => TRUE,
  );
}

/**
 * Implements hook_preprocess_node().
 */
function tp_videos_preprocess_node(&$variables) {

  if ($variables['type'] == 'video_playlist') {
    // Use the selected view mode for playlists on the node view.
    $view_mode = 'basic';
    $items = field_get_items('node', $variables['node'], 'field_playlist_view_mode');
    if ($items !== FALSE && count($items) > 0) {
      $item = reset($items);
      if (!empty($item['value'])) {
        $view_mode = $item['value'];
      }
    }

    $video_list = field_view_field('node', $variables['node'], 'field_video_list', array(
      'type' => 'video_playlist',
      'label' => 'hidden',
      'settings' => array(
        'playlist_view_mode' => $view_mode
      )
    ));

    //addressing only featured secondary. the field in the display is not visible as the conditional creates the playlist into the content.
    $show = ($variables['view_mode'] == 'feature_secondary') ? FALSE : TRUE;

    if ($show) {
      //@dev: noting that the original code is injecting the playlist into the content so it does not depend on the display
      $variables['content']['field_video_list'] = $video_list;
    }
  }

  if ($variables['view_mode'] == 'video_playlist_teaser' && $variables['type'] == 'video') {

    $variables['theme_hook_suggestions'][] = 'node__' . $variables['type'] . '__video_playlist_teaser';

    $variables['thumbnail'] = '/' . drupal_get_path('theme', 'tp4') . '/images/ph_black.png';
    $items = field_get_items('node', $variables['node'], 'field_thumbnail');

    if ($items !== FALSE && count($items) > 0) {
      $item = reset($items);
      if (!empty($item['file']->uri)) {
        $thumbnail = image_style_url('video_navigation_thumb_155x87', $item['file']->uri);
        if (!empty($thumbnail)) {
          $variables['thumbnail'] = $thumbnail;
        }
      }
    }

    $variables['promo_headline'] = '';
    $items = field_get_items('node', $variables['node'], 'field_promo_headline');
    if ($items !== FALSE && count($items) > 0) {
      $item = reset($items);
      $variables['promo_headline'] = $item['value'];
    }
  }
}

/**
 * Implements hook_field_formatter_info()
 */
function tp_videos_field_formatter_info(){
  return array(
    'video_playlist' => array(
      'label' => t('Video Playlist'),
      'field types' => array('node_reference'),
      'settings'  => array(
        'playlist_view_mode' => 'Basic',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tp_videos_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();
  $element['playlist_view_mode'] = array(
    '#type'           => 'select',
    '#title'          => t('Playlist View Mode'),
    '#description'    => t('Select which view mode you would like to use'),
    '#default_value'  => $settings['playlist_view_mode'],
    '#options'        => array(
      'basic'  => 'Basic',
      'detailed' => 'Detailed',
      'hidelist'  => 'HideList',
    ),
  );
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tp_videos_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Using a view mode of @view_mode ', array(
    '@view_mode'     => $settings['playlist_view_mode'],
  ));
  return $summary;
}

/**
 *  Implements hook_field_formatter_prepare_view().
 */
function tp_videos_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  //ensures that we only parse one of the fields
  if ($field['field_name'] == 'field_video_list' && $field['type'] == 'node_reference') {
    //does for each of the entities
    foreach ($entities as $id => $entity) {
      //values
      $filter = FALSE;
      $filter_items = field_get_items($entity_type, $entity, 'field_playlist_filter');
      //conditional checks
      if ($filter_items !== FALSE && count($filter_items) > 0) {
        $filter_item = reset($filter_items);
        $filter = (!empty($filter_item['target_id'])) ? TRUE : FALSE;
      }

      //adds an empty item to the list
      if (empty($items[$id]) && $filter) {
        $items[$id][0] = array(
          'nid' => $id,
          'access' => FALSE,
          'hide' => TRUE,
        );
      }
    }
  }
}

function tp_videos_build_playlist($playlist_configuration, $videos, $view_mode, $langcode) {
  $files = array();
  $displays = array();
  $videos_used = array();

  foreach ($videos as $node) {

    // Unpubished nodes must be skipped when rendering the page for anonymous
    // users.
    if (!$node->status && !user_is_logged_in()) {
      continue;
    }

    // The node must have a video player configuration.
    $video_configuration = tp_video_player_load_entity_configuration(
      'node', $node->nid, 'video_full_page');
    if (is_null($video_configuration)) {
      $video_configuration = tp_video_player_clone_default_configuration(
        'video_full_page');
    }

    // The configuration can contain tokens, resolve them now.
    $video_configuration = tp_video_player_resolve_entity_configuration(
      'node', $node, $langcode, $video_configuration);

    // The path to the video node is stored in the MEDIAID to allow
    // the social share to change with each video.
    $uri = entity_uri('node', $node);
    $media_id = url($uri['path'], $uri['options']);

    // The node must actually reference a video.
    $items = field_get_items('node', $node, 'field_video');
    if ($items !== FALSE && count($items) > 0) {

      // Use only the first referenced file as there will
      // only be one navigation element per node.
      $file = reset($items);

      // JWPlayer channels are not allowed in playlists.
      $scheme = file_uri_scheme($file['uri']);
      if ($scheme === 'jwplatform-channel') { continue; }

      // Add the video to the list of video that were actually used.
      $node->video_duration = (!empty($items[0]['tp_videos_metadata']->length)) ? ltrim(gmdate("i:s", $items[0]['tp_videos_metadata']->length), '0') : '--:--';
      $videos_used[] = $node;

      // Add the video to the navigation strip (if there is one).
      if ($view_mode !== 'hidelist') {
        $node_view = node_view($node, 'video_playlist_teaser', $langcode);

        //adds video duration at the end
        $node_view['#suffix'] = theme('html_tag', array(
          'element' => array(
            '#tag' => 'span',
            '#value' => $node->video_duration,
            '#attributes' => array(
              'class' => 'video-duration',
        ))));

				$node_view['#suffix'] .= _tp4_support_sponsor_flag($node);

        $node_view['field_promo_headline'][0]['#markup'] = $node_view['field_promo_headline'][0]['#markup'] . ' ';

        $displays[] = $node_view;
      }

      // Get the allowed regions for all files association with the node.
      $allowed_regions = tp_video_player_video_allowed_regions('node', $node);

      $files[] = $file + array(
        'allowed_regions' => $allowed_regions,
        'media_id' => $media_id,
        'node_title' => $node->title,
        'pre_roll_ad_tag' => $video_configuration->ad_tag,
      );
    }
  }

  // Build the video player content.
  $player = array();
  if (count($files) > 0) {
    $player = tp_video_player_player_view($playlist_configuration, $files, 'playlist_display');
  }

  $content = array(
    '#theme' => "tp_videos_{$view_mode}",
    '#videos' => $videos_used,
    '#playlist_player' => $player,
  );

  // Add the navigation strip if it is not hidden.
  if ($view_mode !== 'hidelist') {
    $content['#navigation'] = array(
      '#theme' => 'tp_videos_navigation',
      '#video_displays' => $displays,
    );
  }

  return $content;
}

function tp_videos_playlist_view_mode($entity_type, $entity, $default) {
  $view_mode = $default;
  $items = field_get_items($entity_type, $entity, 'field_playlist_view_mode');
  if ($items !== FALSE && count($items) > 0) {
    $item = reset($items);
    $view_mode = $item['value'];
  }
  return $view_mode;
}

function tp_videos_playlist_title($entity_type, $entity, $default) {
  $title = '';
  $items = field_get_items($entity_type, $entity, 'field_show_title');
  if ($items !== FALSE && count($items) > 0) {
    $item = reset($items);
    if ($item['value'] == 1) {
      $title = $default;
    }
  }
  return $title;
}

function tp_videos_playlist_ordered_videos($entity, $items) {
  // Override the items list if necessary.
  _tp_videos_playlist_filter_list_parser($items, $entity);
  // Load the video nodes for the playlist.
  $videos = node_load_multiple($items);
  // Processes the video to match sort order from query
  $ordered = array();
  foreach ($items as $key => $value) {
    $ordered[] = $videos[$value['nid']];
  }
  return $ordered;
}

/**
 * Implements hook_field_formatter_view().
 */
function tp_videos_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $settings = $display['settings'];

  $view_mode = tp_videos_playlist_view_mode($entity_type, $entity,
    strtolower($settings['playlist_view_mode']));

  $title = tp_videos_playlist_title($entity_type, $entity,
    entity_label($entity_type, $entity));

  $videos = tp_videos_playlist_ordered_videos($entity, $items);

  // Return no content if there are no videos.
  if (empty($videos)) {
    return array();
  }

  // Load the playlist's player configuration
  $player_configuration = tp_video_player_load_entity_configuration($entity_type,
    entity_id($entity_type, $entity), 'playlist_full_page');
  if (is_null($player_configuration)) {
    $player_configuration = tp_video_player_clone_default_configuration(
      'playlist_full_page');
  }

  // The configuration can contain tokens, resolve them now.
  $player_configuration = tp_video_player_resolve_entity_configuration(
    $entity_type, $entity, $langcode, $player_configuration);

  // Build the playlist content.
  $playlist = tp_videos_build_playlist($player_configuration, $videos, $view_mode, $langcode);

  $element = array(
    '#theme' => 'tp_videos_wrapper',
    '#title' => $title,
    '#playlist' => $playlist,
  );

  // All items are included in the playlist element.
  return array($element);
}

/**
 * Implements hook_theme()
 */
function tp_videos_theme(){
  return array(
    'tp_videos_wrapper' => array(
      'access' => array(),
      'template' => 'templates/playlist-wrapper',
      'variables' => array(
        'title' => '',
        'playlist' => NULL,
      ),
    ),
    'tp_videos_navigation' => array(
      'access' => array(),
      'template' => 'templates/playlist-navigation',
      'variables' => array(
        'video_displays' => array(),
      ),
    ),
    'tp_videos_basic' => array(
      'access' => array(),
      'template' => 'templates/playlist-basic',
      'variables' => array(
        'videos' => array(),
        'video_displays' => array(),
        'navigation' => '',
        'playlist_player' => NULL,
      ),
    ),
    'tp_videos_detailed' => array(
      'access' => array(),
      'template' => 'templates/playlist-detailed',
      'variables' => array(
        'videos' => array(),
        'video_displays' => array(),
        'navigation' => '',
        'playlist_player' => NULL,
      ),
    ),
    'tp_videos_hidelist' => array(
      'access' => array(),
      'template' => 'templates/playlist-hidelist',
      'variables' => array(
        'videos' => array(),
        'playlist_player' => NULL,
      ),
    ),
  );
}

/**
 *  Implements hook_form_FORM_ID_form_alter().
 */
function tp_videos_form_video_node_form_alter(&$form, &$form_state, $form_id) {
  //adds an additional submit handler to video node form
  $form['#submit'][] = '_tp_videos_video_form_submit';
}

/**
 *  @function:
 *    This function is an additional submit handler for the video node form.
 *    This is currently being used to unset the field sharing inline if a youtube video is ref.
 */
function _tp_videos_video_form_submit(&$form, &$form_state) {
  //default variables
  $lang = $form_state['values']['language'];

  //only continue if a video exist
  if (isset($form_state['values']['field_video'][$lang][0])) {
    //loads the video
    $file_id = $form_state['values']['field_video'][$lang][0]['fid'];
    $file = file_load($file_id);

    //checks to see if the file is from youtube if so uncheck the value
    if ($file->filemime == 'video/youtube') {
      //only change the value if field sharing is checked
      if ($form_state['values']['field_sharing_inline'][$lang][0]['value'] == 1) {
        //uncheck the field and send a message to user
        $form_state['values']['field_sharing_inline'][$lang][0]['value'] = 0;
        drupal_set_message('YouTube video is being used. Field Sharing Inline has been unchecked.');
      }
    }
  }
}

/**
 *  Implements hook_form_FORM_ID_alter().
 */
function tp_videos_form_video_playlist_node_form_alter(&$form, &$form_state, $form_id) {

  // Add state and validate function for video playlists content type.
  $form['field_playlist_items_count']['#states'] = array(
    'required' => array(
      ':input[name=field_playlist_filter\[und\]]' => array('filled' => TRUE)
    )
  );
  $form['#validate'][] = '_tp_videos_playlist_form_validate';
}

/**
 *  @function:
 *    Custom Validate function for field
 */
function _tp_videos_playlist_form_validate(&$form, &$form_state) {
  $item_count = $form_state['values']['field_playlist_items_count']['und'][0]['value'];
  $filter = $form_state['values']['field_playlist_filter']['und'][0]['target_id'];

  //set error message and stop form
  if (!empty($filter) && empty($item_count)) {
    form_set_error('field_playlist_items_count', 'Playlist Items Count needs to be filled out');
  }
}

/**
 *  @function:
 *    This function is used to parse the list to create an automated playlist
 */
function _tp_videos_playlist_filter_list_parser(&$items, $entity) {
  if (is_object($entity)) {
    //variables from the entity video
    $filter = field_get_items('node', $entity, 'field_playlist_filter');
    $video_list_max = field_get_items('node', $entity, 'field_playlist_items_count');
    $video_list_sort = field_get_items('node', $entity, 'field_playlist_filter_sorting');

    //checks if the filter and video playlist max is set
    if (!empty($video_list_max)) {
      $video_list_max_processed = field_view_value('node', $entity, 'field_playlist_items_count', $video_list_max[0]);
      $video_list_auto_sort = field_view_value('node', $entity, 'field_playlist_filter_sorting', $video_list_sort[0]);
      $video_list = new tp_playlist_filter((int)$video_list_max_processed['#markup'], $video_list_auto_sort['#markup']);

      if (!empty($filter)) {
        if (isset($filter[0]['target_id'])) {
          $tax_obj = taxonomy_term_load($filter[0]['target_id']);
          $vid = $tax_obj->vid;
          $vocab = taxonomy_vocabulary_load($vid);

          //adds filter into the obj
          $video_list->add_filter(
            array(
              'target_id' => $filter[0]['target_id'],
              'vocab' => $vocab
            )
          );
        }
      }

      //adds the items into the obj
      foreach ($items as $key => $value) {
        if (!$value['hide']) {
          $video_list->add_video_nid($value['nid']);
        }
      }

      //returns the new items list
      $items = $video_list->get_results();
    }
  }
}
