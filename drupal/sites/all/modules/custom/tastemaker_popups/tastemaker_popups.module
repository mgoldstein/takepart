<?php

/***
 * Implementation of hook_init()
 *
 * creates global js var detected_mobile_browser
 *
 */
function tastemaker_popups_init() {
  $path = drupal_get_path('module', 'tastemaker_popups');
  drupal_add_css($path . '/css/tastemaker_popups.css', array('every_page' => TRUE));
  if (variable_get('tastemaker_popups_enabled', true)) {
    // we can disable js for testing
    drupal_add_js($path . '/js/tastemaker_popups.js', 'file');
    drupal_add_js(array('tastemaker_popups' => array('js_enabled' => true)), 'setting');
  }
  else {
    drupal_add_js(array('tastemaker_popups' => array('js_enabled' => false)), 'setting');
  }
}


/**
 * Implements hook_menu().
 */
function tastemaker_popups_menu() {
  $items['tastemaker/video_details/%'] = array(
    'title' => 'Video tastemaker callback to get details',
    'page callback' => 'tastemaker_popups_get_video_details',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}


/***
 * Implementation of hook_preprocess_node()
 *
 * @param $vars
 * @param $hook
 */
function tastemaker_popups_preprocess_node(&$vars, $hook) {
  if (!takepart_vidpop_mobile_browser()) {
    // we are on a non-mobile device; load hidden popups
    //
    if (strstr($vars['node']->body['und'][0]['value'], 'TASTEMAKER')) {
      // load the tastemakers popups
      tastemaker_popups_process_tastemaker_popups($vars['node']->body['und'][0]['value'], $vars);
    }
  }
}


/***
 * Implementation of hook_preprocess_html()
 *
 * @param $vars
 */
function tastemaker_popups_preprocess_html(&$vars) {
  $path = drupal_get_path_alias($_GET['q']);

  if ($path = 'tastemakers/video') {
    // add our class
    $vars['classes_array'][] = 'tastemakers-video';
  }
}


/**
 * Implement hook_theme().
 *
 * This one is used as the base to reduce errors when updating.
 */
function tastemaker_popups_theme() {
  $template_path = drupal_get_path('module', 'tastemaker') . '/theme';

  return array(
    'tastemaker_video_preview' => array(
      'path'      => $template_path,
      'template'  => 'tastemaker-video-preview',
      'variables' => array('p_video_id' => NULL, 'p_popup' => NULL),
    ),
    'tastemaker_video_popup' => array(
      'path'      => $template_path,
      'template'  => 'tastemaker-video-popup',
      'variables' => array('content' => NULL),
    ),
  );
}


/***
 * function: preload popups for map page
 *
 * @param $text body text, containing embedded javascript
 * @param $vars variable data
 *
 * typical data line:
 *     videoData[0][0] = ["http://www.takepart.com/sites/default/files/temp_video_thumb.png", "This is caption 1"];

 */
function tastemaker_popups_process_tastemaker_popups($text, $vars) {
  $data = explode("\n", $text);
  foreach ($data as $junk => $line) {
    if (preg_match("/^.*videoData\[(\d+)\]\[(\d+)\].*\=.*\[([^\]]+)\]/", $line, $res)) {
      //  get the value of the config fields:
      //  ***   1) the youtube id of the video
      //  ***   2) the URL of the preview picture
      //  ***   3) caption (for thumbnail caption or popup tite)
      //  ***   4) description (for popup description)

      // Our fields are extracted from the line and extracted to $res:
      //  ***   0 = row
      //  ***   1 = col
      //  ***   2 = line data

      $row   = $res[1];
      $col   = $res[2];
      $stuff = $res[3];

      $fields = explode(',', $stuff);
      // remove extra quotes in field
      foreach ($fields as $idx => $data) {
        $fields[$idx] = preg_replace("/\"/", "", $data);
      }

      // process popup if we have a youtube id
      if ($fields[0]) {
        // this will be the id of the hidden div
        $id = 'taste-details-' . $row . '-' . $col;

        $content = array(
          'youtube_id'  => $fields[0],
          'preview_url' => $fields[1],
          'caption'     => $fields[2],
          'description' => $fields[3],
        );

        $content['fmt_video'] = takepart_vidpop_loading_graphic();

        $classes= "vidpop-popup";
        $attributes = drupal_attributes($vars['attributes_array']);

        $template_file = drupal_get_path('module', 'tastemaker_popups') . '/theme/tastemaker-video-popup.tpl.php';
        ob_start();                                   // Start output buffering
        include DRUPAL_ROOT . '/' . $template_file;   // Include the template file
        $rendered = ob_get_clean();                   // End buffering and return its contents

        // format as a colorbox
        $output = <<<EOT
<div class="vidpop-overlay">
  <div id="$id">
    $rendered
  </div>
</div>
EOT;

        print $output;
      }
    }
  }
}


/***
 * ajax callback to get map popup details
 *
 * arg is the nid
 *
 * url is /tastemaker/video_details/VIDEO_ID
 */
function tastemaker_popups_get_video_details() {
  $video_id = arg(2);
  $output = 'error fetching video ' . $video_id;

  // format the video for display in popup
  $output = <<<EOT
<div class="vidpop-popup tastemaker-vidpop" style="height: 360px; width: 640px;">
<iframe width="640" height="411" frameborder="0" type="text/html" class="youtube-player tastemaker-vidpop-iframe" src="http://www.youtube.com/embed/$video_id?version=3&amp;wmode=opaque" style="height: 360px; width: 640px;"></iframe>
</div>
EOT;

  print $output;
  drupal_exit();
}


/***
 * Implementation of hook_form_alter
 *
 * Adds rightrail settings
 *
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 *
 */
function tastemaker_popups_form_alter(&$form, &$form_state, $form_id) {
  $a = 1;
  switch ($form_id) {
    case 'takepart_vidpop_settings_form':
      $form['tastemaker_popups'] = array(
        '#type'          => 'fieldset',
        '#title'         => t('Tastemaker Popups'),
        '#collapsible'   => TRUE,
        '#collapsed'     => FALSE,
      );
      $form['tastemaker_popups']['tastemaker_popups_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable tastemaker popups'),
        '#default_value' => variable_get('tastemaker_popups_enabled', true),
        '#description' => t('Enable tastemakers popups javascript.'),
      );
      $form['#submit'][] = 'tastemaker_popups_submit_function';
      break;
  }
}


/***
 * updates var from alter on submit
 */
function tastemaker_popups_submit_function($delta = '', $edit = array()){
  variable_set('tastemaker_popups_enabled', $edit['values']['tastemaker_popups_enabled']);
}




