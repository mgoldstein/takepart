<?php

/**
 *  Implements hook_menu
 */
function tp_content_services_menu() {
  $items = array();

  //main group menu
  $items['admin/config/takepart/content_services'] = array(
    'title' => t('TakePart - Content Notify Services'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_content_services_admin_form'),
    'file' => 'tp_content_services.admin.inc',
    'file path' => drupal_get_path('module', 'tp_content_services') . '/forms',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * hook_node_insert
 */
function tp_content_services_node_insert($node) {
  if(in_array($node->type, array('openpublish_article','feature_article','openpublish_photo_gallery','video'))) {
    tp_content_services_notify_service($node, 'insert');
  }
}

/**
 * hook_node_update
 */
function tp_content_services_node_update($node) {
  if(in_array($node->type, array('openpublish_article','feature_article','openpublish_photo_gallery','video','fresh_gallery'))) {
    //There are 2 different processes. One that has to do with the current revision and the other as normal.
    if(isset($node->workbench_moderation['updating_live_revision']) && $node->workbench_moderation['updating_live_revision']){
      //Called when unpublished or published
      if($node->workbench_moderation['current']->published == 1 ||
        (isset($node->workbench_moderation['current']->unpublishing) && $node->workbench_moderation['current']->unpublishing == 1)){
        //Notify the services of a node change
        tp_content_services_notify_service($node, 'update');
      }

      if($node->workbench_moderation['current']->published == 1) {
        if($auto_free_tag = field_get_items('node', $node, 'field_auto_free_tagged')) {
          if($auto_free_tag[0]['value'] == 0) {
            tp_content_services_add_tags($node);
            tp_content_services_set_autotag($node);
          }
        }
      }
    }
  }
}

/**
 * API call to service
 */
function tp_content_services_notify_service($node, $insup = '') {
  //tags
  $tags = _tp_content_services_get_tags($node);

  //author
  $author = _tp_content_services_get_authors($node);

  //description - content subhead
  $description = '';
  if($sub_head = field_get_items('node', $node, 'field_article_subhead')) {
    $description = $sub_head[0]['value'];
  } else if($sub_head = field_get_items('node', $node, 'field_subhead')){
    $description = $sub_head[0]['value'];
  }
  //image - full path to content image
  //thumbnail - path to image style
  $thumb = $image = '';
  if($field_thumb_image = field_get_items('node', $node, 'field_thumbnail')) {
    $field_thumb_image = file_load($field_thumb_image[0]['fid']);
    $image = file_create_url($field_thumb_image->uri);
    $thumb = image_style_url('media_thumbnail', $field_thumb_image->uri);
  }
  if(!$image) {
    if($field_main_image = field_get_items('node', $node, 'field_article_main_image')){
      $field_main_image = file_load($field_main_image[0]['fid']);
      $image = file_create_url($field_main_image->uri);
    } elseif ($field_main_image = field_get_items('node', $node, 'field_gallery_main_image')) {
      $field_main_image = file_load($field_main_image[0]['fid']);
      $image = file_create_url($field_main_image->uri);
    }
  }
  if(!$thumb) {
    $thumb = $image;
  }

  //set published date if there is one

  if($pub_date = _publication_date_get_date($node->nid)) {
    $pub_date = date('Y-m-d H:i:s',$pub_date);
  } else {
    $pub_date = '';
  }

  //Check for newsletter Exclude
  $newsletter = 0;
  if($field_exclude_newsletter = field_get_items('node', $node, 'field_newsletter_feed_exclude')) {
    $newsletter = $field_exclude_newsletter[0]['value'];
  }

  $intro = '';
  if($introduction = field_get_items('node', $node, 'body')) {
    $dom = new DOMDocument;
    $dom->loadHTML(mb_convert_encoding($introduction[0]['value'], 'HTML-ENTITIES', 'UTF-8'));
    $ptags = $dom->getElementsByTagName('p');
    $i = 0;
    $j = 0;
    while($j < 3) {
      if(isset($ptags[$i])) {
        if(!empty($ptags[$i]->nodeValue) && $ptags[$i]->nodeValue != "\xc2\xa0" && $ptags[$i]->nodeValue && substr($ptags[$i]->nodeValue, 0, 8) !== "RELATED:") {
          $intro .= '<p>'.$ptags[$i]->nodeValue.'</p>';
          $j++;
        }
        $i++;
      } else {
        break;
      }
    }
  }

  $json = array(
      "url" => url('node/'.$node->nid, array('absolute' => TRUE)),
      "title" => (string)$node->title,
      "publish_date" => (string)$pub_date,
      "published" => (string)$node->status,
      "description" => $description,
      "tags" => (string)$tags,
      "newsletter_exclude" => (string)$newsletter,
      "introduction" => $intro,
      "image_url" => array(
          "full" => array("url" => $image),
          "thumb" => array("url" => $thumb),
      ),
      "author" => (string)$author,
      "access_token" => variable_get('content_services_access_token','')
  );

  $json = json_encode($json);

  $endpoint = variable_get('takepart_api_domain', '').variable_get('content_services_endpoint','');

  //Make call to endpoint
  $ret = drupal_http_request($endpoint,
    array(
      'headers' => array('Content-Type' => 'application/json', 'Accept' => 'application/json'),
      'method' => 'POST',
      'data' => $json,
    )
  );

  //Check if return is valid log message
  $data = json_decode($ret->data);
  if($ret->code == 202 && isset($data->enqueued) && $data->enqueued) {
    watchdog('Content Notify Service',
      '%insup Node%nid %title of %type. Content Service was notified correctly. %data %json',
      array(
        '%insup' => $insup,
        '%nid' => $node->nid,
        '%title' => $node->title,
        '%type' => $node->type,
        '%data' => $ret->data,
        '%json' => $json
      ));
  } else {
    watchdog('Content Notify Service', '%insup Node%nid %title of %type. Content Service Failed to notify correctly. %data  %json',
      array(
        '%insup' => $insup,
        '%nid' => $node->nid,
        '%title' => $node->title,
        '%type' => $node->type,
        '%data' => $ret->data,
        '%json' => $json
      ),
      WATCHDOG_ERROR);
  }
}

/**
 * Content services get tags
 */
function _tp_content_services_get_tags($node) {
  $tags = '';
  $tag_array = array();

  //Do topic tags
  if($topic_tags = field_get_items('node', $node, 'field_topic')) {
    foreach ($topic_tags as $topic_tag) {
      if (isset($topic_tag['tid']) && is_numeric($topic_tag['tid'])) {
        $tax_obj = taxonomy_term_load($topic_tag['tid']);
        $topic_tag = $tax = $tax_obj->name;
        $topic_tag = str_replace(" & ", " ", $topic_tag);
        $topic_tag = str_replace(" ", "-", $topic_tag);
        $tag_array[] = strtolower($topic_tag);
      }
    }
  }

  //Do free tags
  if($free_tags = field_get_items('node', $node, 'field_free_tag')) {

    foreach ($free_tags as $free_tag) {
      if (isset($free_tag['tid']) && is_numeric($free_tag['tid'])) {
        $tax_obj = taxonomy_term_load($free_tag['tid']);
        $free_tag = $tax = $tax_obj->name;

        $free_tag = str_replace(" & ", " ", $free_tag);
        $free_tag = str_replace(" ", "-", $free_tag);
        $tag_array[] = strtolower($free_tag);
      }
    }
  }

  $tag_array[] = $node->type;
  $tags = implode(",", $tag_array);

  return $tags;
}

/**
 * Content services get authors
 */
function _tp_content_services_get_authors($node) {
  $author = '';
  if($field_authors = field_get_items('node', $node, 'field_author')){
    $author_ids = array();
    foreach ($field_authors as $field_author) {
      $author_ids[] = $field_author['nid'];
    }
    $author_nodes = entity_load('node', $author_ids);
    $authors = array();
    foreach($author_nodes as $author_node){
      $authors[] = $author_node->title;
    }
    $author = implode(",", $authors);
  }
  return $author;
}

/**
 * Content Services add tags to Free Tags
 */
function tp_content_services_add_tags(&$node) {
  //add nodes url
  $url = urlencode(url('node/'.$node->nid, array('absolute' => true)));
  $access = variable_get('content_services_access_token', '');
  $api_url = variable_get('takepart_api_domain', '');
  $api_endpoint = variable_get('content_services_tags_endpoint','');
  //get tags from CDS
  $json = drupal_http_request("$api_url$api_endpoint?access_token=$access&url=$url");
  $json_keywords = json_decode($json->data);
  if(isset($json_keywords->keywords) && !empty($json_keywords->keywords)) {
    foreach($json_keywords->keywords AS $keyword) {
      //check if tag exists in system
      $temp_term = taxonomy_get_term_by_name($keyword, 'free_tags');
      if(empty($temp_term)) {
        $new_term = new stdClass();
        $new_term->name = $keyword;
        $new_term->vid = 4;
        taxonomy_term_save($new_term);
        if(!isset($new_term->tid)) {
          watchdog('Content Notify Service', 'Failed to create new term %termname',
            array(
              '%termname' => $keyword,
            ),
            WATCHDOG_ERROR);
          continue;
        } else {
          $temp_term = $new_term;
        }
      } else {
        $temp_term = $temp_term[key($temp_term)];
      }

      //Check if tag exists in node
      $add = 1;
      //check if free tags exists
      if(isset($node->field_free_tag)) {
        if(!isset($node->field_free_tag[LANGUAGE_NONE])) {
          $node->field_free_tag[LANGUAGE_NONE] = array();
        }
        foreach($node->field_free_tag[LANGUAGE_NONE] AS $free_tag) {
          if($temp_term->tid == $free_tag->tid){
            $add = 0;
            break;
          }
        }
        if($add) {
          $node->field_free_tag[LANGUAGE_NONE][] = (array) $temp_term;
        }
      }
    }
    field_attach_update('node', $node);
  } else {
    watchdog('Content Notify Service', 'Failed to add Free Tags to %nid:%title. Status: %status. Request: %request',
      array(
        '%nid' => $node->nid,
        '%title' => $node->title,
        '%status' => $json->status_message,
        '%request' => $json->request,
      ),
      WATCHDOG_ERROR);
  }
}

function tp_content_services_set_autotag(&$node) {
  $node->field_auto_free_tagged[LANGUAGE_NONE][0]['value'] = 1;
  field_attach_update('node', $node);
}
