<?php

include_once dirname(__FILE__) . '/mailchimp/MCAPI.class.php';

define('MAIL_CHIMP_API_KEY', '82975735a7b27a8bc6959bb3f20af46e-us6');
define('MAIL_CHIMP_LIST_ID', 'a823599bf3');

define('CAN_VOTE_FORM_ID', 221);

function can_campaign_preprocess_markup($markup) {
  $allowed_tags = '<a><b><i><strong><em><br><br/><img><p><ul><ol><li>'
    . '<blockquote><hr><hr/><h1><h2><h3><h4><h5><h6>';
  $markup = strip_tags($markup, $allowed_tags);
  $markup = str_replace(array("\r\n", "\r"), "\n", $markup);
  $markup = str_replace("\n\n\n", '</p><p>', $markup);
  $markup = str_replace("\n\n", '<br/>', $markup);
  return $markup;
}

/**
 * Configuration Defaults
 */
function can_campaign_vote_form_defaults($config) {

  $default_config = array(
    'vote_token' => '',
    'vote_submit' => t('Confirm'),
    'email_label' => t('Email'),
    'email_opt_in' => t('Sign me up to receive emails about CAN.'),
    'terms_of_use' => t("By clicking \"Confirm\", you agree to TakePart.com's Terms of Use <a href=\"@tou\">Terms of Use</a> and Privacy Policy <a href=\"@privacy\">TakePart Privacy Policy</a>.", array(
      '@privacy' => url('privacy-policy'),
      '@tou' => url('terms-of-use'),
    )),
    'email_error' => t(''),
    'vote_accepted_message' => t(''),
    'vote_rejected_message' => t(''),
    'bsd_communication_error' => t(''),
  );

  foreach ($default_config as $name => $value) {
    if (empty($config[$name])) {
      $config[$name] = $value;
    }
  }

  return $config;
}

/**
 * Configuration form
 */
function can_campaign_vote_configuration($form, $config) {

  $config = can_campaign_vote_form_defaults($config);

  $form['vote_token'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Voting Token'),
    '#default_value' => $config['vote_token'],
  );

  $form['vote_submit'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Confirm Caption'),
    '#default_value' => $config['vote_submit'],
  );

  $form['email_label'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Email field label'),
    '#default_value' => $config['email_label'],
  );

  $form['email_opt_in'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Email opt-in label'),
    '#default_value' => $config['email_opt_in'],
  );

  $form['terms_of_use'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Terms of Use'),
    '#default_value' => $config['terms_of_use'],
  );

  $form['email_error'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Email validation error'),
    '#default_value' => $config['email_error'],
  );

  $form['vote_accepted_message'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Accepted message'),
    '#default_value' => $config['vote_accepted_message'],
  );

  $form['vote_rejected_message'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('Rejected message'),
    '#default_value' => $config['vote_rejected_message'],
  );

  $form['bsd_communication_error'] = array(
    '#type' => 'textfield',
    '#maxlength' => 1023,
    '#title' => t('BSD communication error'),
    '#default_value' => $config['bsd_communication_error'],
  );

  return $form;
}

function can_campaign_most_recent_vote($email) {
  static $vote = NULL;
  if (!isset($vote)) {
    $vote = db_select('can_campaign_votes', 'v')
      ->fields('v', array('token', 'timestamp'))
      ->condition('email', $email)
      ->orderBy('timestamp', 'DESC')
      ->range(0, 1)
      ->execute()
      ->fetchAssoc();
  }
  return $vote;
}

function can_campaign_store_vote($email, $token) {
  db_insert('can_campaign_votes')
    ->fields(array(
      'email' => $email,
      'token' => $token,
      'timestamp' => REQUEST_TIME,
    ))
    ->execute();
}

function can_campaign_send_to_mailchimp($email) {

  $api = new MCAPI(MAIL_CHIMP_API_KEY);

  $api->listSubscribe(MAIL_CHIMP_LIST_ID, $email);
  if ($api->errorCode) {
    $message = 'Error sending email signup to MailChimp [@code] @body';
    watchdog('can_campaign', $message, array(
      '@code' => $api->errorCode,
      '@body' => $api->errorMessage,
    ));
    return FALSE;
  }

  return TRUE;
}

/**
 * Voting form
 */
function can_campaign_vote_form($form, &$form_state, $config) {
  global $user;

  $config = can_campaign_vote_form_defaults($config);
  $form_state['can_campaign_vote'] = $config;

  $attributes = array(
    'last_vote' => NULL,
    'last_timestamp' => NULL,
    'vote_allowed' => TRUE,
    'vote_token' => $config['vote_token'],
  );
  if (user_is_logged_in() && isset($user->mail)) {

    $vote = can_campaign_most_recent_vote($user->mail);

    if ($vote !== FALSE) {
      $attributes['last_vote'] = $vote['token'];
      $attributes['last_timestamp'] = $vote['timestamp'];
    }
    $voting = bluestatedigital_get_service('voting');
    $attributes['vote_allowed'] = $voting->checkEligibility($vote,
      BlueStateDigitalVoting::ONCE_PER_CALENDAR_DAY);
  }
  $form['#wordlet_attributes'] = $attributes;

  drupal_add_js(array('can_campaign' => array(
    'vote_allowed' => $attributes['vote_allowed'],
    'last_vote' => $attributes['last_vote'],
    'last_timestamp' => $attributes['last_timestamp'],
  )), 'setting');


  $email_value = isset($form_state['values']['email'])
    ? $form_state['values']['email'] : '';
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => $config['email_label'],
    '#default_value' => $email_value,
    '#required' => TRUE,
  );

  $email_opt_in_value = isset($form_state['values']['email_opt_in'])
    ? $form_state['values']['email_opt_in'] : TRUE;
  $form['email_opt_in'] = array(
    '#type' => 'checkbox',
    '#title' => $config['email_opt_in'],
    '#default_value' => $email_opt_in_value,
  );

  $form['terms_of_use'] = array(
    '#theme' => 'html_tag',
    '#tag' => 'label',
    '#attributes' => array(
      'class' => array('terms-of-use'),
    ),
    '#value' => can_campaign_preprocess_markup($config['terms_of_use'])
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $config['vote_submit'],
    '#ajax' => array(
      'callback' => 'can_campaign_vote_form_callback',
      'progress' => array(
        'type' => 'throbber',
        'message' => NULL,
      ),
    ),
  );

  if (!isset($form['#pre_render'])) {
    $form['#pre_render'] = array();
  }
  array_unshift($form['#pre_render'], 'can_campaign_vote_form_pre_render');

  return $form;
}

/**
 * Voting form validation
 */
function can_campaign_vote_form_validate($form, &$form_state) {

  $config = $form_state['can_campaign_vote'];

  $email = trim($form_state['values']['email']);
  if ((!empty($email)) && (!valid_email_address($email))) {
    form_set_error('email', $config['email_error']);
  }
}

/**
 * Voting form submit
 */
function can_campaign_vote_form_submit($form, &$form_state) {

  $config = $form_state['can_campaign_vote'];
  $token = $config['vote_token'];

  $email = $form_state['values']['email'];

  try {

    $vote = can_campaign_most_recent_vote($email);
    $voting = bluestatedigital_get_service('voting');
    $allowed = $voting->checkEligibility($vote,
      BlueStateDigitalVoting::ONCE_PER_CALENDAR_DAY);

    if ($allowed) {
      $opt_ins = array(
        1 => !empty($form_state['values']['email_opt_in']),
      );
      if ($voting->castVote(CAN_VOTE_FORM_ID, $email, $token, $opt_ins)) {
        can_campaign_store_vote($email, $token);
        $form_state['can_campaign_vote_signup_result'] = 'accepted';
      }
      else {
        $form_state['can_campaign_vote_signup_result'] = 'error';
      }
    }
    else {
      $form_state['can_campaign_vote_signup_result'] = 'rejected';
    }

    if (!empty($form_state['values']['email_opt_in'])) {
      can_campaign_send_to_mailchimp($email);
    }
  }
  catch (BlueStateDigitalApiException $ex) {
    $form_state['can_campaign_vote_signup_result'] = 'error';
    $message = 'Error processing vote [@code] @body';
    watchdog('can_campaign', $message, array(
      '@code' => $ex->getResponseCode(),
      '@body' => $ex->getResponseBody(),
    ));
  }
}

/**
 * Voting form AJAX callback
 */
function can_campaign_vote_form_callback($form, &$form_state) {

  // Standard form submission stuff.
  $commands = array();

  $markup = drupal_render($form);
  $selector = '#' . $form_state['complete form']['#id'];
  $commands[] = ajax_command_replace($selector, $markup);

  $errors = form_get_errors();
  if (empty($errors)) {
    $commands[] = ajax_command_settings(array(
      'can_campaign' => array(
        'vote_result' => $form_state['can_campaign_vote_signup_result'],
      )
    ));
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}

function can_campaign_vote_form_pre_render($element) {
  $errors = form_get_errors();
  if ($errors) {
    drupal_get_messages('error');
    foreach ($errors as $field => $error) {
      $element[$field]['#inline_error_message'] = $error;
      array_unshift($element[$field]['#theme_wrappers'], 'can_campaign_inline_error_message');
    }
  }
  return $element;
}

function can_campaign_theme() {
  return array(
    'can_campaign_inline_error_message' => array(
      'render element' => 'element',
    ),
  );
}

function theme_can_campaign_inline_error_message($variables) {
  $element = $variables['element'];
  if (isset($element['#inline_error_message'])) {
    return '<label class="error" for="' . $element['#id'] . '">'
      . $element['#inline_error_message'] . '</label>' . $element['#children'];
  }
  return $element['#children'];
}
