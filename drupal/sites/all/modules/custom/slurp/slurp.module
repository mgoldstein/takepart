<?php
  

/**
 * Implement hook_menu().
 */
function slurp_menu() {
  $items = array();
  $items['slurp'] = array(
      'title' => 'Field Export',
      'page callback' => '_slurp_json',
      'access callback' => true,
      'type' => MENU_CALLBACK,
  );
  $items['spit'] = array(
      'title' => 'Field Export',
      'page callback' => '_spit_json',
      'access callback' => true,
      'type' => MENU_CALLBACK,
  );  
  return $items;
}


/*
 * Menu callback for JSON:
 */
function _slurp_json() {
    
  $json = array();
  $json_instances = array();
  $json_field_data = array();

  $entity_type = $_GET['entity'];
  $bundle_name = $_GET['bundle'];

  $fields_info = field_info_instances($entity_type, $bundle_name);
  foreach ($fields_info as $field_name => $value) {
    $instance = field_info_instance($entity_type, $field_name, $bundle_name);
    $field_data = field_info_field($field_name);
    $json_instances[$field_name] = $instance;
    $json_field_data[$field_name] = $field_data;
  }

  $json['fields'] = $json_field_data;
  $json['instances'] = $json_instances;

  header ("Content-Type:application/json");
  
  echo drupal_json_encode($json);

  exit();
  
}


/*
 * Menu callback for JSON:
 */
function _spit_json() {

  drupal_set_time_limit(5*60);
  field_purge_batch(5000);
  drupal_flush_all_caches();
  field_cache_clear(TRUE);
  flush();

  $entity_type = $_GET['entity'];
  $bundle_name = $_GET['bundle'];
  $enviro = $_GET['enviro'];
  $gettype = $_GET['type'];

  $slurp = _slurp_curl($enviro, $entity_type, $bundle_name);

  $fields = $slurp['fields'];
  $instances = $slurp['instances'];

  if(empty($entity_type) || empty($bundle_name) || empty($gettype) || empty($enviro)) {
    echo "Your URL should look something like; http://" . $_SERVER['HTTP_HOST'] . "/spit?enviro=qa.takepart.com&entity=node&bundle=action&type=instances, where enviro is the server you are importing from, entity and action specifiy which to pull fields from and type should be either \"fields\" or \"instances\"";  
    exit();
  }


  echo "<h1>Importing <i>{$gettype}</i> from <i>$enviro</i> to <i>" . $_SERVER['HTTP_HOST'] . "</i></h1>";
  echo "<h2>Entity Type <i>{$entity_type}</i>, Bundle Name <i>{$bundle_name}</i></h2>";

  //Update Fields:
  if($gettype == 'fields') {
    foreach ($fields as $field_name => $value) {
      echo "<hr/>";
      echo "<h3>" . $field_name . "</h3>";
      if (isset($fields[$field_name])) {
        $info = field_info_field($field_name);
        if (empty($info)) {
          print "Adding field {$field_name}<br/><br/>\n";
          $field = $fields[$field_name];
          if(!empty($field)) {
            unset($field['id']);
            try {
              field_create_field($field);
              //field_cache_clear(TRUE);
            } catch (Exception $e) {
              echo "Error: Create<pre>";
              print_r($e);
              echo "</pre>";
              try {
                field_update_field($field);
                //field_cache_clear(TRUE);
              } catch (Exception $e) {
                echo "Error: Update (Create Exception)<pre>";
                print_r($e);
                echo "</pre>";
              }
            } 
          }
        } else {
          print "Updating field {$field_name}<br/><br/>\n";
          field_update_field($fields[$field_name]);
        }
        /*echo '<pre>Value:';
        print_r($value);
        echo '</pre>';*/
      } else {
        echo "Field <i>{$field_name}</i> not set.";
      }
      flush();
    }
  }
  
  //Update Instances:
  if($gettype == 'instances') {
    foreach ($instances as $field_name => $instance) {
      echo "<hr/>";
      echo "<h3>" . $field_name . "</h3>";
      if (isset($fields[$field_name])) {
        $info = field_info_instance($entity_type, $field_name, $bundle_name);
        $fieldinstance = field_read_field($instance);
        if (empty($info)) {
          print "Adding instance of {$field_name}<br/><br/>\n";
          unset($instance['id']);
          unset($instance['field_id']);
          //echo '<pre>Instance:';
          //print_r($instance);
          //echo '</pre>';
          if(!empty($instance)) {
            try {
              field_create_instance($instance);
              //field_cache_clear(TRUE);
            } catch (Exception $e) {
              echo "Error: Create Instance<pre>";
              print_r($e);
              echo "</pre>";
            }
          }
        } elseif (!empty($fieldinstance)) {
          print "Updating instance of {$field_name}<br/><br/>\n";
          //echo '<pre>Instance:';
          //print_r($instance);
          //echo '</pre>';
          if(!empty($instance)) {
            try {
              field_update_instance($instance);
              //field_cache_clear(TRUE);
            } catch (Exception $e) {
              echo "Error: Update Instance<pre>";
              print_r($e);
              echo "</pre>";
            }
          } else { 
            print "Error: Need to create field first.<br/>";
          }
        } else {
          print "Error: Attempted to update deleted field.<br/>";
        }
      } else {
        echo "Field <i>{$field_name}</i> not set.";
      }
      flush();
    }
  }


  exit();    
}


/**
 * CURL:
 */
function _slurp_curl($enviro = 'qa.takepart.com', $entity, $bundle) {

   $ch = curl_init();   
   $url = "http://" . $enviro . "/slurp?entity=" . urlencode($entity) . "&bundle=" . urlencode($bundle);

   print $url; 
   print "<br/>";

   curl_setopt($ch, CURLOPT_URL, $url);
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
   $stuff = curl_exec($ch);

   return drupal_json_decode($stuff);
}
