<?php
/**
 * @file
 * The Blue State Digital Module
 */

include_once dirname(__FILE__) . '/include/bsdapi/bsd.api.inc';
include_once dirname(__FILE__) . '/include/bsdapi/bsd.service.inc';
include_once dirname(__FILE__) . '/include/bsdapi/bsd.cache.inc';

/**
 * Implements hook_help().
 */
function bluestatedigital_help($path, $arg) {
  $output = '';
  if ($path == 'admin/help#bluestatedigital') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t("The Blue State Digital module allows integration with
      Blue State Digital's various APIs.") . '</p>';
    $output .= '<h3>' . t('Uses') . '</h3>';
    $output .= '<dl>';
    $output .= '<dt>' . t('Configure API settings') . '</dt>';
    $output .= '<dd>' . t('To configure the API settings visit the
      <a href="@api-config">API Configuration</a> page. On this page you can
      configure the information used to authenicate with Blue State Digital
      as well as configure the communication method to use in all requests.',
      array(
        '@api-config' => url('admin/config/bluestatedigital/api'))) . '</dd>';
    $output .= '</dl>';
  }
  return $output;
}


/**
 * Implements hook_menu().
 */
function bluestatedigital_menu() {
  return array(
    'admin/config/bluestatedigital' => array(
      'title' => 'Blue State Digital',
      'description' => 'Configuration of Blue State Digital integration',
      'position' => 'right',
      'weight' => 0,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/bluestatedigital/api' => array(
      'title' => 'Blue State Digital API',
      'description' => 'Configure Blue State Digital API support',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bluestatedigital_api_admin_form'),
      'access callback' => 'user_access',
      'access arguments' => array('bluestatedigital configure api'),
    ),
  );
}

/**
 * Implements hook_permission().
 */
function bluestatedigital_permission() {
  return array(
    'bluestatedigital configure api' => array(
      'title' => t('Configure API'),
      'description' => t('Configure the Blue State Digital API settings.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Admin form callback.
 */
function bluestatedigital_api_admin_form($form, &$form_state) {

  $form['bluestatedigital_api_id'] = array(
    '#type' => 'textfield',
    '#title' => t('API ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('bluestatedigital_api_id',
      'takepart-com'),
  );

  $form['bluestatedigital_api_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Secret'),
    '#required' => TRUE,
    '#default_value' => variable_get('bluestatedigital_api_secret',
      'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8'),
  );

  $form['bluestatedigital_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Base URL'),
    '#description' => t('The base URL to use for all API requests that do not require a secure connection.'),
    '#required' => TRUE,
    '#default_value' => variable_get('bluestatedigital_api_url',
      'http://secure.takepart.com/page/api/'),
    '#element_validate' => array('bluestatedigital_validate_url'),
    '#secure_only' => FALSE,
  );

  $form['bluestatedigital_api_secure_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Secure URL'),
    '#description' => t('The base URL to use for all API requrests that require a secure connection.'),
    '#required' => TRUE,
    '#default_value' => variable_get('bluestatedigital_api_secure_url',
      'https://secure.takepart.com/page/api/'),
    '#element_validate' => array('bluestatedigital_validate_url'),
    '#secure_only' => TRUE,
  );

  $form['bluestatedigital_rest_method'] = array(
    '#type' => 'select',
    '#title' => t('REST Method'),
    '#description' => t('The communication method to use for API requests.'),
    '#required' => TRUE,
    '#options' => array(
      BlueStateDigitalApi::REST_METHOD_STREAM_WRAPPER => t('Stream Wrappers'),
      BlueStateDigitalApi::REST_METHOD_CURL => t('cURL'),
    ),
    '#default_value' => variable_get('bluestatedigital_rest_method',
      BlueStateDigitalApi::REST_METHOD_CURL),
  );

  $form['bluestatedigital_curl_request_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('cURL Timeout'),
    '#description' => t('The maximum number of seconds to allow cURL functions to execute'),
    '#required' => TRUE,
    '#default_value' => variable_get('bluestatedigital_curl_request_timeout', 10),
    '#element_validate' => array('_element_validate_integer_positive'),
  );

  return system_settings_form($form);
}

/**
 * URL form element validation callback.
 */
function bluestatedigital_validate_url($element, &$form_state) {
  if (!empty($element['#value'])) {
    if (!valid_url($element['#value'], TRUE)) {
      form_error($element, t('@title must be an absolute URL.', array(
        '@title' => $element['#title'],
      )));
    }
    elseif (isset($element['#secure_only']) && $element['#secure_only']) {
      if (substr($element['#value'], 0, 8) != 'https://') {
        form_error($element, t('@title must be a secure URL.', array(
          '@title' => $element['#title'],
        )));
      }
    }
  }
}

/**
 * Create a pre-initialized instance of a Blue State Digital API.
 *
 * This function creates and initializes an instance of a Blue State Digital
 * API using the settings defined on the Blue State Digital API configuration
 * page.
 *
 * @param string $api
 *   The name of the API to create, must be one of the following
 *   - group: the Constituent Group API
 *   - signup: the Signup API
 *
 * @return object|boolean
 *   Instance of the requested API or FALSE if no such API is supported.
 */
function bluestatedigital_get_api($api) {
  $values = &drupal_static(__FUNCTION__, array());
  if (!isset($values[$api])) {

    $api_id = variable_get('bluestatedigital_api_id', 'takepart-com');
    $api_secret = variable_get('bluestatedigital_api_secret',
      'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8');
    $rest_method = variable_get('bluestatedigital_rest_method',
      BlueStateDigitalApi::REST_METHOD_CURL);
    $request_base = variable_get('bluestatedigital_api_url',
      'http://secure.takepart.com/page/api/');
    $secure_base = variable_get('bluestatedigital_api_secure_url',
      'https://secure.takepart.com/page/api/');
    $request_timeout = variable_get('bluestatedigital_curl_request_timeout',
      10);

    if ($api == 'group') {
      $values[$api] = new BlueStateDigitalConstituentGroupApi($api_id,
        $api_secret, $rest_method, $request_base, $request_timeout);
    }
    elseif ($api == 'signup') {
      $values[$api] = new BlueStateDigitalSignupApi($api_id, $api_secret,
        $rest_method, $request_base, $request_timeout);
    }
    else {
      $values[$api] = FALSE;
    }
  }
  return $values[$api];
}

/**
 * Create a pre-initialized instance of a Blue State Digital service.
 *
 * This function creates and initializes an instance of a Blue State Digital
 * service using the settings defined on the Blue State Digital API
 * configuration page.
 *
 * @param string $service
 *   The name of the service to create, must be one of the following
 *   - voting: the Voting service
 *
 * @return object|boolean
 *   Instance of the requested service or FALSE if no such service is supported.
 */
function bluestatedigital_get_service($service) {
  $values = &drupal_static(__FUNCTION__, array());
  if (!isset($values[$service])) {

    $api_id = variable_get('bluestatedigital_api_id', 'takepart-com');
    $api_secret = variable_get('bluestatedigital_api_secret',
      'ae2cbc9a230ba4c36a9972fb7eeef41e2f2c62f8');
    $rest_method = variable_get('bluestatedigital_rest_method',
      BlueStateDigitalApi::REST_METHOD_CURL);
    $request_base = variable_get('bluestatedigital_api_url',
      'http://secure.takepart.com/page/api/');
    $secure_base = variable_get('bluestatedigital_api_secure_url',
      'https://secure.takepart.com/page/api/');
    $request_timeout = variable_get('bluestatedigital_curl_request_timeout',
      10);

    if ($service == 'voting') {
      $values[$service] = new BlueStateDigitalVoting($api_id,
        $api_secret, $rest_method, $request_base, $request_timeout);
      $values[$service]->setCacheController(new DrupalBallotCacheController());
    }
    else {
      $values[$service] = FALSE;
    }
  }
  return $values[$service];
}

/**
 * Cache controller that uses Drupal's cache.
 */
class DrupalBallotCacheController extends BlueStateDigitalCacheController{

  public function get($key, &$value) {
    $cached = cache_get($key);
    if ($cached !== FALSE) {
      $value = $cached;
      return TRUE;
    }
    return FALSE;
  }

  public function set($key, $value) {
    cache_set($key, $value);
    return TRUE;
  }

  public function clear() {
    cache_clear_all('ballot-', 'cache', TRUE);
  }
}
