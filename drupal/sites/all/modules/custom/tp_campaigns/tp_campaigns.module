<?php
/**
 * @file
 * TakePart Campaign Redesign
 */

/**
 * Implements hook_help().
 */
function tp_campaigns_help($path, $arg) {
	switch ($path) {
		case 'admin/help#tp_campaigns':
			return '<p>' . t('Module for the Campaign Redesign, April 2014') . '</p>';		
	}
}
/**
 * Implements hook_menu().
 */
function tp_campaigns_menu(){
  $items['admin/config/campaigns'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_campaigns_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function tp_campaigns_block_info(){
  $blocks = array();
  $blocks['tp_campaigns_hero'] = array(
    'info' => t('Campaign Hero')
   );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tp_campaigns_block_view($delta = ''){
  $block = array();
  switch ($delta) {
    case 'tp_campaigns_hero':
      $block['content'] = tp_campaigns_hero();
      break;
  }
  return $block;
}

/**
 * Implements hook_theme
 */
function tp_campaigns_theme() {
  return array(
    'tp_card_tray' => array(
      'template' => 'field-formatter--card-tray',
      'variables' => array(
        'items' => array(),
        'entity' => '',
      )
    ),
    'tp_card_reference' => array(
      'template' => 'field-formatter--card-reference',
      'variables' => array(
        'items' => array(),
        'entity' => '',
        'tray_vars' => '',
      )
    ),
    'tp_campaigns_hero' => array(
      'template' => 'campaign-hero',
      'variables' => array(
        'items' => array(),
        'entity' => '',
        'campaign_node' => '',
        'share_headline' => '',
        'share_description' => '',
        'share_imagesrc' => '',
        'bg_settings' => array(),
        'logo' => '',
      )
    )
  );
}

/*
 * Implements hook_field_formatter_info()
 */
function tp_campaigns_field_formatter_info(){
  return array(
    'tp_card_tray' => array(
      'label' => t('Card Tray'),
      'field types' => array('entityreference'),
    ),
    'tp_card_reference' => array(
      'label' => t('Card Reference'),
      'field types' => array('entityreference'),
    ),
  );
}

/*
 * Implements hook_field_formatter_view()
 */
function tp_campaigns_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  $element = array();
  $settings = $display['settings'];
  switch($display['type']){
    case 'tp_card_tray':
      $element = array(
        '#theme' => 'tp_card_tray',
        '#items' => $items,
        '#entity' => $entity,
      );
    break;
    case 'tp_card_reference':
      $element = array(
        '#theme' => 'tp_card_reference',
        '#items' => $items,
        '#entity' => $entity,
        '#tray_vars' => tp_campaigns_tray_vars($entity),
      );
    break;
  }
  return $element;
}


/**
 * Implements hook_token_info().
 */
function tp_campaigns_token_info() {

  $info['tokens']['node']['seo-title'] = array(
    'name' => t('SEO Title'),
    'description' => t("Uses SEO Title field or Title if SEO Title field is not present"),
    'type' => 'format',
  );
  $info['tokens']['node']['campaign-base-url'] = array(
    'name' => t('Campaign Base URL'),
    'description' => t("The Base URL for Campaign Pages"),
    'type' => 'format',
  );
  $info['tokens']['node']['campaign-name'] = array(
    'name' => t('Campaign Name'),
    'description' => t("The Name for Campaign Pages"),
    'type' => 'format',
  );
  $info['tokens']['node']['campaign-topic'] = array(
    'name' => t('Campaign Topic'),
    'description' => t("The Primary Topic for Campaign Pages"),
    'type' => 'format',
  );
  $info['tokens']['node']['campaign-series'] = array(
    'name' => t('Campaign Series'),
    'description' => t("The Series for Campaign Pages"),
    'type' => 'format',
  );

  return $info;
}

/*
 * Implements hook_tokens().
 */
function tp_campaigns_tokens($type, $tokens, array $data = array(), array $options = array()) {
 $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'seo-title':
          if (isset($node->field_campaign_seo_title['und'][0]['value']) == true) {
            $replacements[$original] = $node->field_campaign_seo_title['und'][0]['value'];
          }
          else{
            $replacements[$original] = $node->title;
          }
        break;
        case 'campaign-base-url':
          if ($items = field_get_items('node', $node, 'field_campaign_reference')) {
            $node = node_load($items[0]['target_id']);
            $replacements[$original] = $node->field_campaign_base_url['und'][0]['value'];
          }
        break;
        case 'campaign-name':
          if ($items = field_get_items('node', $node, 'field_campaign_reference')) {
            $node = node_load($items[0]['target_id']);
            $replacements[$original] = $node->title;
          }
        break;
        case 'campaign-topic':
          $references = field_get_items('node', $node, 'field_campaign_reference');
          if (!empty($references)) {
            $reference = reset($references);
            if (!empty($reference)) {
              $node = node_load($reference['target_id']);
              if (!empty($node)) {
                $items = field_get_items('node', $node, 'field_topic');
                if (!empty($items)) {
                  $first = reset($items);
                  if (!empty($first)) {
                    $term = taxonomy_term_load($first['tid']);
                    if (!empty($term)) {
                      $replacements[$original] = $term->name;
                    }
                  }
                }
              }
            }
          }
        break;
        case 'campaign-series':
          $references = field_get_items('node', $node, 'field_campaign_reference');
          if (!empty($references)) {
            $reference = reset($references);
            if (!empty($reference)) {
              $node = node_load($reference['target_id']);
              if (!empty($node)) {
                $items = field_get_items('node', $node, 'field_series');
                if (!empty($items)) {
                  $first = reset($items);
                  if (!empty($first)) {
                    $term = taxonomy_term_load($first['tid']);
                    if (!empty($term)) {
                      $replacements[$original] = $term->name;
                    }
                  }
                }
              }
            }
          }
        break;
      }
    }
  }
  return $replacements;
}



//hook form alter
function tp_campaigns_form_alter(&$form, &$form_state, $form_id){
  // There is a bug with jQuery Update and Drupal Core that makes the code below poop on everything
  // $form['field_campaign_content_side']['#states'] = array(
  //   'visible' => array(   // action to take.
  //     ':input[name=field_campaign_media_col\[und\]]' => array(
  //       array('value' => 1 ),
  //       array('value' => 2 ),
  //       array('value' => 3 ),
  //     ),
  //   ),
  // );
  
  //Campaign Media Card
  $form['field_campaign_media_photo']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_media_type\[und\]]' => array('value' => 0),
    ),
  );
  $form['field_campaign_media_image_link']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_media_type\[und\]]' => array('value' => 0),
    ),
  );
  $form['field_campaign_media_video']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_media_type\[und\]]' => array('value' => 1),
    ),
  );
  
  //Campaign News Card
  $form['field_campaign_single_news_ref']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_news_type\[und\]]' => array('value' => 0),
    ),
  );
  $form['field_campaign_multi_news_ref']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_news_type\[und\]]' => array('value' => 1),
    ),
  );
  $form['field_campaign_news_filter_tag']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_news_type\[und\]]' => array('value' => 1),
    ),
  );
  $form['field_campaign_news_count']['#states'] = array(
    'visible' => array(
      ':input[name=field_campaign_news_type\[und\]]' => array('value' => 1),
    ),
  );

}

function tp_campaigns_form_campaign_node_form_alter(&$form, &$form_state){

  //if the menu has a value, disable it
  if(isset($form_state['node']->field_campaign_menu['und'][0]['value']) == TRUE){
    global $user;
    if (in_array('administrator', $user->roles) != true) {
      $form['field_campaign_menu']['#disabled'] = TRUE;
      $form['field_campaign_menu']['#attributes']['class'][] = 'disabled';
    }
  }
}

/*
 * Create us some menus.
 */
function tp_campaigns_node_presave($node) {
  if($node->type == 'campaign' && isset($node->field_campaign_menu['und'][0]['value']) == true){
  
    //check to see if menu exists, if it doesn't, create it.  
    $menu_name = $node->field_campaign_menu['und'][0]['value'];
    if(menu_tree_all_data($menu_name) == NULL){
      $menu = array(
       'menu_name' => 'menu-'. $menu_name,
       'title' => $node->title,
       'description' => 'Campaign Menu For '. $node->title,
      );
    }
    menu_save($menu); //uncomment this line when ready and no longer testing
  }
}


function tp_campaigns_hero(){
  // code for the tp campaigns block
  $node = 'node';
  $node = node_load(arg(1));
  if($campaign_node = field_get_items('node', $node, 'field_campaign_reference')){
    $page_node = $node;
    $campaign_node = node_load($campaign_node[0]['target_id']);

    $superfish_path = libraries_get_path('superfish');
    drupal_add_js($superfish_path. '/src/js/hoverintent.js');
    drupal_add_js($superfish_path. '/src/js/superfish.js');
    drupal_add_css($superfish_path. '/src/css/superfish.css');
    drupal_add_css($superfish_path. '/src/css/superfish-navbar.css');

    if ($items = field_get_items('node', $page_node, 'field_promo_headline')) {
      $share_headline = field_view_value('node', $page_node, 'field_promo_headline', $items[0]);
    } else {
      $items = field_get_items('node', $campaign_node, 'field_promo_headline');
      $share_headline = field_view_value('node', $campaign_node, 'field_promo_headline', $items[0]);
    }
    if ($items = field_get_items('node', $page_node, 'field_promo_text')) {
      $share_description = field_view_value('node', $page_node, 'field_promo_text', $items[0]);
    } else {
      $items = field_get_items('node', $campaign_node, 'field_promo_text');
      $share_description = field_view_value('node', $campaign_node, 'field_promo_text', $items[0]);
    }
    if ($items = field_get_items('node', $page_node, 'field_thumbnail')) {
      $share_imagesrc = field_view_value('node', $page_node, 'field_thumbnail', $items[0]);
    } else {
      $items = field_get_items('node', $campaign_node, 'field_thumbnail');
      $share_imagesrc = field_view_value('node', $campaign_node, 'field_thumbnail', $items[0]);
    }

    //Background Settings
    $bg_settings = array();
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_background')) {
      $uri = $items[0]['uri'];
      $bg_settings['image_url'] = file_create_url($uri);
    }
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_min_height')) {
      $min_height = field_view_value('node', $campaign_node, 'field_campaign_min_height', $items[0]);
      $bg_settings['min_height'] = drupal_render($min_height) - 20;
    }
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_mobile_min_height')) {
      $mobile_min_height = field_view_value('node', $campaign_node, 'field_campaign_mobile_min_height', $items[0]);
      $bg_settings['mobile_min_height'] = drupal_render($mobile_min_height) - 20;
    }
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_bgw')) {
      $bg_settings['bg_width'] = drupal_render(field_view_value('node', $campaign_node, 'field_campaign_bgw', $items[0]));
    }
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_bgw_image')) {
      $bg_settings['bg_width_image'] = drupal_render(field_view_value('node', $campaign_node, 'field_campaign_bgw_image', $items[0]));
    }

    //Branding Classes and Styles
    $bg_settings['styles'] = array();
    $bg_settings['classes'] = array();
    if(isset($bg_settings['image_url'])){
      $bg_settings['styles'][]   = 'background-image: url(\''. $bg_settings['image_url']. '\');';
      if(isset($bg_settings['bg_width_image']) && $bg_settings['bg_width_image'] == 'Full Width'){
        $bg_settings['classes'][] = 'header-bg-image-full';
      }
      else{
        $bg_settings['classes'][] = 'header-bg-image-980';
      }
    }
    if ($style_setting = field_get_items('node', $campaign_node, 'field_campaign_style_setting')) {
      $bg_settings['classes'][] = $style_setting[0]['value'];
    }

    if(isset($bg_settings['bg_width']) &&  $bg_settings['bg_width']== 'Full Width'){
      $bg_settings['classes'][] = 'header-full';
    }
    else{
      $bg_settings['classes'][] = 'header-980';
    }

    if($min_height = $bg_settings['min_height']){
      $bg_settings['styles'][] = 'min-height: '. $min_height. 'px;';
    }
    if ($bg_color = field_get_items('node', $campaign_node, 'field_campaign_bg_color')) {
      $bg_settings['styles'][] = 'background-color: '. $bg_color[0]['rgb']. ';';
    }


    if ($items = field_get_items('node', $campaign_node, 'field_campaign_menu')) {
      $bg_settings['classes'][] = 'has-menu';
    }




    //Logo and Logo settings
    $output = '';
    if ($items = field_get_items('node', $campaign_node, 'field_campaign_logo')) {
      $logo_image = file_create_url($items[0]['uri']);
      if ($position = field_get_items('node', $campaign_node, 'field_campaign_logo_position')) {
        $logo_position = drupal_render(field_view_value('node', $campaign_node, 'field_campaign_logo_position', $position[0]));
        switch ($logo_position){
          case 'Center':
            $logo_class = 'logo-center';
            break;
          case 'Left':
            $logo_class = 'logo-left';
            break;
          case 'Right':
            $logo_class = 'logo-right';
            break;
        }
        $logo_image = '<div class="campaign-logo-div"><img src="'. $logo_image. '" class="campaign-logo '. $logo_class. '"></div>';
      } else{
        $logo_image = '<div class="campaign-logo-div"><img src="'. $logo_image. '" class="campaign-logo"></div>';
      }
      if ($homepage_link = field_get_items('node', $campaign_node, 'field_campaign_hp')) {
        $output .= l(' ', $homepage_link[0]['url'], array('attributes' => array('class' => array('big-link'))));
      }
      $output .= $logo_image;

      $logo = $output;


    }

    return theme('tp_campaigns_hero', array(
      'campaign_node' => $campaign_node,
      'share_headline' => render($share_headline),
      'share_description' => render($share_description),
      'share_imagesrc' => file_create_url($share_imagesrc['#file']->uri),
      'bg_settings' => $bg_settings,
      'menu' => $menu,
      'logo' => $logo,
    ));
  }
  else{
    return;
  }
}

function tp_campaigns_settings_form($form, &$form_state){
  $form['legal_copy'] = array(
    '#type' => 'text_format',
    '#title' => t('SMS Legal Copy'),
    '#description' => t('Global legal copy for the SMS field'),
    '#default_value' => variable_get('sms_legal', ''),
  );
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit Settings'),
  );
  return $form;
}
function tp_campaigns_settings_form_validate($form, &$form_state){
  variable_set('sms_legal', $form_state['input']['legal_copy']['value']);

    //update any new card types
    $card_types = array(
        'campaign_card_media',
        'campaign_card_iframe',
        'campaign_card_social',
        'campaign_card_news',
        'campaign_card_text',
        'campaign_card_branding',
        'campaign_card_tap',
        'campaign_card_twitter',
        'campaign_card_empty',
        'campaign_card_ad',
        'campaign_card_multi_column'
    );
    variable_set('card_types', $card_types);
}



function tp_campaigns_tray_vars($entity){
  
  $tray_vars = array();
  $tray_vars['tray_classes'] = array();
  //Grab the tray title if it exists
  if($items = field_get_items('node', $entity, 'field_campaign_tray_title')){
    $tray_vars['tray_title'] = drupal_render(field_view_value('node', $entity, 'field_campaign_tray_title', $items[0]));
    $tray_vars['tray_classes'][] = 'has-tray-title';
    $title_exists = '';
    $title_exists = true;
  }
  //Set the tray classes
  if($items = field_get_items('node', $entity, 'field_campaign_background')){
    $tray_vars['tray_classes'][] = 'has-tray-background';
  }

  //Return Cards
  $tray_vars['cards'] = array();
  if($items = field_get_items('node', $entity, 'field_campaign_card_reference')){
    foreach($items as $key => $item){
      $node = node_load($item['target_id']);
      if($card_title = field_get_items('node', $node, 'field_campaign_card_title')){
        //If any card within a tray has a title we need to show a line above it
        $title_exists = true;
      }
      $output = '';
      $output .= '<div class="card-wrapper '. drupal_html_class($node->title). '">';
      $output .= drupal_render(node_view($node, 'full', NULL));
      $output .= '</div>';
      $tray_vars['cards'][] = $output;
    }
  }
  if($title_exists == true){
    $tray_vars['tray_classes'][] = 'has-title';
  }

  //Anchor Tag
  if($items = field_get_items('node', $entity, 'field_campaign_anchor_tag')){
    $title = drupal_render(field_view_value('node', $entity, 'field_campaign_anchor_tag', $items[0]));
    $title = drupal_html_id($title);
    $tray_vars['anchor_tag'] = $title;
  }


  return $tray_vars;
}

