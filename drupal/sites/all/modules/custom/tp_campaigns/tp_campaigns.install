<?php

/**
 * Update to check campaign pages with menus
 */
function tp_campaigns_update_7000(&$sandbox) {
  $ret = array();

  // Use the sandbox at your convenience to store the information needed
  // to track progression between successive calls to the function.
  if (!isset($sandbox['progress'])) {
    // The count of nodes visited so far.
    $sandbox['progress'] = 0;
    // Total nodes that must be visited.
    $sandbox['max'] = db_query('SELECT count(*) FROM {node} n
      JOIN {field_data_field_campaign_reference} fdcr ON fdcr.entity_id = n.nid
      JOIN {field_data_field_campaign_menu} fdm ON fdm.entity_id = fdcr.field_campaign_reference_target_id
      WHERE n.status = 1 AND n.type = :type', array(':type' => 'campaign_page'))->fetchField();
    // A place to store messages during the run.
    $sandbox['messages'] = array();
    // Last node read via the query.
    $sandbox['current_node'] = -1;
  }

  // Process nodes by groups of 10 (arbitrary value).
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 10;

  // Retrieve the next group of nids.
  $result = db_query("SELECT n.nid, n.title FROM {node} n
    JOIN {field_data_field_campaign_reference} fdcr ON fdcr.entity_id = n.nid
    JOIN {field_data_field_campaign_menu} fdm ON fdm.entity_id = fdcr.field_campaign_reference_target_id
    WHERE n.status = 1 AND n.type = 'campaign_page' AND n.nid > ".$sandbox['current_node']."
    ORDER BY n.nid ASC
    LIMIT 10");

  foreach ($result as $row) {
    // Here we actually perform a 'update' on the current node.
    $node = node_load($row->nid);
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $node_wrapper->field_show_campaign_menu->set(1);
    $node_wrapper->save();

    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_node'] = $row->nid;
  }

  // Set the "finished" status, to tell batch engine whether this function
  // needs to run again. If you set a float, this will indicate the progress
  // of the batch so the progress bar will update.
  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);

  // Set up a per-run message; Make a copy of $sandbox so we can change it.
  // This is simply a debugging stanza to illustrate how to capture status
  // from each pass through hook_update_N().
  $sandbox_status = $sandbox;
  // Don't want them in the output.
  unset($sandbox_status['messages']);
  $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);

  if ($sandbox['#finished']) {
    // hook_update_N() may optionally return a string which will be displayed
    // to the user.
    $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
    return t('Campaigns with menus have been checked: @message', array('@message' => $final_message));
  }
}
