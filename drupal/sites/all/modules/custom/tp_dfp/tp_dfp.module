<?php
/**
 * @file
 * Google Doubleclick for Publishers integration with TakePart
 *
 */

/**
 * Implements hook_menu()
 */
function tp_dfp_menu(){
  $items = array();

  $items['admin/config/dfp'] = array(
    'title' => t('DFP for TakePart'),
    'description' => t('Backend integration with Google Doubleclick for Publishing'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_dfp_admin_config'),
    'access arguments' => array('access administration pages'),
    'file' => 'tp_dfp.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_entity_presave()
 */
function tp_dfp_entity_presave($entity, $type) {

  // Only run this on sponsored taxonomy terms
  if($type == 'taxonomy_term' && $entity->vocabulary_machine_name == 'sponsor'){
    if(isset($entity->field_dfp_id['und'][0])){

      // Get DFP creatives
      $id = $entity->field_dfp_id['und'][0]['value'];
      $creative = _dfp_get_creative($id);

      // Generate variables array
      //TODO: work with marc on field mapping and values
      $variables = array(
        'sponsored_text' => 'sponsored text value',  // Get from fields in the term
        'headline' => 'headline value',
        'content_type' => 'content type value',
        'destination_url' => 'destination url value',
      );

      if(isset($creative[0])){

        // Update existing creative
        $creativeId = 'test';

        _dfp_update_creative($creativeId, $variables);

      }else{

        // Create the creative
        $creativeName = $entity->name;  // Get from title of term
        $advertiserId = $entity->field_dfp_id['und'][0]['value'];  // Get from field
        $creativeTemplateId = variable_get('dfp_template_id', '10051895');  // Get from admin settings page

        _dfp_create_creative($creativeName, $advertiserId, $creativeTemplateId, $variables);

      }
    }
  }
}

/**
 * Helper function that returns values for creatives
 */
function _dfp_get_creative($id){

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads/Dfp';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    @require_once($googleads_dfp. '/Lib/DfpUser.php');
    @require_once($googleads_dfp. '/Util/v201508/StatementBuilder.php');
  }

  $results = array();

  try {

    // Get DfpUser from credentials
    $user = new DfpUser();

    // Get the CreativeService.
    $creativeService = $user->GetService('CreativeService', v201508);

    // Create a statement to select all creatives.
    $statementBuilder = new StatementBuilder();
    $statementBuilder->Where('ID = :id')
      ->OrderBy('id ASC')
      ->Limit(StatementBuilder::SUGGESTED_PAGE_LIMIT)
      ->WithBindVariableValue('id', $id);

    // Default for total result set size.
    $totalResultSetSize = 0;

    do {
      // Get creatives by statement.
      $page = $creativeService->getCreativesByStatement(
        $statementBuilder->ToStatement());

      // Display results.
      if (isset($page->results)) {
        $totalResultSetSize = $page->totalResultSetSize;
        $i = $page->startIndex;
        foreach ($page->results as $creative) {
          $results[] = array($creative->id, $creative->name);
        }
      }

      $statementBuilder->IncreaseOffsetBy(StatementBuilder::SUGGESTED_PAGE_LIMIT);
    } while ($statementBuilder->GetOffset() < $totalResultSetSize);

  } catch (Exception $e) {
    printf("%s\n", $e->getMessage());
  }

  return $results;
}


/**
 * Helper function to create creative
 */
function _dfp_create_creative($creativeName, $advertiserId, $creativeTemplateId, $variables){

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    require_once($googleads_dfp. '/Dfp/Lib/DfpUser.php');
    require_once($googleads_dfp. '/Common/Util/MediaUtils.php');
  }

  try {
    // Get DfpUser from credentials in "../auth.ini"
    // relative to the DfpUser.php file's directory.
    $user = new DfpUser();

    // Get the CreativeService.
    $creativeService = $user->GetService('CreativeService', 'v201508');

    // Create the local custom creative object.
    $templateCreative = new TemplateCreative();
    $templateCreative->name = $creativeName;
    $templateCreative->advertiserId = $advertiserId;
    $templateCreative->creativeTemplateId = $creativeTemplateId;

    // Set the creative size.
    // Make size static for now
    $templateCreative->size = new Size(300, 250, false);


    // Create the asset variable value.
    $assetVariableValue = new AssetCreativeTemplateVariableValue();
    $assetVariableValue->uniqueName = 'Imagefile';
    $assetVariableValue->assetByteArray = MediaUtils::GetBase64Data(
      'http://www.google.com/intl/en/adwords/select/images/samples/inline.jpg');
    // Filenames must be unique.
    $assetVariableValue->fileName = sprintf('image%s.jpg', uniqid());
    $templateCreative->creativeTemplateVariableValues[] = $assetVariableValue;

    // Create the sponsored text width variable value.
    $sponsoredTextVariableValue = new LongCreativeTemplateVariableValue();
    $sponsoredTextVariableValue->uniqueName = 'SponsoredText';
    $sponsoredTextVariableValue->value = $variables['sponsored_text'];
    $templateCreative->creativeTemplateVariableValues[] =
      $sponsoredTextVariableValue;

    // Create the headline variable value.
    $headlineVariableValue = new LongCreativeTemplateVariableValue();
    $headlineVariableValue->uniqueName = 'Headline';
    $headlineVariableValue->value = $variables['headline'];
    $templateCreative->creativeTemplateVariableValues[] =
      $headlineVariableValue;

    // Create the content type value.
    $contentTypeVariableValue = new UrlCreativeTemplateVariableValue();
    $contentTypeVariableValue->uniqueName = 'ContentType';
    $contentTypeVariableValue->value = $variables['content_type'];
    $templateCreative->creativeTemplateVariableValues[] = $contentTypeVariableValue;

    // Create the destination url variable value.
    $destinationUrlVariableValue = new StringCreativeTemplateVariableValue();
    $destinationUrlVariableValue->uniqueName = 'DestinationUrl';
    $destinationUrlVariableValue->value = $variables['destination_url'];
    $templateCreative->creativeTemplateVariableValues[] =
      $destinationUrlVariableValue;

    // Create the template creative on the server.
    $templateCreatives =
      $creativeService->createCreatives(array($templateCreative));

    foreach ($templateCreatives as $templateCreative) {
      drupal_set_message(t('A template creative with ID @id , type @type and name @name was created and can be previewed at: @preview '),
        array(
          '@id' => $templateCreative->id,
          '@name' => $templateCreative->name,
          '@type' => get_class($templateCreative),
          '@preview' => $templateCreative->previewUrl,

        ), 'success');
    }
  } catch (OAuth2Exception $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (ValidationException $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (Exception $e) {
    printf("%s\n", $e->getMessage());
  }
}

/**
 * Helper function to update creative
 */
function _dfp_update_creative($creativeId, $variables){

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    require_once($googleads_dfp. '/Dfp/Lib/DfpUser.php');
    require_once 'Google/Api/Ads/Dfp/Util/v201508/StatementBuilder.php';
  }

  try {
    // Get DfpUser from credentials in "../auth.ini"
    // relative to the DfpUser.php file's directory.
    $user = new DfpUser();

    // Get the CreativeService.
    $creativeService = $user->GetService('CreativeService', 'v201508');

    // Create a statement to select a single creative by ID.
    $statementBuilder = new StatementBuilder();
    $statementBuilder->Where('id = :id')
      ->OrderBy('id ASC')
      ->Limit(1)
      ->WithBindVariableValue('id', $creativeId);

    // Get the creative.
    $page = $creativeService->getCreativesByStatement(
      $statementBuilder->ToStatement());
    $creative = $page->results[0];

    // TODO: look up 'instanceof'
    if ($creative instanceof HasDestinationUrlCreative) {
      // Update the destination URL of the creative.

      $creative->Imagefile = MediaUtils::GetBase64Data(
        'http://www.google.com/intl/en/adwords/select/images/samples/inline.jpg');
      $creative->SponsoredText = $variables['sponsored_text'];
      $creative->Headline = $variables['headline'];
      $creative->ContentType = $variables['content_type'];
      $creative->DestinationUrl = $variables['destination_url'];

      // Update the creative on the server.
      $creatives = $creativeService->updateCreatives(array($creative));

      foreach ($creatives as $updatedCreative) {
        drupal_set_message(t('Creative with ID @id, and name @name was updated.'),
          array(
            '@id' => $updatedCreative->id,
            '@name' => $updatedCreative->name,

          ),
          'success'
        );
      }
    } else {
      drupal_set_message(t('No creatives were updated.'));
    }
  } catch (OAuth2Exception $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (ValidationException $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (Exception $e) {
    printf("%s\n", $e->getMessage());
  }
}