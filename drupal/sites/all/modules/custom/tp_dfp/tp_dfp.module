<?php
/**
 * @file
 * Google Doubleclick for Publishers integration with TakePart
 *
 */

/**
 * Implements hook_menu()
 */
function tp_dfp_menu(){
  $items = array();

  $items['admin/config/dfp'] = array(
    'title' => t('DFP for TakePart'),
    'description' => t('Backend integration with Google Doubleclick for Publishing'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_dfp_admin_config'),
    'access arguments' => array('access administration pages'),
    'file' => 'tp_dfp.admin.inc'
  );

  return $items;
}

/**
 * Implements hook_node_presave()
 */
function tp_dfp_node_presave($node) {

  // Create or update the creative if node references a Sponsored taxonomy term containing a DFP ID.
  //TODO: this will kill editor workflow... let's create a button on the edit page that will generate the creative instead
  if($node->status) {

    if ($sponsored = field_get_items('node', $node, 'field_sponsored')) {

      $sponsored = taxonomy_term_load($sponsored[0]['tid']);

      if ($ad_id = field_get_items('taxonomy_term', $sponsored, 'field_dfp_id')) {

        // Generate variables array
        $variables = array();
        if($headline = field_get_items('node', $node, 'field_promo_headline')){
          $variables['headline'] = $headline[0]['value'];
        }
        if($image_url = field_get_items('node', $node, 'field_thumbnail')){
          $variables['image_url'] = image_style_url('thumbnail', $image_url[0]['uri']);
        }
        $variables['destination_url'] = drupal_get_path_alias('node/'. $node->nid);
        $variables['icon'] = 'i-something';

        // Get DFP creatives
        $ad_id = $ad_id[0]['value'];
        $creative = _dfp_get_creative($ad_id);
        if (isset($creative[0])) {

          // Update existing creative
          _dfp_update_creative($ad_id, $variables);

        } else {

          // Create the creative
          $creativeName = $node->title;
          $advertiserId = $ad_id;
          $creativeTemplateId = variable_get('dfp_template_id', '10051775');

          _dfp_create_creative($creativeName, $advertiserId, $creativeTemplateId, $variables);

        }

      }
    }
  }
}

/**
 * Helper function that returns values for creatives
 */
function _dfp_get_creative($id){

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads/Dfp';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    @require_once($googleads_dfp. '/Lib/DfpUser.php');
    @require_once($googleads_dfp. '/Util/v201508/StatementBuilder.php');
  }

  $results = array();

  try {

    // Get DfpUser from credentials
    $user = new DfpUser();

    // Get the CreativeService.
    $creativeService = $user->GetService('CreativeService', v201508);

    // Create a statement to select all creatives.
    $statementBuilder = new StatementBuilder();
    $statementBuilder->Where('ID = :id')
      ->OrderBy('id ASC')
      ->Limit(StatementBuilder::SUGGESTED_PAGE_LIMIT)
      ->WithBindVariableValue('id', $id);

    // Default for total result set size.
    $totalResultSetSize = 0;

    do {
      // Get creatives by statement.
      $page = $creativeService->getCreativesByStatement(
        $statementBuilder->ToStatement());

      // Display results.
      if (isset($page->results)) {
        $totalResultSetSize = $page->totalResultSetSize;
        $i = $page->startIndex;
        foreach ($page->results as $creative) {
          $results[] = array($creative->id, $creative->name);
        }
      }

      $statementBuilder->IncreaseOffsetBy(StatementBuilder::SUGGESTED_PAGE_LIMIT);
    } while ($statementBuilder->GetOffset() < $totalResultSetSize);

  } catch (Exception $e) {
    printf("%s\n", $e->getMessage());
  }

  return $results;
}


/**
 * Helper function to create creative
 */
function _dfp_create_creative($creativeName, $advertiserId, $creativeTemplateId, $variables) {

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    require_once($googleads_dfp. '/Dfp/Lib/DfpUser.php');
    require_once($googleads_dfp. '/Common/Util/MediaUtils.php');
  }

  // Get DfpUser from credentials in "../auth.ini"
  // relative to the DfpUser.php file's directory.
  $user = new DfpUser();

  // Get the CreativeService.
  $creativeService = $user->GetService('CreativeService', 'v201508');
  // Use the image banner with optional third party tracking template.

  // Create the local custom creative object.
  $templateCreative = new TemplateCreative();
  $templateCreative->name = $creativeName;
  $templateCreative->advertiserId = $advertiserId;
  $templateCreative->creativeTemplateId = $creativeTemplateId;

  $creativeWidth = (int) variable_get('dfp_template_width', 300);
  $creativeHeight = (int) variable_get('dfp_template_height', 250);
  // Set the creative size.
  $templateCreative->size = new Size($creativeWidth, $creativeHeight, false);

  // Create the Headline variable value.
  $headlineVariableValue = new StringCreativeTemplateVariableValue();
  $headlineVariableValue->uniqueName = 'Headline';
  $headlineVariableValue->value = $variables['headline'];
  $templateCreative->creativeTemplateVariableValues[] =
    $headlineVariableValue;

  // Create the Icon width variable value.
  $iconVariableValue = new StringCreativeTemplateVariableValue();
  $iconVariableValue->uniqueName = 'Icon';
  $iconVariableValue->value = $variables['icon'];
  $templateCreative->creativeTemplateVariableValues[] =
    $iconVariableValue;

  // Create the Destination URL variable value.
  $destinationURLVariableValue = new UrlCreativeTemplateVariableValue();
  $destinationURLVariableValue->uniqueName = 'DestinationURL';
  $destinationURLVariableValue->value = $variables['destination_url'];
  $templateCreative->creativeTemplateVariableValues[] = $destinationURLVariableValue;

  // Create the Image URL variable value.
  $imageURLVariableValue = new UrlCreativeTemplateVariableValue();
  $imageURLVariableValue->uniqueName = 'ImageURL';
  $imageURLVariableValue->value = $variables['image_url'];
  $templateCreative->creativeTemplateVariableValues[] = $imageURLVariableValue;

    // Create the template creative on the server.
    $templateCreatives =
      $creativeService->createCreatives(array($templateCreative));
    foreach ($templateCreatives as $templateCreative) {
      printf("A template creative with ID '%s', name '%s', and type '%s' was "
        . "created and can be previewed at: %s\n", $templateCreative->id,
        $templateCreative->name, get_class($templateCreative),
        $templateCreative->previewUrl);
    }


  dpm($templateCreative->id, 'results: created creative id');
  dpm($templateCreative->name, 'results: created creative name');
  dpm(get_class($templateCreative), 'results: created creative template');
  dpm($templateCreative->previewUrl, 'results: created creative preview');

}

/**
 * Helper function to update creative
 */
function _dfp_update_creative($creativeId, $variables){

  // Find Google's DFP lib.  Otherwise, use libraries API.
  $googleads_lib_path = function_exists('libraries_get_path') ? libraries_get_path('googleads-php-lib') : 'sites/all/libraries/googleads-php-lib';
  $googleads_dfp = $googleads_lib_path. '/src/Google/Api/Ads';

  if ($googleads_dfp) {
    set_include_path(get_include_path() . PATH_SEPARATOR . $googleads_lib_path. '/src');
    require_once($googleads_dfp. '/Dfp/Lib/DfpUser.php');
    require_once 'Google/Api/Ads/Dfp/Util/v201508/StatementBuilder.php';
  }

  try {
    // Get DfpUser from credentials in "../auth.ini"
    // relative to the DfpUser.php file's directory.
    $user = new DfpUser();

    // Get the CreativeService.
    $creativeService = $user->GetService('CreativeService', 'v201508');

    // Create a statement to select a single creative by ID.
    $statementBuilder = new StatementBuilder();
    $statementBuilder->Where('id = :id')
      ->OrderBy('id ASC')
      ->Limit(1)
      ->WithBindVariableValue('id', $creativeId);

    // Get the creative.
    $page = $creativeService->getCreativesByStatement(
      $statementBuilder->ToStatement());
    $creative = $page->results[0];

    // TODO: look up 'instanceof'
    if ($creative instanceof HasDestinationUrlCreative) {
      // Update the destination URL of the creative.

      $creative->Imagefile = MediaUtils::GetBase64Data(
        'http://www.google.com/intl/en/adwords/select/images/samples/inline.jpg');
      $creative->SponsoredText = $variables['sponsored_text'];
      $creative->Headline = $variables['headline'];
      $creative->ContentType = $variables['content_type'];
      $creative->DestinationUrl = $variables['destination_url'];

      // Update the creative on the server.
      $creatives = $creativeService->updateCreatives(array($creative));

      foreach ($creatives as $updatedCreative) {
        drupal_set_message(t('Creative with ID @id, and name @name was updated.'),
          array(
            '@id' => $updatedCreative->id,
            '@name' => $updatedCreative->name,

          ),
          'success'
        );
      }
    } else {
      drupal_set_message(t('No creatives were updated.'));
    }
  } catch (OAuth2Exception $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (ValidationException $e) {
    ExampleUtils::CheckForOAuth2Errors($e);
  } catch (Exception $e) {
    printf("%s\n", $e->getMessage());
  }

  dpm($updatedCreative->name, 'results: updated creative');
}