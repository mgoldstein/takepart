<?php

function tp_theme_support_menu() {

  $items = array();

    $items['admin/config/fresh'] = array(
    'title' => "Fresh Theme Support",
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
    'weight' => -18,
    );

    $items['admin/config/fresh/footer'] = array(
    'title' => 'Footer',
    'description' => 'About Us text block for footer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_theme_support_footer_form'),
    'access callback' => 'user_access',
    'access arguments' => array('tp_theme_support configure settings'),
    'file' => 'tp_theme_support.forms.inc',
    );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tp_theme_support_permission() {
  return array(
    'tp_theme_support configure settings' => array(
    'title' => t('Configure global Theme settings'),
    'description' => t("Configure global settings for TakePart themes."),
    'restrict access' => TRUE,
    ),
  );
}

/**
 *	Implements hook_theme_HOOK().
 */
function tp_theme_support_preprocess_html(&$vars) {
	global $user;
	
	//check if user has the role preview if so then add the class to the page
  if (in_array('preview', $user->roles)) {
    $vars['unpublished'] = false;
    $vars['classes_array'][] = 'node-preview';
  }
}

/**
 *  Implements hook_preprocess_HOOK().
 */
function tp_theme_support_preprocess_page(&$vars, $hook) {
  /**
   *  Autoload articles are handled within the tp_auto_scroll.js file,
   *  whereas all other content will be handled with inline script in the footer
   */
  $node = menu_get_object();

  //check to ensure that this is a node
  if (isset($node->type) && !path_is_admin(current_path())) {
    //node data
    $node_data = _tp_theme_support_reach_node_processor($node);
		$node_data['title'] = str_replace("\\", "\\\\", $node_data['title']);

    //adds a dynamic inline function call to tp_reach_call
    drupal_add_js(
     "jQuery(document).ready(function () {
        window['__reach_config'] = {
          pid: '" . $node_data['pid'] . "',
          title: \"" . $node_data['title'] . "\",
          url: '" . $node_data['url'] . "',
          date: '" . $node_data['date'] . "',
          tags: " . str_replace('\'', '"', '["' . implode('", "', $node_data['tags']) . '"]') . ",
          authors: " . str_replace('\'', '"', '["' . implode('", "', $node_data['authors']) . '"]') . ",
          channels: " . str_replace('\'', '"', '["' . implode('", "', $node_data['channels']) . '"]') . "
        };

        tp_reach_call(__reach_config);
      });"
    ,array(
      'type' => 'inline',
      'scope' => 'footer',
      'weight' => 10
    ));

   /*
    * Show an article without the UNPUBLISHED text and pink background if adding
    * &preview=1 to the url. Do this by auto-logging in the user as TPpreview
    */
  global $user;
  $ispreview = filter_input(INPUT_GET, 'preview', FILTER_SANITIZE_URL);
  if ($ispreview == 1) {
    drupal_session_start();
    $user = user_load_by_name('tppreview'); // load the tppreview user
    // redirect new user to an uncached version of the same page
    drupal_goto(current_path());
  } else if (isset($ispreview) && $ispreview == 0) {
    $user = user_load(0);
    drupal_goto(current_path());
  }

  //adds the library needed to the themes
    drupal_add_js(
      drupal_get_path('module', 'tp_theme_support') . '/js/tp_theme_support.js',
      array(
        'weight' => -10, //to ensure that this js file is before the auto load
        'scope' => 'header'
      )
    );
  }
}

/**
 *  @function:
 *    function is bult to standardize the data for the pid for reach
 */
function _tp_theme_support_reach_pid_handler($action = NULL) {
  switch ($action) {
    default:
      return variable_get('tp_theme_support_reach_pid', '54e612da736b7938011a0000');
      break;
  }
}

/**
 *  @function:
 *    function is used to standardize the data that is used within the reach data
 */
function _tp_theme_support_reach_node_processor($node) {
  //variables
  global $base_url;

  //checks if its a node
  if (is_object($node) && is_numeric($node->nid)) {
    if (!empty($node->field_author)) {
      //does for each author
      foreach ($node->field_author[LANGUAGE_NONE] as $key => $value) {
        $authors[] = $value['nid'];
      };

      //grabs the raw data from the db
      $authors_raw =  db_select('node', 'n')
        ->fields('n', array('title'))
        ->condition('nid', $authors, 'IN')
        ->execute()
        ->fetchAll();

      //process the authors data
      $authors_process = array();
      foreach ($authors_raw as $key => $value) {
        $authors_process[] = $value->title;
      }
    }

    //data that is used for reach
    $node_data = array(
      'pid' => _tp_theme_support_reach_pid_handler(),
      'title' => $node->title,
      'url' => $base_url . url('node/'. $node->nid),
      'tags' => _tp_auto_scroll_node_term_ads($node, 'field_free_tag', TRUE),
      'date' => date('c', $node->published_at),
      'authors' => $authors_process,
      'channels' => _tp_auto_scroll_node_term_ads($node, 'field_topic', TRUE),
    );
		
		//standardize the data and escape
		foreach ($node_data as $key => $value) {
			if (is_string($value)) {
				$value = iconv('UTF-8', 'ASCII//TRANSLIT', $value);	
				$node_data[$key] = str_replace("'", "\\'", $value);
			}
		}

    //return data
    return $node_data;
  }

  //by default return an empty array
  return array();
}

function tp_theme_support_library_alter(&$javascript, $module) {
  // Replace jQuery Form plugin.
  $javascript['jquery.form']['js']['misc/jquery.form.js']['data'] = 'sites/all/modules/contrib/jquery_update/replace/misc/jquery.form.min.js';
  $javascript['jquery.form']['version'] = '2.69';
}