<?php

use \Participant\App;

/* Admin
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_permission().
 */
function pm_jwplatform_permission() {
  return array(
    'configure pm_jwplatform' => array(
      'title' => t('Configure the JW Platform'),
      'description' => t('Configure the API settings for the JW Platform.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 */
function pm_jwplatform_menu() {
  return array(
    'admin/config/media/pm_jwplatform' => array(
      'title' => 'JW Platform',
      'description' => 'Settings for JW Platform hosting and streaming.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('pm_jwplatform_settings_form'),
      'access arguments' => array('configure pm_jwplatform'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'pm_jwplatform.admin.inc',
    ),
  );
}

function pm_jwplatform_get_api() {
  $key = variable_get('pm_jwplatform_api_key', '');
  $secret = variable_get('pm_jwplatform_api_secret', '');
  if (!empty($key) && !empty($secret)) {
    return new \JPedius\BotrAPI($key, $secret);
  }
  return FALSE;
}


/* Cached API data
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_flush_caches().
 */
function pm_jwplatform_flush_caches() {
  return array('cache_pm_jwplatform');
}

/* Media Internet Providers
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_media_internet_providers().
 */
function pm_jwplatform_media_internet_providers() {
  return array(
    'JWPlatformMediaInternetVideoProvider' => array(
      'title' => t('JW Platform Video'),
    ),
    'JWPlatformMediaInternetChannelProvider' => array(
      'title' => t('JW Platform Channel'),
    ),
  );
}

/**
 * Implements hook_stream_wrappers().
 */
function pm_jwplatform_stream_wrappers() {
  return array(
    'jwplatform-video' => array(
      'name' => t('JW Platform videos'),
      'class' => 'JWPlatformVideoStreamWrapper',
      'description' => t('Videos provided by JW Platform.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
    'jwplatform-channel' => array(
      'name' => t('JW Platform channels'),
      'class' => 'JWPlatformChannelStreamWrapper',
      'description' => t('Channels provided by JW Platform.'),
      'type' => STREAM_WRAPPERS_READ_VISIBLE,
    ),
  );
}

/**
 * Implements hook_file_mimetype_mapping_alter().
 */
function pm_jwplatform_file_mimetype_mapping_alter(&$mapping) {
  $mapping['mimetypes'][] = 'video/jwplatform';
}


/* Default Displays
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_ctools_plugin_api().
 */
function pm_jwplatform_ctools_plugin_api($owner, $api) {
  static $api_versions = array(
    'file_entity' => array(
      'file_default_displays' => 1,
    ),
  );
  if (isset($api_versions[$owner][$api])) {
    return array('version' => $api_versions[$owner][$api]);
  }
}

/**
 * Implements hook_file_default_displays().
 */
function pm_jwplatform_file_default_displays() {

  // Default settings for displaying as a video.
  $default_displays = array();

  $default_video_settings = array(
    'default' => array(
      'width' => 640,
      'height' => 390,
    ),
    'teaser' => array(
      'width' => 560,
      'height' => 340,
      'autoplay' => FALSE,
    ),
    // Legacy view modes included to support older versions of Media,
    // before #1051090 went through. They do no harm and can sit here
    // until there is a Media 2.x stable.
    // @TODO: Remove when Media 2.0 is released.
    'media_large' => array(
      'width' => 480,
      'height' => 360,
    ),
    'media_original' => array(
      'width' => 640,
      'height' => 480,
    ),
  );
  foreach ($default_video_settings as $view_mode => $settings) {
    $display_name = 'video__' . $view_mode . '__pm_jwplatform_video';
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 1,
      'settings' => $settings,
    );
  }

  // Default settings for displaying a video preview image.
  // We enable preview images even for view modes that also play video
  // for use inside a running WYSIWYG editor. We weight them so video
  // formatters come first in the cascade to make sure the video formatter
  // is used whenever possible.
  $default_image_styles = array(
    'default' => 'large',
    'preview' => 'square_thumbnail',
    'teaser' => 'large',
    // Legacy view modes, see note above.
    'media_preview' => 'square_thumbnail',
    'media_large' => 'large',
    'media_original' => '',
  );
  foreach ($default_image_styles as $view_mode => $image_style) {
    $display_name = 'video__' . $view_mode . '__pm_jwplatform_image';
    $default_displays[$display_name] = (object) array(
      'api_version' => 1,
      'name' => $display_name,
      'status' => 1,
      'weight' => 2,
      'settings' => array('image_style' => $image_style),
    );
  }

  return $default_displays;
}


/* File Formatters
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_file_formatter_info().
 */
function pm_jwplatform_file_formatter_info() {
  return array(
    'pm_jwplatform_video' => array(
      'label' => t('JW Platform Video'),
      'file types' => array('video'),
      'view callback' => 'pm_jwplatform_file_formatter_video_view',
    ),
    'pm_jwplatform_image' => array(
      'label' => t('JW Platform Preview Image'),
      'file types' => array('video'),
      'default settings' => array(
        'image_style' => '',
      ),
      'view callback' => 'pm_jwplatform_file_formatter_image_view',
      'settings callback' => 'pm_jwplatform_file_formatter_image_settings',
    ),
  );
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function pm_jwplatform_file_formatter_video_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  // WYSIWYG does not yet support video inside a running editor instance.
  $is_jwplatform_content = in_array($scheme, array(
    'jwplatform-video',
    'jwplatform-channel',
  ));
  if ($is_jwplatform_content && empty($file->override['wysiwyg'])) {
    $element = array(
      '#theme' => 'pm_jwplatform_video',
      '#uri' => $file->uri,
      '#options' => array(),
    );
    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 */
function pm_jwplatform_file_formatter_image_view($file, $display, $langcode) {
  $scheme = file_uri_scheme($file->uri);
  $is_jwplatform_content = in_array($scheme, array(
    'jwplatform-video',
    'jwplatform-channel',
  ));
  if ($is_jwplatform_content) {
    $wrapper = file_stream_wrapper_get_instance_by_uri($file->uri);
    $image_style = $display['settings']['image_style'];
    $valid_image_styles = image_style_options(FALSE);
    // @TODO: If autosubmit is removed and we allow view modes that insert
    // images in the WYSIWYG, add file->overrides handling.
    $alt = isset($file->override['attributes']['alt'])
      ? $file->override['attributes']['alt'] : $file->filename;
    $thumbnail = $wrapper->getLocalThumbnailPath();
    if (empty($thumbnail)) {
      $default_base = drupal_get_path('module', 'media') . '/images/icons';
      $element = array(
        '#theme' => 'image',
        '#path' => variable_get('media__icon_base_directory', $default_base) . '/'
          . variable_get('media__icon_set', 'default') . '/video-x-generic.png',
        '#alt' => $alt,
      );
    }
    elseif (empty($image_style) || !isset($valid_image_styles[$image_style])) {
      $element = array(
        '#theme' => 'image',
        '#path' => file_create_url($thumbnail),
        '#alt' => $alt,
      );
    }
    else {
      $element = array(
        '#theme' => 'image_style',
        '#style_name' => $image_style,
        '#path' => $thumbnail,
        '#alt' => $alt,
      );
    }

    return $element;
  }
}

/**
 * Implements hook_file_formatter_FORMATTER_settings().
 */
function pm_jwplatform_file_formatter_image_settings($form, &$form_state, $settings) {
  $element = array();
  $element['image_style'] = array(
    '#title' => t('Image style'),
    '#type' => 'select',
    '#options' => image_style_options(FALSE),
    '#default_value' => $settings['image_style'],
    '#empty_option' => t('None (original image)'),
  );
  return $element;
}


/* Theming
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
/**
 * Implements hook_theme().
 */
function pm_jwplatform_theme() {
  return array(
    'pm_jwplatform_video' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Implements theme_hook().
 */
function theme_pm_jwplatform_video($variables) {
  $wrapper = file_stream_wrapper_get_instance_by_uri($variables['element']["#uri"]);
  return '<script type="text/javascript" src="' . $wrapper->getJavaScriptUrl() . '"></script>';
}


/* Auto Import JW Platform Videos
 *=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
class VideoNodeBuilder {

  public function __construct($title) {
    $this->_node = $this->createNode($title);
  }

  protected function createNode($title) {
    $node = new StdClass();
    $node->title = $title;
    $node->type = 'video';
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    return $node;
  }

  protected static function createTaxonomyTerm($vocabulary_name, $name) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = new StdClass();
    $term->vid = $vocabulary->vid;
    $term->name = $name;
    $term->vocabulary_machine_name = $vocabulary_name;
    taxonomy_term_save($term);
    return $term;
  }

  protected static function loadTopicTerms($names) {
    $terms = array();
    foreach ($names as $name) {
      $name = trim($name);
      $list = taxonomy_get_term_by_name($name, 'topic');
      if (!empty($list)) {
        $terms[] = reset($list);
      }
    }
    return $terms;
  }

  protected static function loadSeriesTerm($name) {
    $term = NULL;
    $list = taxonomy_get_term_by_name($name, 'series');
    if (!empty($list)) {
      $term = reset($list);
    }
    return $term;
  }

  protected static function loadTopicBoxTerm($name) {
    $term = NULL;
    $list = taxonomy_get_term_by_name($name, 'topic_box');
    if (!empty($list)) {
      $term = reset($list);
    }
    return $term;
  }

  protected static function loadFreeTagTerms($names) {
    $terms = array();
    foreach ($names as $name) {
      $name = trim($name);
      $list = taxonomy_get_term_by_name($name, 'free_tags');
      if (!empty($list)) {
        $terms[] = reset($list);
      }
      else {
        $terms[] = self::createTaxonomyTerm('free_tags', $name);
      }
    }
    return $terms;
  }

  protected static function loadAdminTagTerms($names) {
    $terms = array();
    foreach ($names as $name) {
      $name = trim($name);
      $list = taxonomy_get_term_by_name($name, 'admin_tag');
      if (!empty($list)) {
        $terms[] = reset($list);
      }
      else {
        $terms[] = self::createTaxonomyTerm('admin_tag', $name);
      }
    }
    return $terms;
  }

  protected static function taxonomyFieldValue($terms, $language) {
    $value = array($language => array());
    foreach ($terms as $term) {
      $value[$language][] = array(
        'tid' => $term->tid,
      );
    }
    return $value;
  }

  protected static function textFieldValue($text, $language, $format = NULL) {
    $value = array($language => array());
    $value[$language][] = array(
      'value' => $text,
      'format' => $format,
    );
    return $value;
  }

  protected static function createMediaFile($url) {

    // Break the URL into parts.
    $url_parts = parse_url($url);
    $path_parts = pathinfo($url_parts['path']);

    // Prepare local storage
    $local_path = 'public://jwplatform-import/images/' . $path_parts['basename'];

    $dirname = drupal_dirname($local_path);
    if (file_prepare_directory($dirname, FILE_CREATE_DIRECTORY)) {

      // Copy down and save the image.
      $response = drupal_http_request($url);
      if (!isset($response->error) && !empty($response->data)) {
        $normalized = file_stream_wrapper_uri_normalize($local_path);
        $file = file_save_data($response->data, $normalized, FILE_EXISTS_RENAME);
        return $file;
      }
    }
    return FALSE;
  }

  protected static function mediaImageFieldValue($fid, $language) {
    return array($language => array(array(
      'fid' => $fid,
      'title' => NULL,
      'data' => NULL,
    )));
  }

  protected static function mediaVideoFieldValue($fid, $language) {
    return array($language => array(array(
      'fid' => $fid,
      'display' => 1,
      'description' => NULL,
    )));
  }

  public function setPublished($published) {
    $this->_node->status = $published ? 1 : 0;
  }

  public function setVideoKey($video_key) {
    try {
      $provider = media_internet_get_provider($video_key);
      $file = $provider->save();
      $this->_node->field_video = self::mediaVideoFieldValue(
        $file->fid, $this->_node->language);
    } catch (Exception $e) {}
  }

  public function setPromoHeadline($headline) {
    $this->_node->field_promo_headline = self::textFieldValue(
      $headline, $this->_node->language);
  }

  public function setThumbnail($thumbnail_uri) {
    $file = self::createMediaFile($thumbnail_uri);
    if ($file !== FALSE) {
      $this->_node->field_thumbnail = self::mediaImageFieldValue(
        $file->fid, $this->_node->language);
    }
  }

  public function setFreeTags($free_tags) {
    $terms = self::loadFreeTagTerms($free_tags);
    $this->_node->field_free_tag = self::taxonomyFieldValue($terms,
      $this->_node->language);
  }

  public function setAdminTags($admin_tags) {
    $terms = self::loadAdminTagTerms($admin_tags);
    $this->_node->field_admin_tag = self::taxonomyFieldValue($terms,
      $this->_node->language);
  }

  public function setSubhead($subhead) {
    $this->_node->field_article_subhead = self::textFieldValue(
      $subhead, $this->_node->language);
  }

  public function setShortHeadline($shorthead_line) {
    $this->_node->field_promo_short_headline = self::textFieldValue(
      $shorthead_line, $this->_node->language);
  }

  public function setTopics($topics) {
    $terms = self::loadTopicTerms($topics);
    $this->_node->field_topic = self::taxonomyFieldValue($terms,
      $this->_node->language);
  }

  public function setSeries($series) {
    $term = self::loadSeriesTerm($series);
    if (!is_null($term)) {
      $this->_node->field_series = self::taxonomyFieldValue(array($term),
        $this->_node->language);
    }
  }

  public function setTopicBox($topic_box) {
    $term = self::loadTopicBoxTerm($topic_box);
    if (!is_null($term)) {
      $this->_node->field_topic_box = self::taxonomyFieldValue(array($term),
        $this->_node->language);
    }
  }

  public function save() {
    if ($this->_node !== FALSE) {
      //$this->_node->path = array('pathauto' => FALSE);
      $this->_node->uid = 1;
      $node = node_submit($this->_node);
      node_save($node);
      return $node->nid;
    }
    return FALSE;
  }
}

function pm_jwplatform_botr_api() {
  static $api = NULL;
  if (is_null($api)) {
    $api = pm_jwplatform_get_api();
  }
  return $api;
}

function pm_jwplatform_get_new_video_keys_from_botr() {

  $auto_create_tag = variable_get('pm_jwplatform_auto_create_tag', 'Admin: TP Auto');

  $result =   pm_jwplatform_botr_api()->call('/videos/list', array(
    'result_limit' => 1000,
    'tags' => $auto_create_tag,
    'order_by' => 'date:desc',
  ));

  $video_keys = array();
  if ($result['status'] == 'ok') {
    foreach ($result['videos'] as $video) {
      $video_keys[] = $video['key'];
    }
  }

  return $video_keys;
}

function pm_jwplatform_create_import_requests() {

  $new_keys = pm_jwplatform_get_new_video_keys_from_botr();

  if (count($new_keys) > 0) {

    $repo = App::repo('Participant\Entities\Video\NodeImport');

    $existing_keys = array();
    foreach($repo->getExistingImports($new_keys) as $node_import) {
      $existing_keys[] = $node_import->getVideoKey();
    }

    $keys_to_add = array_diff($new_keys, $existing_keys);
    if (count($keys_to_add) > 0) {
      foreach ($keys_to_add as $key) {
        $import_request = new \Participant\Entities\Video\NodeImport();
        $import_request->setVideoKey($key);
        $import_request->setCreatedAt(REQUEST_TIME);
        App::db()->persist($import_request);
      }
      App::db()->flush();
    }
  }
}

function pm_jwplatform_get_video_thumbnail_ready_from_botr($key) {

  $result = pm_jwplatform_botr_api()->call('/videos/thumbnails/show', array(
    'video_key' => $key,
  ));

  if ($result['status'] == 'ok') {
    return $result['thumbnail']['status'] == 'ready';
  }

  return FALSE;
}

function pm_jwplatform_get_video_fields_from_botr($key) {

  $result = pm_jwplatform_botr_api()->call('/videos/show', array(
    'video_key' => $key,
  ));

  if ($result['status'] == 'ok') {

    $video = $result['video'];

    $tags = array_map('trim', explode(',', $video['tags']));

    $free_tags = array();
    $admin_tags = array();

    foreach ($tags as $tag) {
      $matches = array();
      if (preg_match('/^Admin:(.*)/', $tag, $matches)) {
        $admin_tags[] = trim($matches[1]);
      }
      else {
        $free_tags[] = trim($tag);
      }
    }

    $fields = array(
      'key' => $video['key'],
      'title' => $video['title'],
      'thumbnail' => "http://assets-jp.jwpsrv.com/thumbs/{$key}-320.jpg",
      'free_tags' => $free_tags,
      'admin_tags' => $admin_tags,
    );

    foreach ($video['custom'] as $key => $value) {
      $ci_key = strtolower($key);
      if ($ci_key == 'topics') {
        $fields[$ci_key] = array_map('trim', explode(',', $value));
      }
      else {
        $fields[$ci_key] = $value;
      }
    }

    return $fields;
  }

  return FALSE;
}

function pm_jwplatform_create_video_node($fields) {

  $builder = new VideoNodeBuilder($fields['title']);

  if (in_array('Publish', $fields['admin_tags'])) {
    $builder->setPublished(TRUE);
  }

  $builder->setVideoKey($fields['key']);

  $builder->setPromoHeadline($fields['title']);

  $builder->setThumbnail($fields['thumbnail']);

  $builder->setFreeTags($fields['free_tags']);

  $builder->setAdminTags($fields['admin_tags']);

  if (isset($fields['subhead'])) {
    $builder->setSubhead($fields['subhead']);
  }

  if (isset($fields['shortheadline'])) {
    $builder->setShortHeadline($fields['shortheadline']);
  }

  if (isset($fields['topics'])) {
    $builder->setTopics($fields['topics']);
  }

  if (isset($fields['series'])) {
    $builder->setSeries($fields['series']);
  }

  if (isset($fields['topicbox'])) {
    $builder->setTopicBox($fields['topicbox']);
  }

  return $builder->save();
}

function pm_jwplatform_process_import_requests() {

  // Get a list of pending video imports.
  $repo = App::repo('Participant\Entities\Video\NodeImport');
  $pending_imports = $repo->getPendingImports();

  foreach ($pending_imports as $import) {

    $video_key = $import->getVideoKey();

    // Get the thumbnail first as it may take some time to generate.
    if (pm_jwplatform_get_video_thumbnail_ready_from_botr($video_key)) {

      // Get the additional field data for the video node.
      $fields = pm_jwplatform_get_video_fields_from_botr($video_key);
      if ($fields !== FALSE) {

        // Create the video node.
        if (pm_jwplatform_create_video_node($fields)) {
          $import->setImportedAt(REQUEST_TIME);
          App::db()->flush();
        }
      }
    }
  }
}

function pm_jwplatform_import_videos() {
  pm_jwplatform_create_import_requests();
  pm_jwplatform_process_import_requests();
}
