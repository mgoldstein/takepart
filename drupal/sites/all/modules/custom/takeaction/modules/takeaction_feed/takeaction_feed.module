<?php
/**
 * @file
 * TakeAction Button Action Feed Module
 */

/**
 * Implements hook_help().
 */
function takeaction_feed_help($path, $arg) {
  $output = '';
  if ($path == 'admin/help#takeaction_feed') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The TakeAction Button Feed module provides a JSON feed
      of action items on the TakePart site for consumption by the TakeAction
      Button system.') . '</p>';
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function takeaction_feed_menu() {
  return array(
    'takeaction/feeds/actions' => array(
      'page callback' => 'takeaction_feed_actions_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
  );
}

/**
 * Actions feed callback.
 */
function takeaction_feed_actions_callback() {
  $actions = db_select('takeaction_feed_actions', 'a')
    ->fields('a', array('nid', 'data'))
    ->execute();
  $items = array();
  while ($action = $actions->fetchAssoc()) {
    $items[] = unserialize($action['data']);
  }
  return drupal_json_output($items);
}

/**
 * Implements hook_node_insert().
 */
function takeaction_feed_node_insert($node) {
  takeaction_feed_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function takeaction_feed_node_update($node) {
  if ($node->status) {
    // Only published actions should be in the feed.
    $data = takeaction_feed_action_item_data($node);
    if ($data !== FALSE) {
      $timestamp = time();
      db_merge('takeaction_feed_actions')
        ->key(array(
          'nid' => $node->nid,
        ))
        ->insertFields(array(
          'nid' => $node->nid,
          'created' => $timestamp,
          'changed' => $timestamp,
          'data' => serialize($data),
        ))
        ->updateFields(array(
          'changed' => $timestamp,
          'data' => serialize($data),
        ))
        ->execute();
    }
  }
  else {
    // Remove unpublished actions from the feed.
    db_delete('takeaction_feed_actions')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function takeaction_feed_node_delete($node) {
  // Delete the action item for the node.
  db_delete('takeaction_feed_actions')
    ->condition('nid', $node->nid, '=')
    ->execute();
}

/**
 * Helper function for translating a text field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the text.
 *
 * @return string
 *   The text of the field stripped of all HTML markup.
 */
function _takeaction_feed_text_value($node, $field) {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    return strip_tags($first['value']);
  }
  return '';
}

/**
 * Helper function for translating a group reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the group reference.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the group.
 *   description - A description of the group.
 *   thumbnail - The absolute URL to the group thumbnail image.
 */
function _takeaction_feed_group_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $groups = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $groups[] = array(
        'title' => $item['title'],
        'description' => '',
        'thumbnail' => '',
      );
    }
  }
  return $groups;
}

/**
 * Helper function for translating a link field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the link.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the link.
 *   url - The absolute URL of the link.
 */
function _takeaction_feed_link_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $links = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $links[] = array(
        'title' => $item['title'],
        'url' => $items['url'],
      );
    }
  }
  return $links;
}

/**
 * Helper function for translating a media asset field to a URL.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The absolute URL of the media asset.
 */
function _takeaction_feed_media_url($node, $field) {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    $file = file_load($first['fid']);
    return file_create_url($file->uri);
  }
  return '';
}

/**
 * Helper function for translating a term reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The terms in the field as a comma separated list of values.
 */
function _takeaction_feed_term_list($node, $field) {
  // Extract the term ids.
  $tids = array();
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $tids[] = $item['tid'];
    }
  }
  // Load and implode the terms.
  $terms = taxonomy_term_load_multiple($tids);
  return taxonomy_implode_tags($terms);
}

/**
 * Function for creating an action feed item data set.
 */
function takeaction_feed_action_item_data($node) {
  $action_types = array(
    'action',
    'petition_action',
    'pledge_action',
  );
  if (in_array($node->type, $action_types)) {

    if ($node->type === 'pledge_action') {
      $aggregate_body = _takeaction_feed_text_value($node,
        'field_pledge_issue');
      $aggregate_body .= _takeaction_feed_text_value($node,
        'field_pledge_action_long');
      $aggregate_body .= _takeaction_feed_text_value($node, 'body');
    }
    elseif ($node->type === 'petition_action') {
      $aggregate_body = _takeaction_feed_text_value($node, 'body');
      $aggregate_body .= _takeaction_feed_text_value($node,
        'field_petition_about');
    }
    else {
      $aggregate_body = _takeaction_feed_text_value($node, 'body');
    }

    if ($node->type === 'pledge_action' || $node->type === 'petition_action') {
      $settings = entity_load_single('signature_node', $node->nid);
      $action_goal = $settings->goal;
      if ($settings->limit_to_dates) {
        $date_range = array(
          'limited' => 'true',
          'startDate' => $settings->start_date,
          'endDate' => $settings->end_date,
        );
      }
      else {
        $action_goal = 0;
        $date_range = array(
          'limited' => 'false',
          'startDate' => 0,
          'endDate' => 0,
        );
      }
    }

    $external_tab = FALSE;
    $priority = 0;

    return array(
      'id' => $node->nid,
      'internalTitle' => _takeaction_feed_text_value($node,
        'field_promo_headline'),
      'externalTitle' => _takeaction_feed_text_value($node,
        'field_promo_headline'),
      'publishedDate' => $node->created,
      'updatedDate' => $node->changed,
      'internalDescription' => $aggregate_body,
      'externalDescription' => $aggregate_body,
      'callToAction' => _takeaction_feed_text_value($node,
        'field_action_button_text'),
      'pageUrl' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'thumbnailUrl' => _takeaction_feed_media_url($node,
        'field_action_main_image'),
      'type' => _takeaction_feed_term_list($node, 'field_action_type'),
      'externalTAB' => $external_tab,
      'sponsors' => _takeaction_feed_group_list($node, 'field_action_sponsors'),
      'organizations' => _takeaction_feed_group_list($node,
        'field_action_organization'),
      'topic' => _takeaction_feed_term_list($node, 'field_topic'),
      'freeTag' => _takeaction_feed_term_list($node, 'field_free_tag'),
      'actionCopy' => $aggregate_body,
      'contentLinks' => _takeaction_feed_link_list($node,
        'field_content_links'),
      'updateText' => '',
      'actionGoal' => $action_goal,
      'dateRange' => $date_range,
      'priority' => $priority,
    );
  }
  return FALSE;
}
