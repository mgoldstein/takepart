<?php
/**
 * @file
 * TakeAction Button Action Feed Module.
 */

/**
 * Implements hook_help().
 */
function takeaction_feed_help($path, $arg) {
  $output = '';
  if ($path == 'admin/help#takeaction_feed') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The TakeAction Button Feed module provides a JSON feed
      of action items on the TakePart site for consumption by the TakeAction
      Button system.') . '</p>';
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function takeaction_feed_menu() {
  return array(
    'takeaction/feeds/actions' => array(
      'page callback' => 'takeaction_feed_actions_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'admin/config/takeaction/feeds' => array(
      'title' => 'TakeAction Button Feed Settings',
      'description' => 'Settings for TakeAction Button feeds',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('takeaction_feed_admin_form'),
      'access callback' => 'user_access',
      'access arguments' => array('takeaction configure settings'),
    ),
  );
}

/**
 * Actions feed callback.
 */
function takeaction_feed_actions_callback() {
  $query = db_select('takeaction_feed_actions', 'a')
    ->fields('a', array('nid', 'data'));
  if (variable_get('takeaction_feed_filter_unpublished', 1)) {
    $query = $query->condition('a.published', 0, '!=');
  }
  if (variable_get('takeaction_feed_filter_takepart_only', 1)) {
    $query = $query->condition('a.takepart_only', 0, '=');
  }
  $actions = $query->execute();
  $items = array();
  while ($action = $actions->fetchAssoc()) {
    $items[] = unserialize($action['data']);
  }
  return drupal_json_output($items);
}

/**
 * Admin form callback.
 */
function takeaction_feed_admin_form($form, &$form_state) {

  $form['takeaction_feed_content_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Content domain'),
    '#description' => t('The domain to use in all action URLs'),
    '#default_value' => variable_get('takeaction_feed_content_domain', ''),
    '#required' => TRUE,
  );

  $form['takeaction_feed_filter_unpublished'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude unpublished actions'),
    '#description' => t('Exclude unpublished actions from the actions feed'),
    '#default_value' => variable_get('takeaction_feed_filter_unpublished', 1),
  );

  $form['takeaction_feed_filter_takepart_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude TakePart.com only actions'),
    '#description' => t('Exclude actions that are not marked as TAB actions from the actions feed'),
    '#default_value' => variable_get('takeaction_feed_filter_takepart_only', 1),
  );

  $form['actions']['takeaction_feed_rebuild_actions'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Actions Feed'),
    '#submit' => array('takeaction_feed_admin_form_submit_rebuild'),
  );

  return system_settings_form($form);
}

/**
 * Admin form rebuild feed submit callback.
 */
function takeaction_feed_admin_form_submit_rebuild($form, $form_state) {
  $counts = array(
    'mos_action' => 0,
    'action' => 0,
    'petition_action' => 0,
    'pledge_action' => 0,
  );
  db_delete('takeaction_feed_actions');
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'type'))
    ->condition('n.type', array_keys($counts), 'IN')
    ->execute()
    ->fetchAllKeyed();
  foreach ($nodes as $nid => $type) {
    $node = node_load($nid);
    takeaction_feed_entity_update($node, 'node');
    $counts[$type] += 1;
  }
  $message = t('!total action items rebuilt', array(
    '!total' => array_sum($counts),
  ));
  drupal_set_message($message);
}

/**
 * Implements hook_entity_insert().
 */
function takeaction_feed_entity_insert($entity, $type) {
  takeaction_feed_entity_update($entity, $type);
}

/**
 * Implements hook_entity_update().
 */
function takeaction_feed_entity_update($entity, $type) {

  $data = FALSE;
  if ($type === 'followup') {
    $node = node_load($entity->nid);
    if ($node !== FALSE) {
      $data = takeaction_feed_action_item_data($node);
    }
  }
  elseif ($type === 'node') {
    $node = $entity;
    $data = takeaction_feed_action_item_data($entity);
  }
  else {
    return;
  }

  if ($data !== FALSE) {
    $timestamp = time();
    $tab_action = _takeaction_feed_field_value($node, 'field_tab_action', '0');
    db_merge('takeaction_feed_actions')
      ->key(array(
        'nid' => $node->nid,
      ))
      ->insertFields(array(
        'nid' => $node->nid,
        'created' => $timestamp,
        'changed' => $timestamp,
        'published' => $node->status,
        'takepart_only' => empty($tab_action) ? 1 : 0,
        'data' => serialize($data),
      ))
      ->updateFields(array(
        'changed' => $timestamp,
        'published' => $node->status,
        'takepart_only' => empty($tab_action) ? 1 : 0,
        'data' => serialize($data),
      ))
      ->execute();
  }
  else {
    db_delete('takeaction_feed_actions')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }
}

/**
 * Implements hook_entity_delete().
 */
function takeaction_feed_entity_delete($entity, $type) {
  if ($type === 'followup') {
    // Update the action item for the followup's node.
    $node = node_load($entity->nid);
    if ($node !== FALSE) {
      takeaction_feed_entity_update('node', $node);
    }
  }
  elseif ($type === 'node') {
    // Delete the action item for the node.
    db_delete('takeaction_feed_actions')
      ->condition('nid', $entity->nid, '=')
      ->execute();
  }
}

/**
 * Helper function for getting the first value of a field.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param object $entity
 *   The entity to which the field is attached.
 * @param string $field
 *   The name of the field.
 */
function _takeaction_feed_field_get_item($entity_type, $entity, $field) {
  $items = field_get_items($entity_type, $entity, $field);
  if ($items !== FALSE) {
    return reset($items);
  }
  return FALSE;
}

/**
 * Helper function for translating a field with a 'value' into a single string.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the value.
 * @param string $default
 *   The default value to return if the field has not been set on the action.
 *
 * @return string
 *   The text of the field stripped of all HTML markup.
 */
function _takeaction_feed_field_value($node, $field, $default = '') {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    return strip_tags($first['value']);
  }
  return $default;
}

/**
 * Helper function for translating the update text into a list of values.
 *
 * @param object $node
 *   The node to which the updates are connected.
 *
 * @return array
 *   An array of the update text values stripped of all HTML markup.
 */
function _takeaction_feed_update_text_list($node, &$last_updated) {

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'followup')
    ->propertyCondition('type', 'content_link')
    ->propertyCondition('nid', $node->nid)
    ->execute();

  $values = array();
  if (!empty($result['followup'])) {
    $updates = entity_load('followup', array_keys($result['followup']));
    foreach ($updates as $id => $update) {

      if ($update->changed > $last_updated) {
        $last_updated = $update->changed;
      }

      $text_item = _takeaction_feed_field_get_item('followup', $update,
        'field_tab_update_text');
      $link_items = field_get_items('followup', $update,
        'field_tab_content_link');
      $timestamp_item = _takeaction_feed_field_get_item('followup', $update,
        'field_tab_update_timestamp');

      if ($timestamp_item !== FALSE) {
        $value = array(
          'title' => $update->title,
          'timestamp' => $timestamp_item['value'],
        );
        if ($text_item !== FALSE) {
          $value['text'] = strip_tags($text_item['value']);
        }
        if ($link_items !== FALSE) {
          $value['contentLinks'] = array();
          foreach ($link_items as $delta => $link_item) {
            $value['contentLinks'][] = array(
              'title' => $link_item['title'],
              'url' => $link_item['url'],
            );
          }
        }
        $values[] = $value;
      }
    }
  }
  return $values;
}

/**
 * Helper function for translating a group reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the group reference.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the group.
 *   description - A description of the group.
 *   thumbnail - The absolute URL to the group thumbnail image.
 */
function _takeaction_feed_group_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $groups = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $groups[] = array(
        'title' => $item['title'],
        'description' => '',
        'thumbnail' => '',
      );
    }
  }
  return $groups;
}

/**
 * Helper function for translating the content links into a list of links.
 *
 * @param object $node
 *   The node to which the content links are attached.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the link.
 *   url - The absolute URL of the link.
 */
function _takeaction_feed_content_link_list($node) {

  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'followup')
    ->propertyCondition('type', 'content_link')
    ->propertyCondition('nid', $node->nid)
    ->execute();

  $links = array();
  if (!empty($result['followup'])) {

    $updates = entity_load('followup', array_keys($result['followup']));
    foreach ($updates as $id => $update) {

      $link_item = _takeaction_feed_field_get_item('followup', $update,
        'field_tab_content_link');
      $timestamp_item = _takeaction_feed_field_get_item('followup', $update,
        'field_tab_update_timestamp');

      if ($link_item !== FALSE && $timestamp_item !== FALSE) {
        $links[] = array(
          'title' => $link_item['title'],
          'url' => $link_item['url'],
          'timestamp' => $timestamp_item['value'],
        );
      }
    }
  }
  return $links;
}

function _takeaction_feed_build_url($pieces) {
  $url = '';
  if ($pieces['scheme']) {
    $url = $pieces['scheme'] . ':';
  }
  $url .= '//';
  if (isset($pieces['user'])) {
    $url .= $pieces['user'];
    if (isset($pieces['pass'])) {
      $url .= ':' . $pieces['pass'];
    }
    $url .= '@';
  }
  if (isset($pieces['host'])) {
    $url .= $pieces['host'];
  }
  if (isset($pieces['path'])) {
    $url .= $pieces['path'];
  }
  if (isset($pieces['query'])) {
    $url .= '?' . $pieces['query'];
  }
  if (isset($pieces['fragment'])) {
    $url .= '#' . $pieces['fragment'];
  }
  return $url;
}

/**
 * Rebuild a URL for the configurable TakePart content domain.
 */
function _takeaction_feed_update_domain($url, $force = FALSE) {
  $new_domain = variable_get('takeaction_feed_content_domain', NULL);
  if (!empty($new_domain)) {
    $pieces = parse_url($url);
    $is_domain = strpos($pieces['host'], '.');
    $is_takepart = substr_compare($pieces['host'], 'takepart.com', -12, 12);
    $is_action_center = substr_compare($pieces['host'], 'actioncenter.takepart.com', -25, 25);
    if ($force || $is_domain === FALSE || $is_takepart === 0) {
      if ($is_action_center !== 0) {
        $pieces['host'] = $new_domain;
        $url = _takeaction_feed_build_url($pieces);
      }
    }
  }
  return $url;
}

/**
 * Helper function for translating a media asset field to a URL.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The absolute URL of the media asset.
 */
function _takeaction_feed_media_url($node, $field) {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    $file = file_load($first['fid']);
    $url = file_create_url($file->uri);
    return _takeaction_feed_update_domain($url);
  }
  return '';
}

/**
 * Helper function for translating a term reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The terms in the field as a comma separated list of values.
 */
function _takeaction_feed_term_list($node, $field) {
  // Extract the term ids.
  $tids = array();
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $tids[] = $item['tid'];
    }
  }
  // Load and implode the terms.
  // use entity_load with cache reset option instead of taxonomy_term_load_multiple because of issue with static cache and entitycache module
  $terms = entity_load('taxonomy_term', $tids, array(), TRUE);
  return taxonomy_implode_tags($terms);
}

/**
 * Helper function for translating the action page URL.
 *
 * @param object $node
 *   The action node.
 *
 * @return string
 *   The URL of the action page.
 */
function _takeaction_feed_page_url($node) {
  $page_url = url('node/' . $node->nid, array('absolute' => TRUE));
  if ($node->type == 'action') {
    $tab_action = _takeaction_feed_field_get_item('node', $node, 'field_tab_action');
    $link_only = _takeaction_feed_field_get_item('node', $node, 'field_tab_link_only');
    $action = _takeaction_feed_field_get_item('node', $node, 'field_action_url');
    if ($tab_action !== FALSE && $link_only !== FALSE && $action !== FALSE) {
      if ($tab_action['value'] && $link_only['value']) {
        $page_url = $action['url'];
      }
    }
  }
  return _takeaction_feed_update_domain($page_url);
}

function _takeaction_feed_facebook_comment_settings($node) {
  $settings = db_select('facebook_comments', 'f')
    ->fields('f', array('enabled', 'amount'))
    ->condition('f.nid', $node->nid, '=')
    ->execute()
    ->fetchObject();
  if ($settings) {
    return array(
      'enabled' => $settings->enabled,
      'amount' => $settings->amount,
    );
  }
  return NULL;
}

/**
 * Function for creating an action feed item data set.
 */
function takeaction_feed_action_item_data($node) {
  $action_types = array(
    'mos_action',
    'action',
    'petition_action',
    'pledge_action',
  );
  if (in_array($node->type, $action_types)) {

    // Get the internal title.
    $internal_title = _takeaction_feed_field_value($node,
      'field_tab_internal_title');
    if (strlen(trim($internal_title)) === 0) {
      // Use the promo headline instead.
      $internal_title = _takeaction_feed_field_value($node,
        'field_promo_headline');
      if (strlen(trim($internal_title)) === 0) {
        // Use the internal Drupal title instead.
        $internal_title = empty($node->title) ? '' : $node->title;
      }
    }

    // Get the external title.
    $external_title = _takeaction_feed_field_value($node,
      'field_tab_external_title');
    if (strlen(trim($external_title)) === 0) {
      // Use the internal title instead.
      $external_title = $internal_title;
    }

    $thumbnail_url = _takeaction_feed_media_url($node,
      'field_action_main_image');
    if (strlen(trim($thumbnail_url)) === 0) {
      // Use the promo thumbnail instead.
      $thumbnail_url = _takeaction_feed_media_url($node,
        'field_thumbnail');
    }

    // The actionCopy value is an aggregate of the fields that make up the
    // 'body' of the action.
    if ($node->type === 'pledge_action') {
      // For pledges uses the issue field, what you can do field and the
      // pledge statement (body) field.
      $aggregate_body = _takeaction_feed_field_value($node,
        'field_pledge_issue');
      $aggregate_body .= _takeaction_feed_field_value($node,
        'field_pledge_action_long');
      $aggregate_body .= _takeaction_feed_field_value($node, 'body');
    }
    elseif ($node->type === 'petition_action') {
      // For petitions use the short introduction (body) field and the about
      // the petition field.
      $aggregate_body = _takeaction_feed_field_value($node, 'body');
      $aggregate_body .= _takeaction_feed_field_value($node,
        'field_petition_about');
    }
    else {
      // For simple actions use the body field.
      $aggregate_body = _takeaction_feed_field_value($node, 'body');
    }

    // Get the action goal and date range (if available). Also get the action
    // button text to use as a default if the TAB call to action field is
    // empty.
    if ($node->type === 'pledge_action' || $node->type === 'petition_action') {
      // For petitions and pledges the fields are stored in the signature
      // settings.
      $settings = entity_load_single('signature_node', $node->nid);
      $button_text = $settings->sign_label;
      $action_goal = $settings->goal;
      if ($settings->limit_to_dates) {
        $date_range = array(
          'limited' => 'true',
          'startDate' => $settings->start_date,
          'endDate' => $settings->end_date,
        );
      }
      else {
        $date_range = array(
          'limited' => 'false',
          'startDate' => 0,
          'endDate' => 0,
        );
      }
    }
    else {
      // For simple actions use empty defaults.
      $button_text = '';
      $action_goal = 0;
      $date_range = array(
        'limited' => 'false',
        'startDate' => 0,
        'endDate' => 0,
      );
    }

    // Get the optional call to action, use the signature button text as a
    // default if the call to action is empty.
    $call_to_action = _takeaction_feed_field_value($node,
      'field_tab_call_to_action');
    if (strlen(trim($external_title)) === 0) {
      $call_to_action = $button_text;
    }

    $last_updated = $node->changed;
    $update_text = _takeaction_feed_update_text_list($node, $last_updated);


    // Build a JSON object of the action
    $action_json = takeaction_feed_build_node_json($node);
    // Sanitize the data, because seriously man TMI!!!
    $sanitized = takeaction_feed_sanitize_node_json($action_json);

    return array(
      'id' => $node->nid,
      'TABAction' => _takeaction_feed_field_value($node, 'field_tab_action',
        '0'),
      'exclude' => _takeaction_feed_field_value($node, 'field_tab_exclude',
        '0'),
      'internalTitle' => $internal_title,
      'externalTitle' => $external_title,
      'publishedDate' => $node->created,
      'updatedDate' => $last_updated,
      'internalDescription' => _takeaction_feed_field_value($node,
        'field_tab_internal_desc'),
      'externalDescription' => _takeaction_feed_field_value($node,
        'field_tab_external_desc'),
      'callToAction' => $call_to_action,
      'pageUrl' => _takeaction_feed_page_url($node),
      'thumbnailUrl' => $thumbnail_url,
      'type' => _takeaction_feed_term_list($node, 'field_action_type'),
      'sponsors' => _takeaction_feed_group_list($node,
        'field_action_sponsors'),
      'organizations' => _takeaction_feed_group_list($node,
        'field_action_organization'),
      'topic' => _takeaction_feed_term_list($node, 'field_topic'),
      'freeTag' => _takeaction_feed_term_list($node, 'field_free_tag'),
      'actionCopy' => $aggregate_body,
      'updateText' => $update_text,
      'actionGoal' => $action_goal,
      'dateRange' => $date_range,
      'priority' => _takeaction_feed_field_value($node, 'field_priority'),
      'facebookComments' => _takeaction_feed_facebook_comment_settings($node),
    ) + $sanitized;
  }
  return FALSE;
}

function takeaction_feed_build_node_json($node) {
  $json = array();

  # Load the page data
  $wrapper = entity_metadata_wrapper('node', $node);
  $json['page'] = array();
  foreach ($wrapper->getIterator() as $name => $property) {
    if ($name == 'field_social_share_bar') {
      $name = 'field_social_share_bar';
    }
    // add 'path' attribute for taxonomy terms
    $json['page'][$name] = $property->value();
    if (in_array($name, array('field_free_tag', 'field_display_tag', 'field_series', 'field_topic'))) {
      if (is_array($json['page'][$name])) {
        foreach ($json['page'][$name] as &$term) {
          if (is_object($term) && isset($term->tid)) {
            $term->path = drupal_get_path_alias('taxonomy/term/'.$term->tid);
          }
        }
      }
      elseif (is_object($json['page'][$name]) && isset($json['page'][$name]->tid)) {
        $json['page'][$name]->path = drupal_get_path_alias('taxonomy/term/'.$term->tid);
      }
    }
  }

  # Load the form data
  $settings = entity_load_single('signature_node', $node->nid);
  if ($settings !== FALSE) {
    $wrapper = entity_metadata_wrapper('signature_node', $settings);
    $json['form'] = array();
    foreach ($wrapper->getIterator() as $name => $property) {
      $json['form'][$name] = $property->value();
    }
    $signature_type = signature_type_load($settings->type);
    if ($signature_type !== FALSE) {
      $json['form']['bsd_template'] = "{$signature_type->bsd_form}";
    }
  }

  # Load the updates data
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'followup')
    ->propertyCondition('type', 'content_link')
    ->propertyCondition('nid', $node->nid)
    ->execute();
  $json['updates'] = array();
  if (!empty($result['followup'])) {
    $updates = entity_load('followup', array_keys($result['followup']));
    foreach ($updates as $id => $update) {
      $wrapper = entity_metadata_wrapper('followup', $update);
      $data = array();
      foreach ($wrapper->getIterator() as $name => $property) {
        $data[$name] = $property->value();
      }
      $json['updates'][] = $data;
    }
  }

  return $json;
}

function _takeaction_feed_replace_with_nid($data) {
  return _takeaction_feed_replace_with_property($data, 'nid');
}
function _takeaction_feed_replace_with_name($data) {
  return _takeaction_feed_replace_with_property($data, 'name');
}
function _takeaction_feed_replace_with_property($data, $property) {
  if (is_object($data) && isset($data->{$property})) {
    return array($property => $data->{$property});
  }
  elseif (is_array($data) && isset($data[$property])) {
    return array($property => $data[$property]);
  }
  return NULL;
}

function _takeaction_feed_image($data) {
  # If file data already replaced by url, return it
  if (is_string($data)) {
    return $data;
  }

  $url = NULL;
  if (!empty($data)) {
    if (isset($data['und']) && isset($data['und'][0]) && isset($data['und'][0]['fid'])) {
      $fid = $data['und'][0]['fid'];
    }
    elseif (isset($data['fid'])) {
      $fid = $data['fid'];
    }
    if (!empty($fid)) {
      $file = file_load($fid);
      $original_url = file_create_url($file->uri);
      $url = _takeaction_feed_update_domain($original_url);
    }
  }
  return $url;
}

function _takeaction_feed_update_url_domain($data) {
  return _takeaction_feed_update_domain($data);
}

function _takeaction_feed_update(&$data, $path, $callback = NULL) {

  # Get the key being updated
  $key = array_shift($path);

  # The @ sign means 'for each delta'
  if ($key === '@') {
    foreach (array_keys($data) as $delta) {
       array_unshift($path, $delta);
       _takeaction_feed_update($data, $path, $callback);
       array_shift($path);
    }
  }

  # At the node to update
  elseif (count($path) == 0) {
    if (is_object($data)) {
      if (empty($callback)) {
        unset($data->{$key});
      }
      elseif (isset($data->{$key})) {
        $data->{$key} = call_user_func($callback, $data->{$key});
      }
    }
    elseif (is_array($data)) {
      if (empty($callback)) {
        unset($data[$key]);
      }
      elseif (isset($data[$key])) {
        $data[$key] = call_user_func($callback, $data[$key]);
      }
    }
  }

  # Working down the path
  else {
    if (is_object($data) && isset($data->{$key})) {
      _takeaction_feed_update($data->{$key}, $path, $callback);
    }
    elseif (is_array($data) && isset($data[$key])) {
      _takeaction_feed_update($data[$key], $path, $callback);
    }
  }
}

function takeaction_feed_sanitize_node_json($json) {

  $items = array(

    # Node properties
    'page:author' => '_takeaction_feed_replace_with_name',
    'page:comment' => NULL,
    'page:comment_count' => NULL,
    'page:comment_count_new' => NULL,
    'page:edit_url' => NULL,
    'page:feed_nid' => NULL,
    'page:log' => NULL,
    'page:promote' => NULL,
    'page:revision' => NULL,
    'page:source' => NULL,
    'page:sticky' => NULL,
    'page:url' => '_takeaction_feed_update_url_domain',
    'page:vid' => NULL,

    # Action organizer
    'page:field_action_organizer:@:cid' => NULL,
    'page:field_action_organizer:@:comment' => NULL,
    'page:field_action_organizer:@:comment_count' => NULL,
    'page:field_action_organizer:@:data' => NULL,
    'page:field_action_organizer:@:field_group_context' => NULL,
    'page:field_action_organizer:@:field_group_logo' => '_takeaction_feed_image',
    'page:field_action_organizer:@:field_group_main_image' => '_takeaction_feed_image',
    'page:field_action_organizer:@:field_multi_page_campaign' => NULL,
    'page:field_action_organizer:@:field_tp_campaign_show_title' => NULL,
    'page:field_action_organizer:@:last_comment_name' => NULL,
    'page:field_action_organizer:@:last_comment_timestamp' => NULL,
    'page:field_action_organizer:@:last_comment_uid' => NULL,
    'page:field_action_organizer:@:log' => NULL,
    'page:field_action_organizer:@:machine_name' => NULL,
    'page:field_action_organizer:@:metatags' => NULL,
    'page:field_action_organizer:@:name' => NULL,
    'page:field_action_organizer:@:picture' => NULL,
    'page:field_action_organizer:@:promote' => NULL,
    'page:field_action_organizer:@:rdf_mapping' => NULL,
    'page:field_action_organizer:@:revision_timestamp' => NULL,
    'page:field_action_organizer:@:revision_uid' => NULL,
    'page:field_action_organizer:@:sticky' => NULL,
    'page:field_action_organizer:@:tnid' => NULL,
    'page:field_action_organizer:@:translate' => NULL,
    'page:field_action_organizer:@:uid' => NULL,
    'page:field_action_organizer:@:vid' => NULL,

    # Action sponsor
    'page:field_action_sponsor:@:cid' => NULL,
    'page:field_action_sponsor:@:comment' => NULL,
    'page:field_action_sponsor:@:comment_count' => NULL,
    'page:field_action_sponsor:@:data' => NULL,
    'page:field_action_sponsor:@:field_group_context' => NULL,
    'page:field_action_sponsor:@:field_group_logo' => '_takeaction_feed_image',
    'page:field_action_sponsor:@:field_group_main_image' => '_takeaction_feed_image',
    'page:field_action_sponsor:@:field_multi_page_campaign' => NULL,
    'page:field_action_sponsor:@:field_tp_campaign_show_title' => NULL,
    'page:field_action_sponsor:@:last_comment_name' => NULL,
    'page:field_action_sponsor:@:last_comment_timestamp' => NULL,
    'page:field_action_sponsor:@:last_comment_uid' => NULL,
    'page:field_action_sponsor:@:log' => NULL,
    'page:field_action_sponsor:@:machine_name' => NULL,
    'page:field_action_sponsor:@:metatags' => NULL,
    'page:field_action_sponsor:@:name' => NULL,
    'page:field_action_sponsor:@:picture' => NULL,
    'page:field_action_sponsor:@:promote' => NULL,
    'page:field_action_sponsor:@:rdf_mapping' => NULL,
    'page:field_action_sponsor:@:revision_timestamp' => NULL,
    'page:field_action_sponsor:@:revision_uid' => NULL,
    'page:field_action_sponsor:@:sticky' => NULL,
    'page:field_action_sponsor:@:tnid' => NULL,
    'page:field_action_sponsor:@:translate' => NULL,
    'page:field_action_sponsor:@:uid' => NULL,
    'page:field_action_sponsor:@:vid' => NULL,

    # Image fields
    'page:field_actionheaderimg' => '_takeaction_feed_image',
    'page:field_action_main_image' => '_takeaction_feed_image',
    'page:field_thumbnail' => '_takeaction_feed_image',

    # Related content node fields
    'page:field_action_related:@' => '_takeaction_feed_replace_with_nid',
    'page:field_related_campaigns:@' => '_takeaction_feed_replace_with_nid',
    'page:field_related_content:@' => '_takeaction_feed_replace_with_nid',

    # Taxonomy fields
    'page:field_action_type:metatags' => NULL,
    'page:field_action_type:rdf_mapping' => NULL,
    'page:field_action_type:tid' => NULL,
    'page:field_action_type:vid' => NULL,

    'page:field_display_tag:field_series_context' => NULL,
    'page:field_display_tag:metatags' => NULL,
    'page:field_display_tag:rdf_mapping' => NULL,

    'page:field_free_tag:@:field_free_tag_context' => NULL,
    'page:field_free_tag:@:metatags' => NULL,
    'page:field_free_tag:@:rdf_mapping' => NULL,
    'page:field_free_tag:@:tid' => NULL,
    'page:field_free_tag:@:vid' => NULL,

    'page:field_series:field_series_context' => NULL,
    'page:field_series:metatags' => NULL,
    'page:field_series:rdf_mapping' => NULL,
    'page:field_series:tid' => NULL,
    'page:field_series:vid' => NULL,

    'page:field_topic:@:field_topic_context' => NULL,
    'page:field_topic:@:field_topic_featured_quick_study' => NULL,
    'page:field_topic:@:field_topic_override' => NULL,
    'page:field_topic:@:metatags' => NULL,
    'page:field_topic:@:rdf_mapping' => NULL,
    'page:field_topic:@:tid' => NULL,
    'page:field_topic:@:vid' => NULL,

    # Fields removed from all action types
    'page:field_multi_page_campaign' => NULL,
    'page:field_petition_sponsor' => NULL,
    'page:field_petition_text' => NULL,
    'page:field_pledge_issue' => NULL,
    'page:field_signatures' => NULL,
    'page:field_tab_content_link' => NULL,
    'page:field_tab_update_text' => NULL,
    'page:field_updates_message' => NULL,
  );

  # The alt content field is not used by the action types with a form
  if (isset($json['form'])) {
    $items['page:field_altcontent'] = NULL;
  }

  # Sanatize the JSON data
  foreach ($items as $item => $callback) {
    $path = explode(':', $item);
    _takeaction_feed_update($json, $path, $callback);
  }

  return $json;
}

function takeaction_feed_node_callback($nid) {
  if (preg_match('/^[0-9]+$/', $nid)) {
    $node = node_load($nid);
    if ($node !== FALSE) {
      // Build a JSON object of the action
      $json = takeaction_feed_build_node_json($node);
      // Sanitize the data, because seriously man TMI!!!
      $sanitized = takeaction_feed_sanitize_node_json($json);
      return drupal_json_output($sanitized);
    }
  }
  return drupal_not_found();
}
