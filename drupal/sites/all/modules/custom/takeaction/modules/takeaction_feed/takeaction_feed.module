<?php
/**
 * @file
 * TakeAction Button Action Feed Module
 */

/**
 * Implements hook_help().
 */
function takeaction_feed_help($path, $arg) {
  $output = '';
  if ($path == 'admin/help#takeaction_feed') {
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('The TakeAction Button Feed module provides a JSON feed
      of action items on the TakePart site for consumption by the TakeAction
      Button system.') . '</p>';
  }
  return $output;
}

/**
 * Implements hook_menu().
 */
function takeaction_feed_menu() {
  return array(
    'takeaction/feeds/actions' => array(
      'page callback' => 'takeaction_feed_actions_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'admin/config/takeaction/feeds' => array(
      'title' => 'TakeAction Button Feed Settings',
      'description' => 'Settings for TakeAction Button feeds',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('takeaction_feed_admin_form'),
      'access callback' => 'user_access',
      'access arguments' => array('takeaction configure settings'),
    ),
  );
}

/**
 * Actions feed callback.
 */
function takeaction_feed_actions_callback() {
  $query = db_select('takeaction_feed_actions', 'a')
    ->fields('a', array('nid', 'data'));
  if (variable_get('takeaction_feed_filter_unpublished', 1)) {
    $query = $query->condition('a.published', 0, '!=');
  }
  if (variable_get('takeaction_feed_filter_takepart_only', 1)) {
    $query = $query->condition('a.takepart_only', 0, '=');
  }
  $actions = $query->execute();
  $items = array();
  while ($action = $actions->fetchAssoc()) {
    $items[] = unserialize($action['data']);
  }
  return drupal_json_output($items);
}

/**
 * Admin form callback.
 */
function takeaction_feed_admin_form($form, &$form_state) {

  $form['takeaction_feed_filter_unpublished'] = array(
    '#type' => 'checkbox',
    '#title' => t('Filter unpublished actions'),
    '#description' => t('Exclude unpublised actions from the actions feed'),
    '#default_value' => variable_get('takeaction_feed_filter_unpublished', 1),
  );

  $form['takeaction_feed_filter_takepart_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Filter TakePart.com only actions'),
    '#description' => t('Exclude TakePart.com only actions from the actions feed'),
    '#default_value' => variable_get('takeaction_feed_filter_takepart_only', 1),
  );

  $form['actions']['takeaction_feed_rebuild_actions'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild Actions Feed'),
    '#submit' => array('takeaction_feed_admin_form_submit_rebuild'),
  );

  return system_settings_form($form);
}

/**
 * Admin form rebuild feed submit callback.
 */
function takeaction_feed_admin_form_submit_rebuild($form, $form_state) {
  $counts = array(
    'action' => 0,
    'petition_action' => 0,
    'pledge_action' => 0,
  );
  db_delete('takeaction_feed_actions');
  $nodes = db_select('node', 'n')
    ->fields('n', array('nid', 'type'))
    ->condition('n.type', array_keys($counts), 'IN')
    ->condition('n.status', 0, '!=')
    ->execute()
    ->fetchAllKeyed();
  foreach ($nodes as $nid => $type) {
    $node = node_load($nid);
    takeaction_feed_node_update($node);
    $counts[$type] += 1;
  }
  $message = t('!total action items rebuilt', array(
    '!total' => array_sum($counts),
  ));
  drupal_set_message($message);
}

/**
 * Implements hook_node_insert().
 */
function takeaction_feed_node_insert($node) {
  takeaction_feed_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function takeaction_feed_node_update($node) {
  $data = takeaction_feed_action_item_data($node);
  if ($data !== FALSE) {
    $timestamp = time();
    db_merge('takeaction_feed_actions')
      ->key(array(
        'nid' => $node->nid,
      ))
      ->insertFields(array(
        'nid' => $node->nid,
        'created' => $timestamp,
        'changed' => $timestamp,
        'published' => $node->status,
        'takepart_only' => empty($data['externalTAB']) ? 0
          : (int) $data['externalTAB'],
        'data' => serialize($data),
      ))
      ->updateFields(array(
        'changed' => $timestamp,
        'published' => $node->status,
        'takepart_only' => empty($data['externalTAB']) ? 0
          : (int) $data['externalTAB'],
        'data' => serialize($data),
      ))
      ->execute();
  }
  else {
    db_delete('takeaction_feed_actions')
      ->condition('nid', $node->nid, '=')
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function takeaction_feed_node_delete($node) {
  // Delete the action item for the node.
  db_delete('takeaction_feed_actions')
    ->condition('nid', $node->nid, '=')
    ->execute();
}

/**
 * Helper function for translating a field with a 'value' into a single string.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the value.
 * @param string $default
 *   The default value to return if the field has not been set on the action.
 *
 * @return string
 *   The text of the field stripped of all HTML markup.
 */
function _takeaction_feed_field_value($node, $field, $default = '') {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    return strip_tags($first['value']);
  }
  return $default;
}

/**
 * Helper function for translating a field with a 'value' into a list of values.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the value.
 *
 * @return array
 *   An array of the individual field values stripped of all HTML markup.
 */
function _takeaction_feed_field_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $values = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $values[] = array(
        'title' => strip_tags($item['value']),
        'timestamp' => 0,
      );
    }
  }
  return $values;
}

/**
 * Helper function for translating a group reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the group reference.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the group.
 *   description - A description of the group.
 *   thumbnail - The absolute URL to the group thumbnail image.
 */
function _takeaction_feed_group_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $groups = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $groups[] = array(
        'title' => $item['title'],
        'description' => '',
        'thumbnail' => '',
      );
    }
  }
  return $groups;
}

/**
 * Helper function for translating a link field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the link.
 *
 * @return array
 *   An associative array containing the following
 *   title - The title of the link.
 *   url - The absolute URL of the link.
 */
function _takeaction_feed_link_list($node, $field) {
  $items = field_get_items('node', $node, $field);
  $links = array();
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $links[] = array(
        'title' => $item['title'],
        'url' => $item['url'],
      );
    }
  }
  return $links;
}

/**
 * Helper function for translating a media asset field to a URL.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The absolute URL of the media asset.
 */
function _takeaction_feed_media_url($node, $field) {
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    $first = reset($items);
    $file = file_load($first['fid']);
    return file_create_url($file->uri);
  }
  return '';
}

/**
 * Helper function for translating a term reference field.
 *
 * @param object $node
 *   The node to which the field is attached.
 * @param string $field
 *   The name of the field containing the terms.
 *
 * @returns string
 *   The terms in the field as a comma separated list of values.
 */
function _takeaction_feed_term_list($node, $field) {
  // Extract the term ids.
  $tids = array();
  $items = field_get_items('node', $node, $field);
  if ($items !== FALSE) {
    foreach ($items as $delta => $item) {
      $tids[] = $item['tid'];
    }
  }
  // Load and implode the terms.
  $terms = taxonomy_term_load_multiple($tids);
  return taxonomy_implode_tags($terms);
}

/**
 * Function for creating an action feed item data set.
 */
function takeaction_feed_action_item_data($node) {
  $action_types = array(
    'action',
    'petition_action',
    'pledge_action',
  );
  if (in_array($node->type, $action_types)) {

    // Get the internal title.
    $internal_title = _takeaction_feed_field_value($node,
      'field_tab_internal_title');
    if (strlen(trim($internal_title)) === 0) {
      // Use the promo headline instead.
      $internal_title = _takeaction_feed_field_value($node,
        'field_promo_headline');
      if (strlen(trim($internal_title)) === 0) {
        // Use the internal Drupal title instead.
        $internal_title = empty($node->title) ? '' : $node->title;
      }
    }

    // Get the external title.
    $external_title = _takeaction_feed_field_value($node,
      'field_tab_external_title');
    if (strlen(trim($external_title)) === 0) {
      // Use the internal title instead.
      $external_title = $internal_title;
    }

    $thumbnail_url = _takeaction_feed_media_url($node,
      'field_action_main_image');
    if (strlen(trim($thumbnail_url)) === 0) {
      // Use the promo thumbnail instead.
      $thumbnail_url = _takeaction_feed_media_url($node,
        'field_thumbnail');
    }

    // The actionCopy value is an aggregate of the fields that make up the
    // 'body' of the action.
    if ($node->type === 'pledge_action') {
      // For pledges uses the issue field, what you can do field and the
      // pledge statement (body) field.
      $aggregate_body = _takeaction_feed_field_value($node,
        'field_pledge_issue');
      $aggregate_body .= _takeaction_feed_field_value($node,
        'field_pledge_action_long');
      $aggregate_body .= _takeaction_feed_field_value($node, 'body');
    }
    elseif ($node->type === 'petition_action') {
      // For petitions use the short introduction (body) field and the about
      // the petition field.
      $aggregate_body = _takeaction_feed_field_value($node, 'body');
      $aggregate_body .= _takeaction_feed_field_value($node,
        'field_petition_about');
    }
    else {
      // For simple actions use the body field.
      $aggregate_body = _takeaction_feed_field_value($node, 'body');
    }

    // Get the action goal and date range (if available). Also get the action
    // button text to use as a default if the TAB call to action field is
    // empty.
    if ($node->type === 'pledge_action' || $node->type === 'petition_action') {
      // For petitions and pledges the fields are stored in the signature
      // settings.
      $settings = entity_load_single('signature_node', $node->nid);
      $button_text = $settings->sign_label;
      $action_goal = $settings->goal;
      if ($settings->limit_to_dates) {
        $date_range = array(
          'limited' => 'true',
          'startDate' => $settings->start_date,
          'endDate' => $settings->end_date,
        );
      }
      else {
        $date_range = array(
          'limited' => 'false',
          'startDate' => 0,
          'endDate' => 0,
        );
      }
    }
    else {
      // For simple actions use empty defaults.
      $button_text = '';
      $action_goal = 0;
      $date_range = array(
        'limited' => 'false',
        'startDate' => 0,
        'endDate' => 0,
      );
    }

    // Get the optional call to action, use the signature button text as a
    // default if the call to action is empty.
    $call_to_action = _takeaction_feed_field_value($node,
      'field_tab_call_to_action');
    if (strlen(trim($external_title)) === 0) {
      $call_to_action = $button_text;
    }

    return array(
      'id' => $node->nid,
      'internalTitle' => $internal_title,
      'externalTitle' => $external_title,
      'publishedDate' => $node->created,
      'updatedDate' => $node->changed,
      'internalDescription' => _takeaction_feed_field_value($node,
        'field_tab_internal_desc'),
      'externalDescription' => _takeaction_feed_field_value($node,
        'field_tab_external_desc'),
      'callToAction' => $call_to_action,
      'pageUrl' => url('node/' . $node->nid, array('absolute' => TRUE)),
      'thumbnailUrl' => $thumbnail_url,
      'type' => _takeaction_feed_term_list($node, 'field_action_type'),
      'externalTAB' => _takeaction_feed_field_value($node,
        'field_tab_takepart_only', '0'),
      'sponsors' => _takeaction_feed_group_list($node,
        'field_action_sponsors'),
      'organizations' => _takeaction_feed_group_list($node,
        'field_action_organization'),
      'topic' => _takeaction_feed_term_list($node, 'field_topic'),
      'freeTag' => _takeaction_feed_term_list($node, 'field_free_tag'),
      'actionCopy' => $aggregate_body,
      'contentLinks' => _takeaction_feed_link_list($node,
        'field_tab_content_link'),
      'updateText' => _takeaction_feed_field_list($node,
        'field_tab_update_text'),
      'actionGoal' => $action_goal,
      'dateRange' => $date_range,
      'priority' => _takeaction_feed_field_value($node, 'field_priority'),
    );
  }
  return FALSE;
}
