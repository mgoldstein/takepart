<?php
/**
 * @file
 * Sets up the base table for the signature entity and a table to store
 * information about the entity types.
 */

/**
 * Implements hook_uninstall()
 */
function signature_uninstall() {
  // delete the content type settings variable
  variable_del('signature_node_types');

  // delete the variables used by this module
  $variables = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', db_like('signature_mapping_') . '%', 'LIKE')
    ->execute();
  while ($variable = $variables->fetchAssoc()) {
    variable_del($variable['name']);
  }

  $types = db_select('field_config_instance', 'c')
    ->fields('c', array('field_name', 'entity_type', 'bundle'))
    ->condition('c.deleted', 0, '=')
    ->condition('c.entity_type', 'signature', '=')
    ->execute()
    ->fetchAssoc();
  foreach ($types as $row) {
    $instance = field_info_instance($row['entity_type'], $row['field_name'],
      $row['bundle']);
    drupal_set_message(t('Deleted signature field !field on !bundle',
      array('!field' => $row['field_name'], '!bundle' => $row['bundle'])));
    field_delete_instance($instance);
  } 
}

/**
 * Implements hook_schema()
 */
function signature_schema() {
  $schema = array();

  $schema['signature'] = array(
    'description' => 'The base table for signature entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier for the signature.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {signature_type}.type of the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The {node}.nid to which the signature belongs.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'email' => array(
        'description' => 'The email address of user who authored the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'display' => array(
        'description' => 'The public display status of the signature (0 = Not shown, 1 = Shown).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'newsletter' => array(
        'description' => 'The newsletter opt-in status of the signature (0 = Not Opted-In, 1 = Opted-In).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The {languages}.language of the signature.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.id who authored the signature. If set to 0, this signature was created by an anonymous user.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => "The author's hostname.",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The published status of this signature (0 = Not Published, 1 = Published).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the signature was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the signature was last changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type' => array('type'),
    ),
  );

  $schema['signature_type'] = array(
    'description' => 'Store information about defined signature types',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier of the signature type.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine readable name of the signature type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human readable name of the signature type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bsd_form' => array(
        'description' => 'The signup form to use for setting field mappings.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      // exportable entity fields
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  $schema['signature_node'] = array(
    'description' => 'The table for per node signature configurations.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid to which the configuration belongs.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {signature_type}.type of the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'goal' => array(
        'description' => 'The integer signature goal.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'bsd_form' => array(
        'description' => 'The signup form to use for sending data to BSD.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'limit_to_dates' => array(
        'description' => 'Flag for limiting signature collection to a specific date range.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'start_date' => array(
        'description' => 'The Unix timestamp of the signature collection start date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'end_date' => array(
        'description' => 'The Unix timestamp of the signature collection end date.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sign_label' => array(
        'description' => 'The label used on the submit button of the signature form.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'newsletter_label' => array(
        'description' => 'The label used on the newsletter opt-in field.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'restrictions' => array(
        'description' => 'The text of the restrictions note.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'terms_of_use' => array(
        'description' => 'The text of the terms of use note.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'display_disclaimer' => array(
        'description' => 'The text of the display disclaimer.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}
