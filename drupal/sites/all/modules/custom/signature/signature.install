<?php
/**
 * @file
 * Sets up the base table for the signature entity and a table to store
 * information about the entity types.
 */

/**
 * Implements hook_uninstall().
 */
function signature_uninstall() {
  // Delete the content type settings variable.
  variable_del('signature_node_types');

  // Delete the variables used by this module.
  $variables = db_select('variable', 'v')
    ->fields('v', array('name'))
    ->condition('name', db_like('signature_mapping_') . '%', 'LIKE')
    ->execute();
  while ($variable = $variables->fetchAssoc()) {
    variable_del($variable['name']);
  }

  $types = db_select('field_config_instance', 'c')
    ->fields('c', array('field_name', 'entity_type', 'bundle'))
    ->condition('c.deleted', 0, '=')
    ->condition('c.entity_type', 'signature', '=')
    ->execute()
    ->fetchAssoc();
  foreach ($types as $row) {
    $instance = field_info_instance($row['entity_type'], $row['field_name'],
      $row['bundle']);
    drupal_set_message(t('Deleted signature field !field on !bundle',
      array('!field' => $row['field_name'], '!bundle' => $row['bundle'])));
    field_delete_instance($instance);
  }
}

/**
 * Implements hook_schema().
 */
function signature_schema() {
  $schema = array();

  $schema['signature'] = array(
    'description' => 'The base table for signature entities.',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier for the signature.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The {signature_type}.type of the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'nid' => array(
        'description' => 'The {node}.nid to which the signature belongs.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'email' => array(
        'description' => 'The email address of user who authored the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'display' => array(
        'description' => 'The public display status of the signature (0 = Not shown, 1 = Shown).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'newsletter' => array(
        'description' => 'The newsletter opt-in status of the signature (0 = Not Opted-In, 1 = Opted-In).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'language' => array(
        'description' => 'The {languages}.language of the signature.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
        'default' => '',
      ),
      'uid' => array(
        'description' => 'The {users}.id who authored the signature. If set to 0, this signature was created by an anonymous user.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'hostname' => array(
        'description' => "The author's hostname.",
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
      ),
      'status' => array(
        'description' => 'The published status of this signature (0 = Not Published, 1 = Published).',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the signature was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the signature was last changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'type' => array('type'),
      'email' => array('email'),
      'email_and_nid' => array('email', 'nid'),
    ),
  );

  $schema['signature_type'] = array(
    'description' => 'Store information about defined signature types',
    'fields' => array(
      'id' => array(
        'description' => 'Primary key identifier of the signature type.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The machine readable name of the signature type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'The human readable name of the signature type.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      // Exportable entity fields.
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'type' => array('type'),
    ),
  );

  $schema['signature_node'] = array(
    'description' => 'The table for per node signature configurations.',
    'fields' => array(
      'nid' => array(
        'description' => 'The {node}.nid to which the configuration belongs.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'The type of the signature.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'bsd_form' => array(
        'description' => 'The signup form to use for sending data to BSD.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pm_signup_endpoint_id' => array(
        'description' => 'The signup endpoint.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  return $schema;
}

/**
 * Add the newsletter constituent group field for metrics.
 */
function signature_update_7100(&$sandbox) {
  db_add_field('signature_node', 'newsletter_group', array(
    'description' => 'The constituent group used for newsletter analytics.',
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
  ));
}

/**
 * Add a field for storing additional newsletter opt-ins.
 */
function signature_update_7101(&$sandbox) {
  // Add a new field to store multiple newsletter opt-ins.
  db_add_field('signature_node', 'newsletter_opt_ins', array(
    'description' => 'Additional newsletter opt-in fields.',
    'type' => 'text',
    'serialize' => TRUE,
  ));
  // Get a list of the existing nodes and their opt-ins.
  $results = db_select('signature_node', 'n')
    ->fields('n', array('nid', 'newsletter_label', 'newsletter_group'))
    ->execute()
    ->fetchAllAssoc('nid');
  // Transfer each node's opt-in settings to the new field.
  foreach ($results as $nid => $settings) {
    $newsletters = array(
      array(
        'label' => $settings->newsletter_label,
        'group' => $settings->newsletter_group,
      ),
    );
    // It seems to be necessary to explicitly serialize the field value in
    // the update hook. The field works as expected from the other locations
    // where the newsletter_opt_ins are updated.
    db_update('signature_node')
      ->fields(array(
        'newsletter_opt_ins' => serialize($newsletters),
      ))
      ->condition('nid', $nid, '=')
      ->execute();
  }
  // Drop the old newsletter opt-in fields.
  db_drop_field('signature_node', 'newsletter_label');
  db_drop_field('signature_node', 'newsletter_group');
}

/**
 * Add email and email + nid indices to the signature table.
 */
function signature_update_7102(&$sandbox) {
  db_add_index('signature', 'email', array('email'));
  db_add_index('signature', 'email_and_nid', array('email', 'nid'));
}

/**
 * Replace BSD fields with generic signup.
 */
function signature_update_7103(&$sandbox) {
  db_drop_field('signature_type', 'bsd_form');
  $schema = signature_schema();
  db_add_field('signature_node', 'pm_signup_endpoint_id',
    $schema['signature_node']['fields']['pm_signup_endpoint_id']);
}

/**
 * Remove unused tables and fields.
 */
function signature_update_7200(&$sandbox) {
  db_drop_table('signature');
  db_drop_table('signature_type');
  db_drop_field('signature_node', 'goal');
  db_drop_field('signature_node', 'limit_to_dates');
  db_drop_field('signature_node', 'start_date');
  db_drop_field('signature_node', 'end_date');
  db_drop_field('signature_node', 'heading');
  db_drop_field('signature_node', 'sign_label');
  db_drop_field('signature_node', 'newsletter_opt_ins');
  db_drop_field('signature_node', 'restrictions');
  db_drop_field('signature_node', 'terms_of_use');
  db_drop_field('signature_node', 'display_disclaimer');
}
