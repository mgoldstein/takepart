<?php
/**
 * @file
 * Module for Signatures
 */

include_once dirname(__FILE__) . '/signature.mapping.conf.inc';

/* Entity
 ******************************************************************************/
/**
 * Implements hook_entity_info().
 */
function signature_entity_info() {

  $info = array();

  $info['signature'] = array(
    'label' => t('Signature'),
    'entity class' => 'Signature',
    'controller class' => 'SignatureController',
    'base table' => 'signature',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'type',
      'label' => 'email',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full page'),
        'custom settings' => FALSE,
      ),
      'thankyou' => array(
        'label' => t('Thank You'),
        'custom settings' => FALSE,
      ),
    ),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'signature_access',
    'module' => 'signature',
    'admin ui' => array(
      'path' => 'admin/content/signature',
      'file' => 'signature.admin.inc',
      'controller class' => 'SignatureUIController',
    ),
  );

  $info['signature_type'] = array(
    'label' => t('Signature Type'),
    'entity class' => 'SignatureType',
    'controller class' => 'SignatureTypeController',
    'base table' => 'signature_type',
    'fieldable' => FALSE,
    'bundle of' => 'signature',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
      'status' => 'status',
      'module' => 'module',
    ),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'signature_access',
    'module' => 'signature',
    'admin ui' => array(
      'path' => 'admin/structure/signature_types',
      'file' => 'signature_type.admin.inc',
      'controller class' => 'SignatureTypeUIController',
    ),
  );

  $info['signature_node'] = array(
    'label' => t('Signature Node Settings'),
    'entity class' => 'SignatureNode',
    'controller class' => 'SignatureNodeController',
    'base table' => 'signature_node',
    'fieldable' => FALSE,
    'entity keys' => array(
      'id' => 'nid',
      'label' => 'title',
    ),
    'uri callback' => 'entity_class_uri',
    'access callback' => 'signature_access',
    'module' => 'signature',
  );

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function signature_entity_info_alter(&$entity_info) {

  // Add an action summary view mode.
  $entity_info['node']['view modes']['action_summary'] = array(
    'label' => t('Action Summary'),
    'custom settings' => FALSE,
  );

  // Add an action medium preview view mode.
  $entity_info['node']['view modes']['medium_preview'] = array(
    'label' => t('Action Medium Preview'),
    'custom settings' => FALSE,
  );

  // Add the analytics controller to petition and pledge actions
  $entity_info['node']['analytics']['bundles']['petition_action'] = array(
    'controller class' => 'TakeActionAnalyticsController',
  );
  $entity_info['node']['analytics']['bundles']['pledge_action'] = array(
    'controller class' => 'TakeActionAnalyticsController',
  );

  // Add the signature types to the list of bundles for signatures.
  foreach (signature_type_load() as $type => $info) {
    $entity_info['signature']['bundles'][$type] = array(
      'label' => $info->label,
      'admin' => array(
        'path' => 'admin/structure/signature_types/manage/%signature_type',
        'bundle argument' => 4,
        'real path' => 'admin/structure/signature_types/manage/' . $type,
        'access arguments' => array('administer signature signature_type'),
      ),
    );
  }
}

/**
 * Signature type place holder loader.
 */
function signature_type_load($type_name = NULL) {
  $types = entity_load_multiple_by_name('signature_type',
    isset($type_name) ? array($type_name) : FALSE);
  return isset($type_name) ? reset($types) : $types;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function signature_entity_property_info_alter(&$info) {
  $properties = &$info['signature']['properties'];
  $properties['created'] = array(
    'label' => t("Date created"),
    'type' => 'date',
    'description' => t("The date the signature was created."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'update signature signature',
    'schema field' => 'created',
  );
  $properties['changed'] = array(
    'label' => t("Date changed"),
    'type' => 'date',
    'description' => t("The date the signature was last changed."),
    'setter callback' => 'entity_property_verbatim_set',
    'setter permission' => 'update signature signature',
    'schema field' => 'changed',
  );
}


/* Access Control
 ******************************************************************************/
/**
 * Implements hook_permission().
 */
function signature_permission() {
  // Return permissions for the standard API entity operations.
  return array(
    'administer signature signature' => array(
      'title' => t('Administer Signatures'),
      'restrict access' => TRUE,
    ),
    'view signature signature' => array(
      'title' => t('View Signatures'),
      'restrict access' => TRUE,
    ),
    'update signature signature' => array(
      'title' => t('Update Signatures'),
      'restrict access' => TRUE,
    ),
    'create signature signature' => array(
      'title' => t('Create Signatures'),
      'restrict access' => TRUE,
    ),
    'delete signature signature' => array(
      'title' => t('Delete Signatures'),
      'restrict access' => TRUE,
    ),
    'administer signature signature_type' => array(
      'title' => t('Administer Signature Types'),
      'restrict access' => TRUE,
    ),
    'view signature signature_type' => array(
      'title' => t('View Signature Types'),
      'restrict access' => TRUE,
    ),
    'update signature signature_type' => array(
      'title' => t('Update Signature Types'),
      'restrict access' => TRUE,
    ),
    'create signature signature_type' => array(
      'title' => t('Create Signature Types'),
      'restrict access' => TRUE,
    ),
    'delete signature signature_type' => array(
      'title' => t('Delete Signature Types'),
      'restrict access' => TRUE,
    ),
    'administer signature signature_node' => array(
      'title' => t('Administer Signature Node Settings'),
      'restrict access' => TRUE,
    ),
    'view signature signature_node' => array(
      'title' => t('View Signature Node Settings'),
      'restrict access' => TRUE,
    ),
    'update signature signature_node' => array(
      'title' => t('Update Signature Node Settings'),
      'restrict access' => TRUE,
    ),
    'create signature signature_node' => array(
      'title' => t('Create Signature Node Settings'),
      'restrict access' => TRUE,
    ),
    'delete signature signature_node' => array(
      'title' => t('Delete Signature Node Settings'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Access callback for signatures.
 */
function signature_access($op, $entity, $account, $entity_type) {
  // Block unknown operations.
  $allowed_ops = array('administer', 'view', 'update', 'create', 'delete');
  if (in_array($op, $allowed_ops)) {
    return user_access("$op signature $entity_type", $account)
      || user_access("administer signature $entity_type", $account);
  }
  return FALSE;
}


/* Node Type Configuration
 ******************************************************************************/
/**
 * Implements hook_menu().
 */
function signature_menu() {
  return array(
    'ajax/signature/node' => array(
      'page callback' => 'signature_node_state_callback',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
    ),
    'api/signature' => array(
      'page callback' => 'signature_api_create',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'signature_deliver_api_page',
    ),
  );
}

/**
 * Helper function for determining if a node collects signatures.
 */
function signature_node_is_signature_action($node) {
  return in_array($node->type, array('petition_action', 'pledge_action', 'mos_action'));
}


/* Node Configuration
 ******************************************************************************/
/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function signature_form_node_form_alter(&$form, &$form_state) {

  $node = $form['#node'];
  if (signature_node_is_signature_action($node)) {

    // Get the field values from the appropriate source.
    $values = signature_node_form_values($form, $form_state);
    $node->signature_settings_present = TRUE;

    $js_path = drupal_get_path('module', 'signature')
      . '/js/signature-vertical-tabs.js';
    $form['signature'] = array(
      '#title' => t('Signature settings'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#attributes' => array('class' => array('edit-signature')),
      '#attached' => array('js' => array('vertical-tabs' => $js_path)),
    );

    $form['signature']['signature_bsd_form']
      = bluestatedigital_forms_signup_form_id($values->bsd_form);

    $options = array('' => t('<No Signatures>'));
    foreach (signature_type_load() as $name => $type) {
      $options[$name] = $type->label;
    }
    $form['signature']['signature_type'] = array(
      '#title' => t('Signature Type'),
      '#type' => 'select',
      '#options' => $options,
      '#default_value' => $values->type,
    );

    $form['signature']['signature_goal'] = array(
      '#title' => t('Signature Goal'),
      '#description' => t('The target number of signatures.'),
      '#type' => 'textfield',
      '#element_validate' => array('_element_validate_integer_positive'),
      '#required' => TRUE,
      '#default_value' => $values->goal,
    );

    $form['signature']['limit_range'] = array(
      '#title' => t('Date Range'),
      '#type' => 'fieldset',
    );

    $form['signature']['limit_range']['signature_limit_to_dates'] = array(
      '#title' => t('Limit signatures to the following date range.'),
      '#type' => 'checkbox',
      '#default_value' => $values->limit_to_dates,
    );

    $form['signature']['limit_range']['signature_start_date'] = array(
      '#title' => t('Start Date'),
      '#description' => t('The start date of the range.'),
      '#type' => 'date',
      '#default_value' => signature_timestamp_to_date($values->start_date),
    );

    $form['signature']['limit_range']['signature_end_date'] = array(
      '#title' => t('End Date'),
      '#description' => t('The end date of the range.'),
      '#type' => 'date',
      '#default_value' => signature_timestamp_to_date($values->end_date),
    );

    $form['signature']['signature_restrictions'] = array(
      '#title' => t('Restrictions note'),
      '#description' => t('Text of note indicating any restrictions on who can sign. If this field is left empty, no note will be shown.'),
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#default_value' => $values->restrictions,
    );

    $form['signature']['signature_terms_of_use'] = array(
      '#title' => t('Terms of use note'),
      '#description' => t("Text of note indicating that the user accepts the TakePart Terms of use by signing."),
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#default_value' => $values->terms_of_use,
    );

    $form['signature']['signature_display_disclaimer'] = array(
      '#title' => t('Signature display disclaimer'),
      '#description' => t("Text of disclaimer regarding the public sharing of the user's signature."),
      '#type' => 'textfield',
      '#maxlength' => 255,
      '#default_value' => $values->display_disclaimer,
    );

    $form['signature']['signature_sign_label'] = array(
      '#title' => t('Sign Button Label'),
      '#description' => t('The label to use on the sign button.'),
      '#type' => 'textfield',
      '#default_value' => $values->sign_label,
    );

    $form['signature_newsletters'] = array(
      '#title' => t('Newsletter opt-ins'),
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#attributes' => array('class' => array('edit-signature-newsletters')),
    );

    $form['signature_newsletters']['notice'] = array(
      '#type' => 'markup',
      '#markup' => t("<strong>In order to collect email opt-ins, the newsletter must be set on the signup form in BSD (Step 2: Edit Form Fields in the manage signup form admin). The fields below only control the opt-in copy and the analytics newsletter name (for reporting purposes).</strong>"),
    );

    $ordinals = array('first', 'second', 'third', 'fourth', 'fifth');
    foreach ($ordinals as $num => $ord) {

      $label_name = sprintf('signature_newsletter_label_%d', $num);
      $group_name = sprintf('signature_newsletter_group_%d', $num);

      if (!empty($values->newsletter_opt_ins[$num])) {
        $label_value = $values->newsletter_opt_ins[$num]['label'];
        $group_value = $values->newsletter_opt_ins[$num]['group'];
      }
      else {
        $label_value = '';
        $group_value = '';
      }

      $form['signature_newsletters'][$ord] = array(
        '#title' => t('Newsletter @num', array('@num' => $num + 1)),
        '#type' => 'fieldset',
        '#collapsible' => TRUE,
        '#collapsed' => ($num != 0) && empty($label_value),
      );

      $form['signature_newsletters'][$ord][$label_name] = array(
        '#title' => t('Newsletter Opt-In Label'),
        '#description' => t('The label to use for the newsletter opt-in. If this field is left empty, no newsletter opt-in field will be shown.'),
        '#type' => 'textfield',
        '#attributes' => array(
          'class' => array('signature-newsletter-label'),
        ),
        '#default_value' => $values->newsletter_opt_ins[$num]['label'],
      );

      $form['signature_newsletters'][$ord][$group_name]
        = bluestatedigital_forms_constituent_group($group_value);
      $form['signature_newsletters'][$ord][$group_name]['#title']
        = t('Analytics Newsletter Name');
      $form['signature_newsletters'][$ord][$group_name]['#description']
        = t('The title used by the analytics system to track user newsletter opt-ins. This value should correspond to the Blue State Digital constituent group configured on the @ord newsletter opt-in field of the signup form.', array('@ord' => $ord));
    }
  }
}

/**
 * Helper function for getting node configuration values.
 */
function signature_node_form_values($form, $form_state) {

  $node = $form['#node'];
  $settings = FALSE;

  $op_present = isset($form_state['values']['op']);
  $is_preview = $form_state['values']['op'] == t('Preview');
  if ($op_present && $is_preview) {
    // The node is being previewed, use the form values.
    $start_date = signature_date_to_timestamp(
      $form_state['values']['signature_start_date']
    );
    $end_date = signature_date_to_timestamp(
      $form_state['values']['signature_end_date']
    );
    $opt_ins = array();
    for ($num = 0; $num < 5; $num += 1) {
      $label_name = sprintf('signature_newsletter_label_%d', $num);
      $group_name = sprintf('signature_newsletter_group_%d', $num);
      $opt_ins[] = array(
        'label' => isset($form_state['values'][$label_name])
        ? $form_state['values'][$label_name] : '',
        'group' => isset($form_state['values'][$group_name])
        ? $form_state['values'][$group_name] : '',
      );
    }
    $values = array(
      'nid' => $node->nid,
      'type' => $form_state['values']['signature_type'],
      'goal' => $form_state['values']['signature_goal'],
      'bsd_form' => $form_state['values']['signature_bsd_form'],
      'limit_to_dates' => $form_state['values']['signature_limit_to_dates'],
      'start_date' => $start_date,
      'end_date' => $end_date,
      'sign_label' => $form_state['values']['signature_sign_label'],
      'newsletter_opt_ins' => $opt_ins,
      'restrictions' => $form_state['values']['signature_restrictions'],
      'terms_of_use' => $form_state['values']['signature_terms_of_use'],
      'display_disclaimer' => $form_state['values']['signature_display_disclaimer'],
    );
    $settings = entity_create('signature_node', $values);
  }
  elseif (isset($node->nid) && $node->nid > 0) {
    // Load the values from the database.
    $settings = entity_load_single('signature_node', $node->nid);
  }

  if (!$settings) {
    // New node or the node was created before the module was installed, use
    // default values.
    $values = array('nid' => $node->id);
    // TODO: Move the signature form heading to the content type, add sign
    // label default value field to the signature content types admin page.
    if ($node->type === 'petition_action') {
      $values['sign_label'] = 'Sign Now';
    }
    elseif ($node->type === 'pledge_action') {
      $values['sign_label'] = 'Sign Now';
    }
    elseif ($node->type === 'mos_action') {
      $values['sign_label'] = 'Send Your Support!';
    }
    else {
      $values['sign_label'] = 'Take Action';
    }
    $settings = entity_create('signature_node', $values);
  }

  return $settings;
}

/**
 * Helper function for converting UNIX timestamps to a date field value.
 */
function signature_timestamp_to_date($timestamp) {
  $date = getdate($timestamp);
  return array(
    'day' => $date['mday'],
    'month' => $date['mon'],
    'year' => $date['year'],
  );
}

/**
 * Helper function for converting a date field value to a UNIX timestamp.
 */
function signature_date_to_timestamp($date) {
  return mktime(0, 0, 0, $date['month'], $date['day'], $date['year']);
}

/**
 * Implements hook_field_extra_fields_alter().
 */
function signature_field_extra_fields_alter(&$info) {

  // Add signature progress and signature form extra fields to node types that
  // collect signatures.
  foreach (array('petition_action', 'pledge_action', 'mos_action') as $type) {
    $info['node'][$type]['display']['signature_progress_percent'] = array(
      'label' => t('Percentage to Goal'),
      'description' => t('Signature progress as a percentage of the goal.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_progress_days_left'] = array(
      'label' => t('Days Left'),
      'description' => t('Number of days left before signature collection is closed.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_progress_needed'] = array(
      'label' => t('Signatures Left'),
      'description' => t('Number of signatures needed to meet goal.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_progress_count'] = array(
      'label' => t('Signature Count'),
      'description' => t('Number of signatures on the action.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_progress_goal'] = array(
      'label' => t('Signature Goal'),
      'description' => t('Number of signatures and the goal.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_action_label'] = array(
      'label' => t('Action Type Label'),
      'description' => t('Simple label based on the Action Type taxononmy term.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_call_to_action'] = array(
      'label' => t('Call To Action'),
      'description' => t('Call to action button linking to the full page action.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_action_taken'] = array(
      'label' => t('Action Taken Message'),
      'description' => t('Message specific to action type describing the action taken.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_form_ajax'] = array(
      'label' => t('AJAX Signature Form'),
      'description' => t('Form for adding a signature that uses AJAX for inline procressing.'),
      'weight' => 0,
    );
    $info['node'][$type]['display']['signature_form_redirect'] = array(
      'label' => t('Redirect Signature Form'),
      'description' => t('Form for adding a signature that redirects to a thank you page.'),
      'weight' => 0,
    );
  }

  // The old action type needs the days left and call to action extra fields.
  $info['node']['action']['display']['signature_progress_days_left'] = array(
    'label' => t('Days Left'),
    'description' => t('Number of days left before the action is closed.'),
    'weight' => 0,
  );
  $info['node']['action']['display']['signature_action_label'] = array(
    'label' => t('Action Type Label'),
    'description' => t('Simple label based on the Action Type taxononmy term.'),
    'weight' => 0,
  );
  $info['node']['action']['display']['signature_call_to_action'] = array(
    'label' => t('Call To Action'),
    'description' => t('Call to action button linking to the full page action.'),
    'weight' => 0,
  );
  $info['node']['action']['display']['signature_action_taken'] = array(
    'label' => t('Action Taken Message'),
    'description' => t('Message specific to action type describing the action taken.'),
    'weight' => 0,
  );
}

/**
 * Helper function for saving signature settings associated with a node.
 */
function signature_save_node_settings($node) {

  // Get any existing settings for the node.
  $settings = entity_load_single('signature_node', $node->nid);
  if ($settings === FALSE) {
    $settings = entity_create('signature_node', array('nid' => $node->nid));
  }

  $opt_ins = array();
  for ($num = 0; $num < 5; $num += 1) {
    $label_name = sprintf('signature_newsletter_label_%d', $num);
    $group_name = sprintf('signature_newsletter_group_%d', $num);
    $opt_ins[] = array(
      'label' => isset($node->{$label_name}) ? $node->{$label_name} : '',
      'group' => isset($node->{$group_name}) ? $node->{$group_name} : '',
    );
  }

  // Update the settins for the node.
  $settings->type = $node->signature_type;
  $settings->goal = $node->signature_goal;
  $settings->bsd_form = $node->signature_bsd_form;
  $settings->pm_signup_endpoint_id = 0;
  $settings->limit_to_dates = $node->signature_limit_to_dates;
  $settings->start_date = signature_date_to_timestamp($node->signature_start_date);
  $settings->end_date = signature_date_to_timestamp($node->signature_end_date);
  $settings->sign_label = $node->signature_sign_label;
  $settings->newsletter_opt_ins = $opt_ins;
  $settings->restrictions = $node->signature_restrictions;
  $settings->terms_of_use = $node->signature_terms_of_use;
  $settings->display_disclaimer = $node->signature_display_disclaimer;

  // Update the attached signup endpoint, or attach a new one if the node
  // is new.
  if (!empty($settings->bsd_form)) {
    $errors = array();
    $endpoint = signature_configure_signup_endpoint($settings->bsd_form,
      $settings->pm_signup_endpoint_id, $errors);
    if ($endpoint !== FALSE) {
      $endpoint->save();
      $settings->pm_signup_endpoint_id = $endpoint->getID();
    }

    // Display the errors to the user so they know things are not going to
    // go well for the action. Use the warning level severity as the action
    // is still saved.
    foreach ($errors as $error) {
      drupal_set_message($error, 'warning');
    }
  }
  elseif (!empty($settings->pm_signup_endpoint_id)) {
    SignatureSignupEndpoint::deleteByID($settings->pm_signup_endpoint_id);
  }

  // Save the settings for the node.
  entity_save('signature_node', $settings);
}

/**
 * Implements hook_node_insert().
 */
function signature_node_insert($node) {
  if (signature_node_is_signature_action($node)
  && $node->signature_settings_present) {
    $node->signatures = signature_save_node_settings($node);
  }
}

/**
 * Implements hook_node_update().
 */
function signature_node_update($node) {
  if (signature_node_is_signature_action($node)
  && $node->signature_settings_present) {
    $node->signatures = signature_save_node_settings($node);
  }
}

/**
 * Implements hook_node_delete().
 */
function signature_node_delete($node) {
  // Delete any existing node settings and field mapping.
  entity_delete('signature_node', $node->nid);
  variable_del("signature_mapping_node_{$node->nid}");
}

/**
 * Implements hook_entity_delete().
 */
function signature_entity_delete($entity, $type) {
  if ($type === 'signature_node') {
    // Delete the accompaning signup endpoint.
    if (!empty($entity->pm_signup_endpoint_id)) {
      SignatureSignupEndpoint::deleteByID($entity->pm_signup_endpoint_id);
    }
  }
}

function signature_build_plugin_configuration($form_id, &$errors) {

  static $groups = FALSE;

  try {

    // Get the fields on the signup form.
    $api = bluestatedigital_get_api('signup');
    $fields = $api->listFormFields($form_id);

    // Get a list of the constituent groups for error reporting.
    if ($groups === FALSE) {
      $api = bluestatedigital_get_api('group');
      $groups = $api->listConstituentGroups();
    }
  }
  catch (BlueStateDigitalApiException $ex) {
    $message = 'Error retrieving sign form description [@code] @body';
    watchdog('signature', $message, array(
      '@code' => $ex->getResponseCode(),
      '@body' => $ex->getResponseBody(),
    ));
    return FALSE;
  }

  // Invert the form field list to be keyed by label for quick lookup when
  // translating from the form field label to the signup field name.
  $by_label = array();
  foreach ($fields as $id => $field) {
    $by_label[$field['label']] = $id;
  }

  // Get the mapping configuration from the includesd config file.
  $label_to_name = signature_label_to_name_mapping();
  $label_to_opt_in = signature_label_to_opt_in_mapping();
  $group_configs = signature_constituent_group_configurations();

  // Map each form field to appropriate signup field using the form field's
  // label, collecting any errors to show to the user when the action is saved.
  $name_to_field_id = array();
  foreach ($label_to_name as $label => $name) {

    if (isset($by_label[$label])) {
      $name_to_field_id[$name] = $by_label[$label];
    }
    else {
      if ($name !== 'action.id' && $name !== 'action.message') {
        $errors[] = "[{$form_id}] {$label} not found on form.";
      }
    }
  }

  // The Blue Hornet configuration depends on the constituent group selected
  // in the Blue State Digital signup form admin. By default none of the opt-ins
  // are used.
  $bh_configuration = array(array(), array(), array(), array(), array());
  $opt_in_to_field_id = array(0,0,0,0,0);

  // Map the opt-ins.
  foreach ($label_to_opt_in as $label => $index) {

    if (isset($by_label[$label])) {
      $opt_in_to_field_id[$index] = $by_label[$label];

      // Pull the constituent group id from the field.
      $field = $fields[$by_label[$label]];
      $cons_group_id = $field['cons_group_id'];

      // Opt-ins are optional so not all of them will have group ids.
      if (!empty($cons_group_id)) {

        if (array_key_exists($cons_group_id, $group_configs)) {
          $bh_configuration[$index] = $group_configs[$cons_group_id];
        }
        else {
          if (isset($groups[$cons_group_id])) {
            $name = $groups[$cons_group_id]['name'];
            $errors[] = "[{$form_id}] Constituent group {$name} [{$cons_group_id}] on {$label} is not supported.";
          }
          else {
            $errors[] = "[{$form_id}] Unknown constituent group id {$cons_group_id} on {$label} is not supported.";
          }
        }
      }
    }
  }

  // Make sure only the email field is both shown and required.
  foreach ($fields as $field_id => $field) {
    if ($field['is_required'] && $field['is_shown'] && $field['label'] !== 'Email') {
      $errors[] = "[{$form_id}] {$field['label']} should not be required";
    }
  }

  return array(
    'bluestatedigital.pm_signup.handler' => array(
      'form-id' => $form_id,
      'field-ids' => $name_to_field_id,
      'opt-in-ids' => $opt_in_to_field_id,
    ),
    'bluehornet.pm_signup.handler' => array(
      'opt-ins' => $bh_configuration,
    ),
  );
}

/**
 * Helper function for saving the signature field mapping.
 */
function signature_configure_signup_endpoint($form_id, $endpoint_id, &$errors) {

  $configurations = signature_build_plugin_configuration($form_id, $errors);
  if ($configurations !== FALSE) {

    if (empty($endpoint_id)) {
      $endpoint = new SignatureSignupEndpoint();
    }
    else {
      $endpoint = SignatureSignupEndpoint::load($endpoint_id);
      if ($endpoint === FALSE) {
        $endpoint = new SignatureSignupEndpoint();
      }
    }

    foreach ($configurations as $name => $configuration) {
      $endpoint->setPluginEnabled($name, !empty($configuration));
      $endpoint->setPluginConfiguration($name, $configuration);
    }

    return $endpoint;
  }

  return FALSE;
}

/**
 * Implements hook_preprocess_field().
 */
function signature_preprocess_field(&$vars) {

  $field_name = $vars['element']['#field_name'];
  $view_mode = $vars['element']['#view_mode'];

  if ($field_name == 'field_promo_headline' && $view_mode == 'medium_preview') {
    $node_uri = entity_uri('node', $vars['element']['#object']);
    foreach ($vars['items'] as $delta => &$item) {
      $vars['items'][$delta]['#markup']
        = l($item['#markup'], $node_uri['path'], array('html' => TRUE));
    }
  }
  elseif ($field_name == 'field_group_logo' && $view_mode == 'action_summary') {
    $node = $vars['element']['#object'];
    $link = reset(field_get_items('node', $node, 'field_group_url'));
    if ($link !== FALSE) {
      foreach ($vars['items'] as $delta => &$item) {
        $vars['items'][$delta]['#path'] = array(
          'path' => $link['url'],
          'options' => array('attributes' => $link['attributes']),
        );
      }
    }
  }
  elseif ($field_name == 'field_action_type') {
    $object = $vars['element']['#object'];
    $type = $vars['element']['#entity_type'];
    $item = reset(field_get_items($type, $object, 'field_action_type'));
    if ($item !== FALSE && isset($item['taxonomy_term'])) {
      $action_type_class = 'action-type ' . $item['taxonomy_term']->name;
      $vars['classes_array'][] = drupal_html_class($action_type_class);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function signature_preprocess_node(&$vars) {
  $node = $vars['node'];
  $view_mode = $vars['view_mode'];
  $extra_classes = array(
    drupal_html_class('view-mode-' . $view_mode),
  );
  if (signature_node_is_signature_action($node)) {
    // Add CSS classes to the node indicating that it has signature collection
    // enabled, default to the unsigned state so the node page can be cached.
    $extra_classes[] = 'signature-list';
    $extra_classes[] = 'signature-node-unsigned';
  }
  if (in_array($node->type, array('action', 'petition_action', 'pledge_action'))) {
    $extra_classes[] = 'action-content-type';
    $extra_classes[] = 'node-' . (string) $node->nid;
    $vars['attributes_array'] += array('nid' => $node->nid);
  }
  $vars['classes_array'] = array_merge($vars['classes_array'], $extra_classes);
  if ($view_mode === 'medium_preview' && $node->type === 'action') {
    $vars['theme_hook_suggestions'][] = 'node__action__medium_preview';
  }
}

/**
 * Implements hook_node_view().
 */
function signature_node_view($node, $view_mode, $langcode) {

  if (signature_node_is_signature_action($node)) {

    $settings = entity_load_single('signature_node', $node->nid);
    if ($settings !== FALSE && !empty($settings->type)) {

      $signature = entity_create('signature', array(
        'type' => $settings->type,
        'nid' => $node->nid,
      ));
      $node->content['signature_form_redirect'] = drupal_get_form(
        "signature_{$settings->type}_form", $signature, $node, FALSE);
      $node->content['signature_form_ajax'] = drupal_get_form(
        "signature_{$settings->type}_form", $signature, $node, TRUE);

      $action_type = signature_node_action_type_variables($node);
      $progress = signature_node_progress_variables($settings);

      $node->content['signature_action_label'] = array(
        '#theme' => 'signature_action_label',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_progress_percent'] = array(
        '#theme' => 'signature_progress_percent',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_progress_days_left'] = array(
        '#theme' => 'signature_progress_days_left',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_progress_needed'] = array(
        '#theme' => 'signature_progress_needed',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_progress_count'] = array(
        '#theme' => 'signature_progress_count',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_progress_goal'] = array(
        '#theme' => 'signature_progress_goal',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_call_to_action'] = array(
        '#theme' => 'signature_call_to_action',
        '#node' => $node,
        '#action_type' => $action_type,
        '#progress' => $progress,
        '#view_mode' => $view_mode,
      );
      $node->content['signature_action_taken'] = array(
        '#theme' => 'signature_action_taken',
        '#node' => $node,
        '#action_type' => $action_type,
        '#view_mode' => $view_mode,
      );
    }
  }
  elseif ($node->type === 'action') {
    $action_type = signature_node_action_type_variables($node);
    $node->content['signature_action_label'] = array(
      '#theme' => 'signature_action_label',
      '#node' => $node,
      '#action_type' => $action_type,
      '#progress' => $progress,
      '#view_mode' => $view_mode,
    );
    $node->content['signature_progress_days_left'] = array(
      '#theme' => 'signature_progress_days_left',
      '#node' => $node,
      '#action_type' => $action_type,
      '#progress' => array(
        'days_left' => 0,
        'state' => 'unsigned',
      ),
      '#view_mode' => $view_mode,
    );
    $node->content['signature_call_to_action'] = array(
      '#theme' => 'signature_call_to_action',
      '#node' => $node,
      '#action_type' => $action_type,
      '#view_mode' => $view_mode,
    );
    $node->content['signature_action_taken'] = array(
      '#theme' => 'signature_action_taken',
      '#node' => $node,
      '#action_type' => $action_type,
      '#view_mode' => $view_mode,
    );
  }
}


/* Signature Form
 ******************************************************************************/
/**
 * Implements hook_forms().
 */
function signature_forms() {
  $forms = array();
  // Build the forms for all signature types using the same base function.
  foreach (signature_type_load() as $type) {
    $forms["signature_{$type->type}_form"] = array(
      'callback' => 'signature_base_form',
    );
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function signature_field_extra_fields() {

  $extra = array();

  // Extra fields for the signature form.
  foreach (signature_type_load() as $type) {
    $extra['signature'][$type->type] = array(
      'form' => array(
        'restrictions' => array(
          'label' => t('Restrictions'),
          'description' => t('Note indicating any restrictions on who may sign.'),
          'weight' => -10,
        ),
        'email' => array(
          'label' => t('Email'),
          'description' => t('Email address field.'),
          'weight' => -5,
        ),
        'display' => array(
          'label' => t('Public Display Opt-In'),
          'description' => t('Public display opt-in checkbox'),
          'weight' => 101,
        ),
        'signature_display_disclaimer' => array(
          'label' => t('Public Display Disclaimer'),
          'description' => t('Collapsible disclaimer regarding the sharing of signature data.'),
          'weight' => 102,
        ),
        'newsletter_0' => array(
          'label' => t('Newsletter Opt-In 1'),
          'description' => t('Newsletter opt-in checkbox'),
          'weight' => 103,
        ),
        'newsletter_1' => array(
          'label' => t('Newsletter Opt-In 2'),
          'description' => t('Newsletter opt-in checkbox'),
          'weight' => 104,
        ),
        'newsletter_2' => array(
          'label' => t('Newsletter Opt-In 3'),
          'description' => t('Newsletter opt-in checkbox'),
          'weight' => 105,
        ),
        'newsletter_3' => array(
          'label' => t('Newsletter Opt-In 4'),
          'description' => t('Newsletter opt-in checkbox'),
          'weight' => 106,
        ),
        'newsletter_4' => array(
          'label' => t('Newsletter Opt-In 5'),
          'description' => t('Newsletter opt-in checkbox'),
          'weight' => 107,
        ),
        'actions' => array(
          'label' => t('Sign Button'),
          'description' => t('The button for submitting the signature form.'),
          'weight' => 108,
        ),
        'terms_of_use_note' => array(
          'label' => t('Terms of Use'),
          'description' => t('Terms of use note.'),
          'weight' => 109,
        ),
      ),
    );
  }
  return $extra;
}

/**
 * Signature form callback.
 */
function signature_base_form($form, &$form_state, $signature, $node, $ajax) {

  $form['#signature_node'] = $node;
  $form['#use_ajax'] = $ajax;

  $form_state['signature'] = $signature;

  // Get the node specific settings.
  $settings = entity_load_single('signature_node', $node->nid);

  // Attach the fields.
  field_attach_form('signature', $signature, $form, $form_state);

  // Translate the signature type to a CSS class name prefix.
  $css_prefix = str_replace('_', '-', $signature->type);
  $ajax_suffix = $ajax ? '-ajax' : '-redirect';

  if (!isset($form['#attribues'])) {
    $form['#attributes'] = array();
  }
  if (!isset($form['#attributes']['class'])) {
    $form['#attributes']['class'] = array();
  }
  $form['#attributes']['class'] += array(
    'signature-form',
    $css_prefix . '-form',
    $css_prefix . '-form' . $ajax_suffix,
  );

  // Add the email field. The mail field in the user table is 254 characters.
  $form['email'] = array(
    '#title' => t('Email'),
    '#type' => 'textfield',
    '#size' => 40,
    '#maxlength' => 254,
    '#required' => TRUE,
    '#attributes' => array(
      'class' => array(
        "{$css_prefix}-email-field",
        "signature-email-field",
      ),
    ),
    '#default_value' => $signature->email,
  );

  // Add the restrictions note.
  if (!empty($settings->restrictions)) {
    $form['restrictions'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          "{$css_prefix}-restrictions",
          "signature-restrictions",
        ),
      ),
      'contents' => array(
        '#type' => 'markup',
        '#markup' => $settings->restrictions,
      ),
    );
  }

  // Add the terms of use note.
  if (!empty($settings->terms_of_use)) {
    $form['terms_of_use_note'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          "{$css_prefix}-terms-of-use",
          "signature-terms-of-use",
        ),
      ),
      'contents' => array(
        '#type' => 'markup',
        '#markup' => $settings->terms_of_use,
      ),
    );
  }

  // Add the public display disclaimer.
  if (!empty($settings->display_disclaimer)) {
    $form['signature_display_disclaimer'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          "{$css_prefix}-display-disclaimer",
          "signature-display-disclaimer",
        ),
      ),
      'contents' => array(
        '#type' => 'markup',
        '#markup' => $settings->display_disclaimer,
      ),
    );
  }

  $form['display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display my signature.'),
    '#default_value' => $signature->display,
    '#required' => FALSE,
    '#attributes' => array(
      'class' => array(
        "{$css_prefix}-display-opt-in-field",
        "signature-display-opt-in-field",
      ),
    ),
  );

  for ($num = 0; $num < 5; $num += 1) {
    if (!empty($settings->newsletter_opt_ins[$num]['label'])) {
      $form["newsletter_{$num}"] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($settings->newsletter_opt_ins[$num]['label']),
        '#default_value' => $signature->newsletter & (1 << $num) ? 1 : 0,
        '#required' => FALSE,
        '#attributes' => array(
          'class' => array(
            "{$css_prefix}-newsletter-opt-in-field",
            "signature-newsletter-opt-in-field",
          ),
        ),
      );
    }
  }

  $wrapper = "signature-form-{$node->nid}";
  $form['#prefix'] = '<div id="' . $wrapper . '">';
  $form['#suffix'] = '</div>';

  // Add the sign submit button.
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => $settings->sign_label,
    '#attributes' => array(
      'class' => array('signature-sign-button'),
    ),
  );
  if ($ajax) {
    $form['actions']['submit']['#ajax'] = array(
      'callback' => 'signature_base_form_callback',
      'wrapper' => $wrapper,
    );
  }

  return $form;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * TODO: See if we can just prevent the metatags module from altering the
 * signature form in the first place.
 */
function signature_form_signature_base_form_alter(&$form, &$form_state) {
  // Remove the metatags part of the form.
  unset($form['metatags']);
  $form['#submit'] = array_diff($form['#submit'],
    array('metatag_metatags_form_submit'));
}

/**
 * AJAX callback for signature forms on embedded actions.
 */
function signature_base_form_callback($form, $form_state) {

  // Standard form submission stuff.
  $commands = array();
  $commands[] = ajax_command_replace(NULL, drupal_render($form));
  $commands[] = ajax_command_prepend(NULL, theme('status_messages'));

  $errors = form_get_errors();
  if (empty($errors)) {

    $node = $form['#signature_node'];
    $analytics = tp_analytics_get_controller('node', $node->type);

    // Add the signature form submit and action taken events.
    $opt_ins = array();
    for ($num = 0; $num < 5; $num += 1) {
      $opt_ins[$num] = !empty($form_state['values']["newsletter_{$num}"]);
    }
    $events = $analytics->getSignedEvents($node, 'embedaction', $opt_ins);
    foreach ($events as $event) {
      $commands[] = $analytics->getFireEventCommand($event);
    }

    $data = signature_node_state_data($node);
    $data['progress']['state'] = 'thankyou';
    $commands[] = ajax_command_settings(array(
     'signature' => array(
       'submission' => array(
         'result' => array($node->nid => $data),
        ),
      ),
      'addthis' => array(
        'email' => $form_state['values']['email'],
      ),
    ), TRUE);
  }

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Signature form validation handler.
 */
function signature_base_form_validate($form, &$form_state) {

  // Valiate the email.
  $email = $form_state['values']['email'];
  if ((!empty($email)) && (!valid_email_address($email))) {
    form_set_error('email', t('!name must be a valid email address', array(
      '!name' => 'Email',
    )));
  }

  // Validate the attached fields.
  field_attach_form_validate('signature', $form_state['signature'], $form,
    $form_state);
}

/**
 * Signature form sign (submit) handler.
 */
function signature_base_form_submit($form, &$form_state) {

  // Build the signature entity from the form.
  $signature = $form_state['signature'];
  entity_form_submit_build_entity('signature', $signature, $form, $form_state);
  $signature->newsletter = 0;
  for ($num = 0; $num < 5; $num += 1) {
    if (!empty($form_state['values']["newsletter_{$num}"])) {
      $signature->newsletter |= (1 << $num);
    }
  }

  // Create an entity query.
  $query = new EntityFieldQuery();

  // Limit that query to signatures for the associated node.
  $query->entityCondition('entity_type', 'signature');
  $query->propertyCondition('nid', $signature->nid);

  // Limit signing to once per email.
  $query->propertyCondition('email', $signature->email);

  $results = $query->execute();
  if (empty($results['signature'])) {
    $signature->save();
    signature_send_signup($signature);
    $action_id = $signature->id;
  }
  else {
    $action_id = reset(array_keys($results['signature']));
  }

  // Set the node signed cookie.
  $cookie = "{$signature->type}_{$signature->nid}_signed";
  setcookie($cookie, 1, time() + (86400 * 365), '/');

  // Redirect to the thank you page if no using AJAX.
  if (!$form['#use_ajax']) {
    $thank_you_page = variable_get('takeaction_thank_you_page', '');
    if (!empty($thank_you_page)) {
      drupal_goto($thank_you_page, array(
        'query' => array('action' => $action_id),
      ));
    }
  }
}

/**
 * Sends a signature to BSD as a signup.
 */
function signature_send_signup($signature, $local = TRUE) {

  // Get the node specific settings.
  $settings = entity_load_single('signature_node', $signature->nid);
  if ($settings !== FALSE && !empty($settings->pm_signup_endpoint_id)) {

    // Create a signature signup.
    $signup = SignatureSignup::create();

    $signup['email'] = $signature->email;

    $items = field_get_items('signature', $signature, 'field_sig_first_name');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['name.first'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_last_name');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['name.last'] = $item['value'];
      }
    }

    $signup['action.id'] = $signature->nid;
    $signup['action.signature-type'] = $signature->type;
    $signup['action.opt-ins.display'] = $signature->display;

    // Combine the newsletter opt-ins into a single comma separated list.
    $opt_ins = array();
    for ($opt_in = 0x01; $opt_in < 0x20; $opt_in*=2) {
      $opt_ins[] = ($signature->newsletter & $opt_in) ? 'true' : 'false';
    }
    $signup['action.opt-ins.newsletters'] = implode(',', $opt_ins);

    $items = field_get_items('signature', $signature, 'field_partner_code');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['partner.code'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_partner_opt_in');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['action.opt-ins.partner'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_address');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['address.address'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_city');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['address.city'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_state');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['address.state.code'] = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_country');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['address.country'] = $item['value'];
      }
    }

    // Assume a ZIP code. This cover the US only signature and the US versions
    // of the international signature
    $items = field_get_items('signature', $signature, 'field_sig_zip_code');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
       $signup['address.postal-code'] = $item['value'];
      }
    }

    // Grab the outside US postal code if there is one.
    $postal_code = '';
    $items = field_get_items('signature', $signature, 'field_sig_postal_code');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $postal_code = $item['value'];
      }
    }

    $items = field_get_items('signature', $signature, 'field_sig_address_toggle');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        if ($item['value'] === 'inside') {
          // Signature is from inside the US, mark the type for extra validation.
          $signup['address.postal-code.type'] = 'ZIP';
        }
        else {
          // Signature is from outside the US, use the postal code field instead
          $signup['address.postal-code'] = $postal_code;
          // and clear any state code
          unset($signup['address.state.code']);
        }
      }
    }

    // Messages of support have a custom message along with the signup info.
    $items = field_get_items('signature', $signature, 'field_custom_message');
    if ($items !== FALSE) {
      $item = reset($items);
      if ($item !== FALSE) {
        $signup['action.message'] = $item['value'];
      }
    }

    // Load the submission endpoint.
    $endpoint = SignatureSignupEndpoint::load($settings->pm_signup_endpoint_id);

    if ($endpoint !== FALSE) {
      // Send the signup.
      try {

        $signup->validate();
        $endpoint->submit($signup);

        if ($local) {
          takeaction_tracking_track_action($signature->nid);
        }

        return TRUE;
      }
      catch (SignupValidationException $sve) {
        $message = 'Error validating signup [@id] @email';
        watchdog('signature', $message, array(
          '@name' => $settings->pm_signup_endpoint_id,
          '@email' => $signature->email,
        ));
      }
      catch (SignupSubmissionException $sse) {
        $message = 'Error sending signup [@id] @email';
        watchdog('signature', $message, array(
          '@name' => $settings->pm_signup_endpoint_id,
          '@email' => $signature->email,
        ));
      }
    }
    else {
      $message = 'Unknown signup [@id] @email';
      watchdog('signature', $message, array(
        '@id' => $settings->pm_signup_endpoint_id,
        '@email' => $signature->email,
      ));
    }
  }

  return FALSE;
}


/* Signature Blocks
 ******************************************************************************/
/**
 * Implements hook_block_info().
 */
function signature_block_info() {
  return array(
    'summary' => array(
      'info' => 'Action Signature Summary',
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function signature_block_view($delta = '') {
  $block = array();
  if ($delta === 'summary') {
    $node = menu_get_object();
    if (!empty($node)) {
      $block['subject'] = t('About This Action');
      $block['content'] = node_view($node, 'action_summary');
    }
  }
  return $block;
}


/* Signature Theming
 ******************************************************************************/
/**
 * Implements hook_theme().
 */
function signature_theme() {
  return array(
    'signature_progress_percent' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_progress_days_left' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_progress_needed' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_progress_count' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_progress_goal' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_action_label' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_call_to_action' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
    'signature_action_taken' => array(
      'variables' => array(
        'node' => NULL,
        'action_type' => NULL,
        'progress' => NULL,
        'view_mode' => NULL,
      ),
    ),
  );
}

/**
 * Helper function for calculating the signature progress.
 *
 * @return array
 *   the progress as an array of values for using in a theme template and the
 *   ajax callback.
 */
function signature_node_progress_variables($entity) {
  $controller = entity_get_controller('signature_node');
  return $controller->progressVariables($entity);
}

/**
 * Helper function for retrieving the action type specific labels.
 */
function signature_node_action_type_variables($node) {
  $variables = array();
  $defaults = array(
    'action_type_label' => t('Action'),
    'action_open_label' => '',
    'call_to_action' => t('Take Action'),
    'action_taken' => '',
    'units_single' => '',
    'units_plural' => '',
  );
  $action_type_items = field_get_items('node', $node, 'field_action_type');
  if (!empty($action_type_items)) {
    $action_type = reset($action_type_items);
    $term = taxonomy_term_load($action_type['tid']);
    foreach ($defaults as $name => $default) {
      $field_items = field_get_items('taxonomy_term', $term, 'field_' . $name);
      if (!empty($field_items)) {
        $item = reset($field_items);
        $variables[$name] = $item['safe_value'];
      }
      else {
        $variables[$name] = $default;
      }
    }
  }
  return $variables;
}

/**
 * Progress percent theme function.
 */
function theme_signature_progress_percent($variables) {
  $progress = $variables['progress'];
  $classes = implode(' ', $progress['complete_classes']);
  $output = '<div class="signature-progress-percent ' . $classes . '">';
  $output .= '<span class="percentage">';
  $output .= number_format($progress['percent'], $progress['decimals']);
  $output .= '<span class="sign">%</span>';
  $output .= '</span>';
  $output .= ' <span class="complete">Complete</span>';
  $output .= '</div>';
  return $output;
}

/**
 * Progress days left theme function.
 */
function theme_signature_progress_days_left($variables) {
  $action_type = $variables['action_type'];
  $progress = $variables['progress'];
  if ($progress['days_left']) {
    $days_left = format_plural($progress['days_left'],
      '<span class="count">1</span> <span class="units">Day Left</span>',
      '<span class="count">@count</span> <span class="units">Days Left</span>');
    $classes = 'limited';
  }
  elseif ($progress['state'] === 'closed') {
    $days_left = '<span class="state">' . t('Closed') . '</span>';
    $classes = 'closed';
  }
  else {
    $days_left = '<span class="state">' . $action_type['action_open_label'] . '</span>';
    $classes = 'ongoing';
  }
  $output = '<div class="signature-progress-days-left ' . $classes . '">';
  $output .= $days_left;
  $output .= '</div>';
  return $output;
}

/**
 * Progress signatures needed theme function.
 */
function theme_signature_progress_needed($variables) {
  $action_type = $variables['action_type'];
  $progress = $variables['progress'];
  $classes = implode(' ', $progress['count_classes']);
  $units = array(
    '@unit' => $action_type['units_single'],
    '@units' => $action_type['units_plural'],
    '@commafied' => number_format($progress['needed']),
  );
  $needed = format_plural($progress['needed'],
    '<span class="count">1</span> <span class="units">more @unit needed to hit the goal!</span>',
    '<span class="count">@commafied</span> <span class="units">more @units needed to hit the goal!</span>',
    $units);
  $output = '<div class="signature-progress-needed ' . $classes . '">';
  $output .= $needed;
  $output .= '</div>';
  return $output;
}

/**
 * Progress signature count theme function.
 */
function theme_signature_progress_count($variables) {
  $action_type = $variables['action_type'];
  $progress = $variables['progress'];
  $classes = implode(' ', $progress['count_classes']);
  $units = array(
    '@unit' => $action_type['units_single'],
    '@units' => $action_type['units_plural'],
    '@commafied' => number_format($progress['count']),
  );
  $count = format_plural($progress['count'],
    '<span class="count">1</span> <span class="units">@unit</span>',
    '<span class="coutn">@commafied</span> <span class="units">@units</span>',
    $units);
  $output = '<div class="signature-progress-count ' . $classes . '">';
  $output .= $count;
  $output .= '</div>';
  return $output;
}

/**
 * Progress count towards goal theme function.
 */
function theme_signature_progress_goal($variables) {
  $action_type = $variables['action_type'];
  $progress = $variables['progress'];
  $classes = implode(' ', $progress['count_classes']);
  $units = array(
    '@unit' => $action_type['units_single'],
    '@units' => $action_type['units_plural'],
    '@commafied' => number_format($progress['count']),
  );
  $count = format_plural($progress['count'],
    '<span class="count">1</span> <span class="units">@unit</span>',
    '<span class="count">@commafied</span> <span class="units">@units</span>', $units);
  $output = '<div class="signature-progress-goal ' . $classes . '">';
  $output .= $count;
  $output .= ' <span class="for-label">of</span>';
  $output .= ' <span class="goal">' . number_format($progress['goal']) . '</span>';
  $output .= ' <span class="goal-label">goal</span>';
  $output .= '</div>';
  return $output;
}

/**
 * Action type label theme function.
 */
function theme_signature_action_label($variables) {
  $action_type = $variables['action_type'];
  $output = '<div class="signature-action-type-label">';
  $output .= '<h3>' . $action_type['action_type_label'] . '</h3>';
  $output .= '</div>';
  return $output;
}

/**
 * Call to action button theme function.
 */
function theme_signature_call_to_action($variables) {
  $node = $variables['node'];
  $action_type = $variables['action_type'];
  $node_uri = entity_uri('node', $node);
  $label = check_plain($action_type['call_to_action'])
  . '<div class="arrow"></div>';
  $output = '<div class="signature-call-to-action">';
  $output .= l($label, $node_uri['path'], array('html' => TRUE));
  $output .= '</div>';
  return $output;
}

/**
 * Action taken message theme function.
 */
function theme_signature_action_taken($variables) {
  $node = $variables['node'];
  $action_type = $variables['action_type'];
  $output = '<div class="signature-action-taken">';
  $output .= '<span class="salutation">' . t("You've") . '</span>';
  $output .= ' <span class="action">' . $action_type['action_taken'] . '</span>';
  $output .= ' <span class="title">' . check_plain($node->title) . '</span>';
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_formatter_info().
 */
function signature_field_formatter_info() {
  return array(
    'signature_action_type_label' => array(
      'label' => t('Action Type Label'),
      'field types' => array('taxonomy_term_reference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function signature_field_formatter_view($entity_type, $entity, $field,
  $instance, $langcode, $items, $display) {
  $mapping = array(
    'Petition' => t('Petition'),
    'Pledge' => t('Pledge'),
    'Contribution' => t('Donation'),
    'Donation' => t('Donation'),
    'Awareness' => t('Awareness'),
  );
  $element = array();
  if ($display['type'] === 'signature_action_type_label') {
    foreach ($items as $delta => $item) {
      $name = ($item['tid'] != 'autocreate' ? $item['taxonomy_term']->name : $item['name']);
      // Remap the label
      $label = check_plain($name);
      $element[$delta] = array(
        '#markup' => isset($mapping[$label]) ? $mapping[$label] : t('Awareness'),
      );
    }
  }
  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function signature_field_formatter_prepare_view($entity_type, $entities, $field,
  $instances, $langcode, &$items, $displays) {
  taxonomy_field_formatter_prepare_view($entity_type, $entities, $field,
    $instances, $langcode, $items, $displays);
}


/* Signature AJAX based state management.
 ******************************************************************************/
/**
 * Signature enabled node state callback.
 */
function signature_node_state_data($node) {

  $data = array(
    'nid' => $node->nid,
    'type' => $node->type,
    'title' => check_plain($node->title),
    'progress' => array(),
    'updates' => array(),
  );
  $settings = entity_load_single('signature_node', $node->nid);
  if ($settings !== FALSE) {

    $data['progress'] = signature_node_progress_variables($settings);

    $fields = array(
      '.signature-progress-percent' => 'signature_progress_percent',
      '.signature-progress-days-left' => 'signature_progress_days_left',
      '.signature-progress-needed' => 'signature_progress_needed',
      '.signature-progress-count' => 'signature_progress_count',
      '.signature-progress-goal' => 'signature_progress_goal',
    );
    $variables = array(
      'node' => $node,
      'action_type' => signature_node_action_type_variables($node),
      'progress' => $data['progress'],
    );
    $data['updates'] = array();
    foreach ($fields as $class => $hook) {
      $data['updates'][$class] = theme($hook, $variables);
    }
  }
  return $data;
}

/**
 * Signature node progress and state AJAX callback.
 */
function signature_node_state_callback($nids) {
  $state = array();
  foreach (explode(',', $nids) as $nid) {
    if (preg_match('/^[0-9]+$/', $nid)) {
      $node = node_load($nid);
      if ($node !== FALSE) {
        $state[$nid] = signature_node_state_data($node);
      }
    }
  }
  return drupal_json_output($state);
}

function signature_deliver_api_page($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Status', $page_callback_result['status']);
  print drupal_json_encode($page_callback_result['payload']);
}

function signature_api_create($nid) {

  // Creates are done through a POST
  if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    return array(
      'status' => '405 Method Not Allowed',
      'payload' => array(
        'errors' => array(
          'HTTP method must be POST.'
        ),
      ),
    );
  }

  // Requestion authorization token must be correct

  // Request content type must be JSON
  if ($_SERVER['CONTENT_TYPE'] !== 'application/json') {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid request content type.',
        ),
      ),
    );
  }

  // First (and only) path element is a nid
  if (!preg_match('/^[0-9]+$/', $nid)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid action id.',
        ),
      ),
    );
  }

  // The nid must point to a valid node
  $node = node_load($nid);
  if ($node === FALSE) {
    return array(
      'status' => '404 Not Found',
      'payload' => array(
        'errors' => array(
          'No such action exists.',
        ),
      ),
    );
  }

  // Only petition and pledge actions have signatures
  if (!signature_node_is_signature_action($node)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'The requested action does not support signatures.',
        ),
      ),
    );
  }

  // Decode the JSON payload
  $request_body = file_get_contents('php://input');
  $payload = drupal_json_decode($request_body);
  if (!isset($payload)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Unable to decode request payload.',
        ),
      ),
    );
  }

  // Validate the payload
  $validation_errors = array();
  if (!isset($payload['first_name'])) {
    $validation_errors[] = 'First name is required.';
  }
  if (!isset($payload['last_name'])) {
    $validation_errors[] = 'Last name is required.';
  }
  if (!isset($payload['email'])) {
    $validation_errors[] = 'Email is required.';
  }
  if (!isset($payload['display_signature'])) {
    $validation_errors[] = 'Signature display flag is required.';
  }
  if (!isset($payload['opt_ins'])) {
    $validation_errors[] = 'Opt-in list is required.';
  }
  if (!is_array($payload['opt_ins'])) {
    $validation_errors[] = 'Opt-in list must be an array.';
  }
  if (!empty($validation_errors)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => $validation_errors,
      ),
    );
  }

  // Check that the email adress is in fact an email address
  if (!valid_email_address($payload['email'])) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid email address.',
        ),
      ),
    );
  }

  // Create an entity query.
  $query = new EntityFieldQuery();

  // Limit that query to signatures for the associated node.
  $query->entityCondition('entity_type', 'signature');
  $query->propertyCondition('nid', $nid);

  // Limit signing to once per email.
  $query->propertyCondition('email', $payload['email']);

  $results = $query->execute();
  if (!empty($results['signature'])) {
    return array(
      'status' => '409 Conflict',
      'payload' => array(
        'errors' => array(
          'Signature already exists.',
        ),
      ),
    );
  }

  // Create a signature on the Drupal side
  $values = array(
    'type' => 'international_signature',
    'nid' => $nid,
    'email' => $payload['email'],
    'display' => $payload['display_signature'],
    'newsletter' => 0,
  );
  $signature = entity_create('signature', $values);

  // Newsletter opt-ins
  foreach ($payload['opt_ins'] as $opt_in) {
    if ($opt_in['name'] === 'opt_in_1') {
      if (!empty($opt_in['value'])) {
        $signature->newsletter |= 0x01;
      }
    }
    elseif ($opt_in['name'] === 'opt_in_2') {
      if (!empty($opt_in['value'])) {
        $signature->newsletter |= 0x02;
      }
    }
    elseif ($opt_in['name'] === 'opt_in_3') {
      if (!empty($opt_in['value'])) {
        $signature->newsletter |= 0x04;
      }
    }
    elseif ($opt_in['name'] === 'opt_in_4') {
      if (!empty($opt_in['value'])) {
        $signature->newsletter |= 0x08;
      }
    }
    elseif ($opt_in['name'] === 'opt_in_5') {
      if (!empty($opt_in['value'])) {
        $signature->newsletter |= 0x10;
      }
    }
  }

  // First name field
  $signature->field_sig_first_name = array(
    'und' => array(array('value' => $payload['first_name']))
  );

  // Last name field
  $signature->field_sig_last_name = array(
    'und' => array(array('value' => $payload['last_name']))
  );

  if (!empty($payload['address'])) {
    // Address field
    $signature->field_sig_address = array(
      'und' => array(array('value' => $payload['address']))
    );
  }
  else {
    $signature->field_sig_address = array('und' => array());
  }

  if (!empty($payload['city'])) {
    // City field
    $signature->field_sig_city = array(
      'und' => array(array('value' => $payload['city']))
    );
  }
  else {
    $signature->field_sig_city = array('und' => array());
  }

  if (empty($payload['country']) || $payload['country'] == 'United States') {

    $signature->field_sig_address_toggle = array(
      'und' => array(array('value' => 'inside'))
    );

    if (!empty($payload['state'])) {
      // State field
      $signature->field_sig_state = array(
        'und' => array(array('value' => $payload['state']))
      );
    }
    else {
      $signature->field_sig_state = array('und' => array());
    }

    if (!empty($payload['postal_code'])) {
      // ZIP code field
      $signature->field_sig_zip_code = array(
        'und' => array(array('value' => $payload['postal_code']))
      );
    }
    else {
      $signature->field_sig_zip_code = array('und' => array());
    }

    $signature->field_sig_postal_code = array('und' => array());
  }
  else {

    $signature->field_sig_address_toggle = array(
      'und' => array(array('value' => 'outside'))
    );

    $signature->field_sig_state = array('und' => array());

    if (!empty($payload['postal_code'])) {
      // Postal code field
      $signature->field_sig_postal_code = array(
        'und' => array(array('value' => $payload['postal_code']))
      );
    }
    else {
      $signature->field_sig_postal_code = array('und' => array());
    }

    $signature->field_sig_zip_code = array('und' => array());
  }

  if (!empty($payload['country'])) {
    // Country field
    $signature->field_sig_country = array(
      'und' => array(array('value' => $payload['country']))
    );
  }
  else {
    $signature->field_sig_country = array('und' => array());
  }

  // Partner code field
  if (!empty($_REQUEST['partner_code'])) {
    $signature->field_partner_code = array(
      'und' => array(array('value' => $_REQUEST['partner_code']))
    );
  }
  else {
    $signature->field_partner_code = array('und' => array());
  }

  // Partner opt-in field
  if (!empty($payload['partner_opt_in'])) {
    $signature->field_partner_opt_in = array(
      'und' => array(array('value' => '1'))
    );
  }
  else {
    $signature->field_partner_opt_in = array(
      'und' => array(array('value' => '0'))
    );
  }

  $signature->save();
  signature_send_signup($signature, FALSE);

  return array(
    'status' => '201 Created',
    'payload' => array(
      'id' => $signature->id,
    ),
  );
}

/**
 * hook_action_info() implementation
 */
function signature_action_info() {
  return array(
    'signature_unpublish_action' => array(
      'type' => 'signature',
      'label' => t('Unpublish Signature'),
      'configurable' => FALSE,
    ),
    'signature_publish_action' => array(
      'type' => 'signature',
      'label' => t('Publish Signature'),
      'configurable' => FALSE,
    ),
  );
}

/*
 *
 */
function signature_publish_action ($signature) {
  if (empty($signature->status)) {
    $signature->status = 1;
    entity_save('signature', $signature);
  }
}

function signature_unpublish_action ($signature) {
  if ($signature->status) {
    $signature->status = 0;
    entity_save('signature', $signature);
  }
}
