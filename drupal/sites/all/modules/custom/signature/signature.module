<?php
/**
 * @file
 * Module for action import and stub.
 */

/* Access Control
 ******************************************************************************/
/**
 * Implements hook_permission().
 */
function signature_permission() {
  // Return permissions for the standard API entity operations.
  return array(
    'signature configure import settings' => array(
      'title' => t('Configure action import settings'),
      'description' => t('Configure the donation action data import settings.'),
      'restrict access' => TRUE,
    ),
  );
}


/* Menu
 ******************************************************************************/
/**
 * Implements hook_menu().
 */
function signature_menu() {
  return array(
    'admin/config/participant-media/action-import' => array(
      'title' => 'Action Import',
      'description' => 'Configuraion of donation action import',
      'weight' => 0,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('signature_import_admin_form'),
      'access callback' => 'user_access',
      'access arguments' => array('signature configure import settings'),
    ),
    'api/signature' => array(
      'page callback' => 'signature_api_create',
      'type' => MENU_CALLBACK,
      'access arguments' => array('access content'),
      'delivery callback' => 'signature_deliver_api_page',
    ),
  );
}


/* Theming
 ******************************************************************************/
/**
 * Implements hook_preprocess_field().
 */
function signature_preprocess_field(&$vars) {
  $field_name = $vars['element']['#field_name'];
  $view_mode = $vars['element']['#view_mode'];
  if ($field_name == 'field_action_type') {
    $object = $vars['element']['#object'];
    $type = $vars['element']['#entity_type'];
    $item = reset(field_get_items($type, $object, 'field_action_type'));
    if ($item !== FALSE && isset($item['taxonomy_term'])) {
      $action_type_class = 'action-type ' . $item['taxonomy_term']->name;
      $vars['classes_array'][] = drupal_html_class($action_type_class);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function signature_preprocess_node(&$vars) {
  $node = $vars['node'];
  $view_mode = $vars['view_mode'];
  $extra_classes = array(
    drupal_html_class('view-mode-' . $view_mode),
  );
  $vars['classes_array'] = array_merge($vars['classes_array'], $extra_classes);
}


/* Node Mapping
 ******************************************************************************/
/**
 * Implements hook_node_delete().
 */
function signature_node_delete($node) {
  $mapping = SignatureActionMapping::loadByNodeId($node->nid);
  if ($mapping !== FALSE) {
    $mapping->delete(FALSE, TRUE);
  }
}

/**
 * Implements hook_token_info().
 */
function signature_token_info() {
  return array(
    'types' => array(
      'node' => array(
        'name' => t('Node'),
        'description' => t('Tokens related to individual nodes.'),
        'needs-data' => 'node'
      ),
    ),
    'tokens' => array(
      'node' => array(
        'tap-action-path' => array(
          'name' => t('TAP Action Path'),
          'description' => t('Action page path as configured in TAP.')
        ),
      ),
    ),
  );
}

/**
 * Implements hook_tokens().
 */
function signature_tokens($type, $tokens, array $data = array(),
  array $options = array()) {
  $sanitize = !empty($options['sanitize']);
  $replacements = array();
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      if ($name === 'tap-action-path') {
        $path = NULL;
        // Try grabbing the path from the node directly.
        if (isset($node->signature_tap_path)) {
          $path = $node->signature_tap_path;
        }
        // Load the signature action mapping and get the path from there.
        else {
          $mapping = SignatureActionMapping::loadByNodeId($node->nid);
          if ($mapping !== FALSE) {
            $path = $mapping->stub()->getPathAlias();
          }
        }
        // Set the replacement (if one was found).
        if (isset($path)) {
          $replacements[$original] =  $sanitize ? check_plain($path) : $path;
        }
      }
    }
  }
  return $replacements;
}


/* Signature AJAX API.
 ******************************************************************************/

function signature_deliver_api_page($page_callback_result) {
  drupal_add_http_header('Content-Type', 'application/json');
  drupal_add_http_header('Status', $page_callback_result['status']);
  print drupal_json_encode($page_callback_result['payload']);
}

function signature_api_create($tap_id) {

  // Creates are done through a POST
  if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    return array(
      'status' => '405 Method Not Allowed',
      'payload' => array(
        'errors' => array(
          'HTTP method must be POST.'
        ),
      ),
    );
  }

  // Request content type must be JSON
  if ($_SERVER['CONTENT_TYPE'] !== 'application/json') {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid request content type.',
        ),
      ),
    );
  }

  // First (and only) path element is a TAP id
  if (!preg_match('/^[0-9]+$/', $tap_id)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid action id.',
        ),
      ),
    );
  }

  // The TAP id must point to a valid mapping
  $mapping = SignatureActionMapping::load($tap_id);
  if ($mapping === FALSE) {
    return array(
      'status' => '404 Not Found',
      'payload' => array(
        'errors' => array(
          'No such action exists.',
        ),
      ),
    );
  }

  // The nid must point to a valid node
  if ($mapping->endpoint()->getID() === FALSE) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Action does not have a signup endpoint.',
        ),
      ),
    );
  }

  // Decode the JSON payload
  $body = file_get_contents('php://input');
  $request = drupal_json_decode($body);
  if (!isset($request)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Unable to decode request payload.',
        ),
      ),
    );
  }

  // Validate the payload
  $validation_errors = array();
  if (!isset($request['first_name'])) {
    $validation_errors[] = 'First name is required.';
  }
  if (!isset($request['last_name'])) {
    $validation_errors[] = 'Last name is required.';
  }
  if (!isset($request['email'])) {
    $validation_errors[] = 'Email is required.';
  }
  if (!isset($request['display_signature'])) {
    $validation_errors[] = 'Signature display flag is required.';
  }
  if (!isset($request['opt_ins'])) {
    $validation_errors[] = 'Opt-in list is required.';
  }
  if (!is_array($request['opt_ins'])) {
    $validation_errors[] = 'Opt-in list must be an array.';
  }
  if (!empty($validation_errors)) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => $validation_errors,
      ),
    );
  }

  // Check that the email adress is in fact an email address
  if (!valid_email_address($request['email'])) {
    return array(
      'status' => '400 Bad Request',
      'payload' => array(
        'errors' => array(
          'Invalid email address.',
        ),
      ),
    );
  }

  // Translate the request body to the standard signup format
  $payload = array(
    'email' => $request['email'],
    'name.first' => $request['first_name'],
    'name.last' => $request['last_name'],
    'action.id' => $tap_id,
    'action.signature-type' => 'international_signature',
    'action.opt-ins.display' => $request['display_signature'],
    'action.opt-ins.newsletters' => $request['opt_ins'],
  );

  // Address
  if (!empty($request['address'])) {
    $payload['address.address'] = $request['address'];
  }
  if (!empty($request['city'])) {
    $payload['address.city'] = $request['city'];
  }
  if (!empty($request['postal_code'])) {
    $payload['address.postal-code'] = $request['postal_code'];
  }
  if (!empty($request['country'])) {
    $payload['address.country'] = $request['country'];
  }

  // Addresses in the US can have a state and ZIP code
  if (empty($request['country']) || $request['country'] == 'United States') {
    if (!empty($request['state'])) {
      $payload['address.state.code'] = $request['state'];
    }
    if (!empty($request['postal_code'])) {
      $payload['address.postal-code.type'] = 'ZIP';
    }
  }

  // Custom message (of support)
  if (!empty($request['message'])) {
    $payload['action.message'] = $request['address'];
    $payload['action.signature-type'] = 'mos_action';
  }

  // Partner code and opt-in
  if (!empty($_REQUEST['partner_code'])) {
    $payload['partner.code'] = $_REQUEST['partner_code'];
    if (!empty($request['partner_opt_in'])) {
      $payload['action.opt-ins.partner'] = '1';
    }
  }

  // Send the signup
  $sent = pm_signup_handle(array(
    'type' => 'signature',
    'endpoint' => $mapping->endpoint()->getID(),
    'payload' => $payload,
  ));

  if ($sent === 'duplicate') {
    return array(
      'status' => '409 Conflict',
      'payload' => array(
        'errors' => array(
          'Signature already exists.',
        ),
      ),
    );
  }
  elseif ($sent === FALSE) {
    return array(
      'status' => '500 Internal Server Error',
      'payload' => array(
        'errors' => array(
          'Signup submission failed.',
        ),
      ),
    );
  }

  return array(
    'status' => '201 Created',
    'payload' => array(
      'id' => 0xDeadBeef,
    ),
  );
}


/* Action Import
 ******************************************************************************/
/**
 * Admin form callback.
 */
function signature_import_admin_form($form, &$form_state) {

  $form['signature_import_feed'] = array(
    '#type' => 'textfield',
    '#title' => t('Feed'),
    '#description' => t('The full URL of the action data feed. Leave empty to disable imports.'),
    '#required' => FALSE,
    '#default_value' => variable_get('signature_import_feed', ''),
    '#element_validate' => array('pm_core_element_validate_url'),
  );

  $form['signature_import_interval'] = array(
    '#type' => 'textfield',
    '#title' => t('Interval'),
    '#description' => t('The interval in minutes at which the feed should be imported.'),
    '#required' => FALSE,
    '#default_value' => variable_get('signature_import_interval', 5),
    '#element_validate' => array('element_validate_integer'),
  );

  $form['signature_import_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Timeout'),
    '#description' => t('The timeout in seconds for cURL requests.'),
    '#required' => TRUE,
    '#default_value' => variable_get('signature_import_timeout', 600),
    '#element_validate' => array('element_validate_integer_positive'),
  );

  $form = system_settings_form($form);

  $form['actions']['submit']['#submit'] = $form['actions']['#subimt'];
  unset($form['actions']['#submit']);

  $form['actions']['import_now'] = array(
    '#type' => 'submit',
    '#value' => t('Import Now'),
    '#submit' => array('signature_import_admin_form_import_now'),
  );

  $form['actions']['import_all'] = array(
    '#type' => 'submit',
    '#value' => t('Import All'),
    '#submit' => array('signature_import_admin_form_import_all'),
  );

  return $form;
}

function signature_import_admin_form_import_now($form, &$form_state) {

  // Ensure that we have an active configuration.
  $feed_url = $form_state['values']['signature_import_feed'];
  $timeout = $form_state['values']['signature_import_timeout'];
  if (!empty($feed_url)) {
    $count = signature_process_import_feed($feed_url, $timeout);
    drupal_set_message(t('!count actions processed.', array(
      '!count' => $count
    )), 'status');
  }
  else {
    drupal_set_message(t('Import requires an active configuration.'), 'error');
  }
}

function signature_import_admin_form_import_all($form, &$form_state) {

  // Ensure that we have an active configuration.
  $feed_url = $form_state['values']['signature_import_feed'];
  $timeout = $form_state['values']['signature_import_timeout'];
  if (!empty($feed_url)) {
    $count = signature_process_import_feed($feed_url, $timeout, TRUE);
    drupal_set_message(t('!count actions processed.', array(
      '!count' => $count
    )), 'status');
  }
  else {
    drupal_set_message(t('Import requires an active configuration.'), 'error');
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function signature_cron_queue_info() {
  return array(
    'signature_import_queue' => array(
      'worker callback' => 'signature_import_worker',
      'time' => 60,
    ),
  );
}

/**
 * Process the contents of the action feed.
 */
function signature_process_import_feed($feed_url, $timeout, $full_import = FALSE) {

  // Get the last time it was run.
  $last_run = (int) variable_get('signature_cron_last_run', 0);

  // Store the last time the feed was imported to allow subsequent imports
  // to skip unmodified actions.
  $this_run = time();

  $count = 0;
  $actions = signature_read_import_feed($feed_url, $timeout);
  foreach ($actions as $action) {
    $changed = ((int) $action->last_modified) >= $last_run;
    $mapping = SignatureActionMapping::load($action->action_id);
    if ($full_import || $changed || $mapping === FALSE) {
      signature_import_worker($action);
      $count += 1;
    }
  }

  variable_set('signature_cron_last_run', $this_run);

  return $count;
}

/**
 * Reads the updated action feed.
 */
function signature_read_import_feed($feed_url, $timeout) {

  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $feed_url);
  curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);

  // Include the header in result.
  curl_setopt($ch, CURLOPT_HEADER, 1);

  // Make the request.
  try {
    $response = curl_exec($ch);
    $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
  }
  catch (Exception $ex) {
    @curl_close($ch);
    $message = 'Unable to retrieve feed from [@url]';
    watchdog('signature', $message, array(
      '@endpoint' => $feed_url,
    ));
    // Nothing to queue.
    return array();
  }

  if ($http_code !== 200) {
    watchdog('signature', 'Error occurred while retrieving feed');
    // Nothing to queue.
    return array();
  }

  // Extract the response body.
  $header_length = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
  $body = trim(substr($response, $header_length));

  @curl_close($ch);

  $data = json_decode($body);
  if (!isset($data)) {
    watchdog('signature', 'Unable to parse feed body');
    // Nothing to queue.
    return array();
  }

  return $data;
}

/**
 * Cron queue worker callback.
 *
 * @param StdClass $tap
 *   An associative array containing the following:
 *   - action_id: the TAP-to-TakePart id of the action.
 *   - title: the title of the action.
 *   - url: the path of action on the site.
 *   - image_url: the URL of the action image.
 *   - type: the type of action.
 *   - topic: array of topic vocabulary terms for the action.
 *   - tags: array of free tag vocabulary terms for the action.
 */
function signature_import_worker($tap) {
  $mapping = SignatureActionMapping::load($tap->action_id);
  if ($mapping === FALSE) {
    $mapping = SignatureActionMapping::create($tap->action_id);
  }
  $mapping->update($tap);
  $mapping->save();
}

class SignatureActionMapping {

  protected $_existing = FALSE;
  protected $_tap_id = NULL;
  protected $_data = NULL;

  protected $_stub = NULL;
  protected $_endpoint = NULL;

  public static function load($tap_id) {
    $record = db_select('signature_node', 'sn')
      ->fields('sn')
      ->condition('tap_id', $tap_id)
      ->execute()
      ->fetchObject();
    if ($record !== FALSE) {
      return self::read($record);
    }
    return FALSE;
  }

  public static function loadByNodeId($nid) {
    $record = db_select('signature_node', 'sn')
      ->fields('sn')
      ->condition('nid', $nid)
      ->execute()
      ->fetchObject();
    if ($record !== FALSE) {
      return self::read($record);
    }
    return FALSE;
  }

  protected static function read($record) {
    $mapping = new SignatureActionMapping($record->tap_id);
    $mapping->_existing = TRUE;
    $mapping->_data = empty($record->data) ? NULL : unserialize($record->data);
    $mapping->_stub = new SignatureActionStub($record->nid, $mapping->_data);
    if ($record->pm_signup_endpoint_id !== 0) {
      $mapping->_endpoint = new SignatureActionEndpoint(
        $record->pm_signup_endpoint_id);
    }
    else {
      $mapping->_endpoint = new SignatureActionEndpoint();
    }
    return $mapping;
  }

  public static function create($tap_id) {
    $mapping = new SignatureActionMapping($tap_id);
    $mapping->_stub = new SignatureActionStub();
    $mapping->_endpoint = new SignatureActionEndpoint();
    return $mapping;
  }

  protected function __construct($tap_id) {
    $this->_tap_id = $tap_id;
  }

  public function tapID() {
    return $this->_tap_id;
  }

  public function stub() {
    return $this->_stub;
  }

  public function endpoint() {
    return $this->_endpoint;
  }

  public function update($tap) {
    $this->stub()->update($tap);
    $this->endpoint()->update($tap);
    $this->_data = $tap;
  }

  public function save() {
    $nid = $this->stub()->save();
    $endpoint_id = $this->endpoint()->save();
    if ($nid !== FALSE && $endpoint_id !== FALSE) {
        $data = is_null($this->_data) ? '' : serialize($this->_data);
        if ($this->_existing) {
          return db_update('signature_node')
            ->fields(array(
              'data' => $data,
              'nid' => $nid,
              'pm_signup_endpoint_id' => $endpoint_id,
            ))
            ->condition('tap_id', $this->_tap_id)
            ->execute();
        }
        else {
          db_insert('signature_node')
            ->fields(array(
              'tap_id' => $this->_tap_id,
              'nid' => $nid,
              'pm_signup_endpoint_id' => $endpoint_id,
              'data' => $data,
            ))
            ->execute();
        }
    }
  }

  public function delete($stub = TRUE, $endpoint = TRUE) {
    if (isset($this->_tap_id)) {
      if ($stub) { $this->stub()->delete(); }
      if ($endpoint) { $this->endpoint()->delete(); }
      db_delete('signature_node')
        ->condition('tap_id', $this->_tap_id)
        ->execute();
    }
  }
}

class SignatureActionStub {

  protected $_node = FALSE;
  protected $_data = NULL;

  public function __construct($nid = NULL, $data = NULL) {
    $this->_node = node_load($nid);
    $this->_data = $data;
  }

  protected static function createNode($title, $type) {
    $node = new StdClass();
    $node->title = $title;
    $node->type = $type;
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    return $node;
  }

  public static function createTaxonomyTerm($vocabulary_name, $name) {
    $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
    $term = new StdClass();
    $term->vid = $vocabulary->vid;
    $term->name = $name;
    $term->vocabulary_machine_name = $vocabulary_name;
    taxonomy_term_save($term);
    return $term;
  }

  public static function loadActionTypeTerm($name) {
    $terms = array();
    $name = trim($name);
    $list = taxonomy_get_term_by_name($name, 'action_type');
    if (!empty($list)) {
      $terms[] = reset($list);
    }
    else {
      $terms[] = self::createTaxonomyTerm('action_type', $name);
    }
    return reset($terms);
  }

  public static function loadTopicTerms($names) {
    $terms = array();
    foreach ($names as $name) {
      $name = trim($name);
      $list = taxonomy_get_term_by_name($name, 'topic');
      if (!empty($list)) {
        $terms[] = reset($list);
      }
    }
    return $terms;
  }

  public static function loadFreeTagTerms($names) {
    $terms = array();
    foreach ($names as $name) {
      $name = trim($name);
      $list = taxonomy_get_term_by_name($name, 'free_tags');
      if (!empty($list)) {
        $terms[] = reset($list);
      }
      else {
        $terms[] = self::createTaxonomyTerm('free_tags', $name);
      }
    }
    return $terms;
  }

  public static function loadDisplayTagTerm($name) {
    $terms = self::loadFreeTagTerms(array($name));
    return reset($terms);
  }

  public static function taxonomyFieldValue($terms, $language) {
    $value = array($language => array());
    foreach ($terms as $term) {
      $value[$language][] = array(
        'tid' => $term->tid,
      );
    }
    return $value;
  }

  public static function textFieldValue($text, $language, $format = NULL) {
    $value = array($language => array());
    $value[$language][] = array(
      'value' => $text,
      'format' => $format,
    );
    return $value;
  }

  public static function linkFieldValue($url, $text, $language) {
    $value = array($language => array());
    $value[$language][] = array(
      'url' => $url,
      'title' => $text,
      'attributes' => serialize(array(
        'target' => '_blank',
      )),
    );
    return $value;
  }

  public static function createMediaFile($url) {

    // Break the URL into parts.
    $url_parts = parse_url($url);
    $path_parts = pathinfo($url_parts['path']);

    // Prepare local storage
    $local_path = 'public://action/images/' . $path_parts['basename'];

    $dirname = drupal_dirname($local_path);
    if (file_prepare_directory($dirname, FILE_CREATE_DIRECTORY)) {

      // Copy down and save the image.
      $response = drupal_http_request($url);
      if (!isset($response->error) && !empty($response->data)) {
        $normalized = file_stream_wrapper_uri_normalize($local_path);
        $file = file_save_data($response->data, $normalized, FILE_EXISTS_RENAME);
        return $file;
      }
    }
    return FALSE;
  }

  public static function mediaFieldValue($fid, $language) {
    return array($language => array(array(
      'fid' => $fid,
      'title' => NULL,
      'data' => NULL,
    )));
  }

  public function getPathAlias() {
    if (isset($this->_data) && isset($this->_data->url)) {
      $url = $this->_data->url;
      return substr($url, 0, 1) === '/' ? substr($url, 1) : $url;
    }
    return NULL;
  }

  public function updateTaxonomy($tap) {

    // Update action type
    $action_type = self::loadActionTypeTerm($tap->type);
    $this->_node->field_action_type = self::taxonomyFieldValue(
      array($action_type), $this->_node->language);

    // Update action topic(s).
    $topics = self::loadTopicTerms($tap->topic);
    $this->_node->field_topic = self::taxonomyFieldValue($topics,
      $this->_node->language);

    // Update display tag
    $display_tag = self::loadDisplayTagTerm('Action');
    $this->_node->field_display_tag = self::taxonomyFieldValue(
      array($display_tag), $this->_node->language);

    // Update the action free tags (creating any new tags).
    $free_tags = self::loadFreeTagTerms($tap->tags);
    $this->_node->field_free_tag = self::taxonomyFieldValue($free_tags,
      $this->_node->language);
  }

  public function resolveToExternalURL($url) {
    if (!(strlen($url) > 4 && strpos($url, 'http') === 0)) {
      $tap_domain = variable_get('signature_action_import_tap_domain',
        'takeaction.takepart.com');
      $url = 'http://' . $tap_domain . ($url[0] == '/' ? '' : '/') . $url;
    }
    return $url;
  }

  public function updateActionEngagement($tap) {

    // Update the call to action
    $this->_node->field_tab_call_to_action = self::textFieldValue(
      $tap->title, $this->_node->language);

    // Update the action URL
    $url = self::resolveToExternalURL($tap->url);
    $this->_node->field_action_url = self::linkFieldValue($url,
      $tap->call_to_action, $this->_node->language);

    // Update the action icon
    $icon_url = self::resolveToExternalURL($tap->icon);
    $this->_node->field_action_icon = self::textFieldValue($icon_url,
      $this->_node->language);
  }

  public function update($tap) {

    // Create or update the base node.
    if ($this->_node === FALSE) {
      $this->_node = self::createNode($tap->title, 'action');
    }
    else {
      $this->_node->title = $tap->title;
    }

    // Update the action image if it has changed.
    if (is_null($this->_data) || $tap->image_url !== $this->_data->image_url) {
      $file = self::createMediaFile($tap->image_url);
      if ($file !== FALSE) {
        $this->_node->field_action_main_image = self::mediaFieldValue(
          $file->fid, $this->_node->language);
      }
    }

    // Update the content taxonomy.
    $this->updateTaxonomy($tap);

    // Update the action engagement.
    $this->updateActionEngagement($tap);

    // Update the internal data to allow tap-action-path token replacement.
    $this->_data = $tap;
    $this->_node->signature_tap_path = $this->getPathAlias();
  }

  public function save() {
    if ($this->_node !== FALSE) {
      $this->_node->uid = 1;
      $node = node_submit($this->_node);
      node_save($node);
      return $node->nid;
    }
    return FALSE;
  }

  public function delete() {
    if ($this->_node !== FALSE) {
      node_delete($this->_node->nid);
    }
  }
}

class SignatureActionEndpoint {

  protected $_endpoint = FALSE;
  protected $_signup = FALSE;

  public function __construct($endpoint_id = NULL) {
    if (!empty($endpoint_id)) {
      $this->_endpoint = SignatureSignupEndpoint::load($endpoint_id);
    }
    else {
      $this->_endpoint = new SignatureSignupEndpoint();
    }
  }

  public function getID() {
    if ($this->_endpoint !== FALSE) {
      $id = $this->_endpoint->getID();
      return is_null($id) ? FALSE : $id;
    }
    return FALSE;
  }

  public function update($tap) {

    $this->_signup = $tap->allows_signups;
    if ($this->_signup) {

      // BlueHornet just needs to be enabled, the signups will contain a list
      // of segments.
      $this->_endpoint->setPluginEnabled(
        'bluehornet.pm_signup.handler', TRUE);
      $this->_endpoint->setPluginConfiguration(
        'bluehornet.pm_signup.handler', array('account' => 'takepart'));

      // Update Blue State Digital
      $configuration = $this->_endpoint->getPluginConfiguration(
        'bluestatedigital.pm_signup.handler');
      $builder = new BlueStateDigitalConfigurationBuilder($configuration);
      $builder->update($tap);
      $this->_endpoint->setPluginConfiguration(
        'bluestatedigital.pm_signup.handler', $builder->getConfiguration());
    }
  }

  public function save() {
    if ($this->_signup) {
      $this->_endpoint->save();
      return $this->_endpoint->getID();
    }
    return 0;
  }

  public function delete() {
    $this->_endpoint->delete();
  }
}

class BlueStateDigitalConfigurationBuilder {

  public static function fieldLabelToNameMapping() {
    return array(
      'Email' => 'email',
      'First Name' => 'name.first',
      'Last Name' => 'name.last',
      'Address' => 'address.address',
      'City' => 'address.city',
      'State/Region/Province' => 'address.state.code',
      'Country' => 'address.country',
      'Zip/Postal Code' => 'address.postal-code',
      'Referrer Code' => 'partner.code',
      'action-id' => 'action.id',
      'User Custom Message' => 'action.message',
      'Public Display Opt-In' => 'action.opt-ins.display',
      'Referrer Opt-In' => 'action.opt-ins.partner',
    );
  }

  public static function optInFieldLabels() {
    return array(
      'Newsletter Opt-In',
      'Newsletter Opt-In 2',
      'Newsletter Opt-In 3',
      'Newsletter Opt-In 4',
      'Newsletter Opt-In 5',
    );
  }

  protected static function fieldWithLabel($label, $fields) {
    foreach ($fields as $id => $field) {
      if ($field['label'] === $label) {
        return $id;
      }
    }
    return FALSE;
  }

  protected $_configuration;

  public function __construct($configuration) {
    $this->_configuration = $configuration;
  }

  public function getConfiguration() {
    return $this->_configuration;
  }

  protected function cloneSignupForm($tap_id, $title, $type) {
    $api = bluestatedigital_get_api('signup');
    $env = variable_get('signature_environment_prefix', '');
    $template_form_id = variable_get('signature_template_form_id', 31);
    try {
      $name = "{$type} - {$title}";
      $slug = "action-{$tap_id}";
      if (!empty($env)) {
        $title = "{$env}: " . $title;
        $name = "{$env}: " . $name;
        $slug = strtolower($env) . "-{$slug}";
      }
      $form_id = $api->cloneForm($template_form_id, $title, $name, $slug);
    }
    catch (BlueStateDigitalApiException $ex) {
      return FALSE;
    }
    return $form_id;
  }

  protected function getSignupFormFields($form_id, $refresh = FALSE) {
    static $fields = array();
    if (!isset($fields[$form_id]) || $refresh) {
      $api = bluestatedigital_get_api('signup');
      try {
        $fields[$form_id] = $api->listFormFields($form_id);
      }
      catch (BlueStateDigitalApiException $ex) {
        return FALSE;
      }
    }
    return $fields[$form_id];
  }

  protected function setConstituentGroup($field_id, $group_id) {
    $api = bluestatedigital_get_api('signup');
    try {
      $api->setFieldConsGroup($field_id, $group_id);
    }
    catch (BlueStateDigitalApiException $ex) {
      return FALSE;
    }
    return TRUE;
  }

  protected function buildFieldMapping($fields) {
    $label_to_name = self::fieldLabelToNameMapping();
    $mapping = array();
    foreach ($fields as $id => $field) {
      $label = $field['label'];
      if (isset($label_to_name[$label])) {
        $name = $label_to_name[$label];
        $mapping[$name] = $id;
      }
    }
    return $mapping;
  }

  protected function setConsGroupForOptIn($opt_in, $field_id) {
    $endpoint = SignupEndpoint::loadByName($opt_in);
    if ($endpoint !== FALSE) {
      $configuration = $endpoint->getPluginConfiguration(
        'bluestatedigital.pm_signup.handler');
      if (isset($configuration['cons-group-id'])) {
        $group_id = $configuration['cons-group-id'];
        $this->setConstituentGroup($field_id, $group_id);
      }
    }
  }

  protected function getActiveOptIns() {
    $opt_ins = array(
      'used' => array(),
      'field-ids' => array(),
    );
    if (isset($this->_configuration['opt-ins'])) {
      $opt_ins = $this->_configuration['opt-ins'];
    }
    return $opt_ins;
  }

  protected function buildOptInMapping($opt_ins, $fields) {

    // Get the active set of opt-ins.
    $active = $this->getActiveOptIns();
    $used = $active['used'];
    $field_ids = $active['field-ids'];

    foreach ($opt_ins as $opt_in) {
      if (!array_key_exists($opt_in->param, $field_ids)) {
        $available = array_diff(self::optInFieldLabels(), $used);
        $chosen = reset($available);
        if ($chosen !== FALSE) {
          $field_id = self::fieldWithLabel($chosen, $fields);
          $this->setConsGroupForOptIn($opt_in->param, $field_id);

          $field_ids[$opt_in->param] = $field_id;
          $used[] = $chosen;
        }
      }
    }

    return array(
      'used' => $used,
      'field-ids' => $field_ids,
    );
  }
  protected static function addOptInToMapping($new_opt_in, $fields, &$mapping) {


    $all = array();
    foreach (self::optInFieldLabels() as $label) {
      $all[] = array($label, self::fieldWithLabel($label, $fields));
    }

    $used = array();
    foreach ($mapping as $label_field_pair) {
      list($label, $field_id) = $label_field_pair;
      if (!is_null($label)) {
        $used[] = $label;
      }
    }

    $available = array_diff($labels, $used);

    $chosen = reset($available);
    if ($chosen !== FALSE) {
      foreach ($all as $label_field_pair) {
        list($label, $field_id) = $label_field_pair;
        if ($label === $chosen) {
          $mapping[$new_opt_in] = $label_field_pair;
          return $field_id;
        }
      }
    }

    return FALSE;
  }


  public function update($tap) {

    // Create a form for the action if one does not exist.
    if (!isset($this->_configuration['form-id'])) {
      $this->_configuration['form-id'] = $this->cloneSignupForm($tap->action_id,
        $tap->title, $tap->type);
    }
    $form_id = $this->_configuration['form-id'];

    $fields = $this->getSignupFormFields($form_id);
    $this->_configuration['field-ids'] = $this->buildFieldMapping($fields);

    $this->_configuration['opt-ins'] = $this->buildOptInMapping(
      $tap->opt_ins, $fields);
  }
}
