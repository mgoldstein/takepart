<?php

//variables
DEFINE('VIDEOSITEMAP', 'public://videositemap.xml');

//loading files from tp_videos.module
use \Participant\MetaData\Video\YoutubeVideo;
use \Participant\MetaData\Video\JWPlatformVideo;

//module load inc file for obj
module_load_include('inc', 'takepart_custom_sitemap', 'classes/takepart_custom_sitemap.class');

/**
 * Implements hook_cron().
 *
 * @function:
 *  This function is used to schedule cron for a specific time
 */
function takepart_custom_sitemap_cron() {
  //default variables
  $schedule_hour = variable_get('tp_video_sitemap_regen_hour', 0);
  
  //only run on cron if scheduler is turned on
  if ($schedule_hour != 'Off') {
    $time = time();
    $time_hour_now = date("H", $time);
    
    //schedules next execution variable
    $schedule_next_execution = variable_get('tp_video_sitemap_next_exec', 0);
    if (empty($schedule_next_execution)) {
      $schedule_next_execution = 0;
    }
    
    //checks if the time is the scheduled time and then sets the next execution time
    if ($time >= strtotime($schedule_next_execution) && $time_hour_now == $schedule_hour) {
      //sets next execution time based on hour
      $days = variable_get('tp_video_sitemap_regen_day', 1);
      variable_set('tp_video_sitemap_next_exec', date("Y-m-d H:00:00", $time + (60 * 60 * 24 * $days)));
    
      //this allows cron to run the batch
      takepart_custom_video_sitemap_batch();
      $batch = &batch_get();
      $batch['progressive'] = FALSE; //this is needed to turn off the progressive
      batch_process('');    
    }
  }
}

/**
 * Implements hook_menu().
 */
function takepart_custom_sitemap_menu() {
  $items = array();
  
  //adds takepart-videos sitemap into xmlsitemap
  $items['admin/config/search/xmlsitemap/takepart-videos'] = array(
    'title' => t('Takepart - Video Sitemap'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tp_video_sitemap_form'),
    'file' => 'tp_video_sitemap_form.admin.inc',
    'file path' => drupal_get_path('module', 'takepart_custom_sitemap') . '/inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_IS_LOCAL_TASK
  );
  
  $video_sitemap = variable_get('tp_video_sitemap_location', 'videositemap.xml');
  //creates page callback if sitemap is set
  if (!empty($video_sitemap)) {
    $items[$video_sitemap] = array(
      'page callback' => '_tp_video_sitemap_xml_callback',
      'access callback' => TRUE
    );
  }
  
  return $items;
}

/**
 *  @function:
 *    This function is used to serve the xml file
 */
function _tp_video_sitemap_xml_callback() {
  //checks if the file exist on the server
  if (file_exists(VIDEOSITEMAP)) {
    drupal_add_http_header('Content-Type', 'application/xml; charset=utf-8');
    $content = file_get_contents(VIDEOSITEMAP);
    print($content);
    drupal_exit();
  }
  
  //default goto 404 page
  drupal_goto('404');
}

/**
 *  Callback for batch api
 */
function takepart_custom_video_sitemap_batch() {
  //defines a new batch op
  $batch = array(
    'operations' => array(
      array('_takepart_custom_video_nodes', array()),
      array('_takepart_custom_video_xml', array()),
    'finished' => '_takepart_custom_video_sitemap_finished',
    'title' => t('Takepart - Video Sitemap Generation'),
    )
  );
  
  batch_set($batch);
}

/**
 *  @function:
 *    First step in the batch api
 *    This function is used to gather all information about the video nodes
 *    and add them to the sitemap obj
 */
function _takepart_custom_video_nodes(&$context) {
  //variables
  global $base_url;
  
  //initial setup
  if (!isset($context['sandbox']['counter'])) {
    $count = $context['sandbox']['counter'] = 0;
    $context['sandbox']['total_counter'] = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'video', '=')
    ->condition('status', 1, '=')
    ->execute()
    ->rowCount();
    $xml = new VideoSiteMap();
  }
  else {
    $count = $context['sandbox']['counter'];
    $xml = $context['sandbox']['sitemap'];
  }
  
  //selects the node from the system that are related to the videos
  $db_result = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('type', 'video', '=')
    ->condition('status', 1, '=')
    ->range($count, 100)
    ->execute()
    ->fetchAll();
  
  //ensures that the results are still valid before continuing
  if (!empty($db_result)) {
    foreach ($db_result as $key => $values) {
      //resets values
      $player_loc = $video_loc = $video_img = $node_url = '';
      
      $node = node_load($values->nid);
      if (is_object($node)) {
        $context['message'] = check_plain($node->title);
        $node_url = url('node/' . $values->nid);
        
        //gets value for article subhead
        $subhead = field_get_items('node', $node, 'field_article_subhead');
        $subhead_markup = field_view_value('node', $node, 'field_article_subhead', $subhead[0]);
        
        //mapping to metatag
        $video_loc = token_replace('[node:attached-video-file-secure-url]', array('node' => $node));
        $video_img = token_replace('[node:attached-video-image]', array('node' => $node));
        
        /**
         *  copied from tp_videos.module.
         *  issue with youtube portion.
         *  key was incorrect
         */
        if ($file = tp_videos_attached_file($node, 'field_video')) {
          if ($params = tp_videos_parse_wrapper_uri($file->uri)) {
            // Youtube Videos
            if ($file->filemime == 'video/youtube') {
              $player_loc = 'https://www.youtube.com/v/' . $params['v'] . '?version=3&amp;autohide=1';
            }
            // JWPlatform Videos (no playlists)
            elseif ($file->filemime == 'video/jwplatform' && substr($file->uri, 0, 16) === 'jwplatform-video') {
              $api = pm_jwplatform_get_api();
              $video = new JWPlatformVideo($api, $params['key'], 640);
              $player_loc = is_null($video) ? NULL : $video->openGraphURL($https);
            }
          }
        }

        //formatted to obj
        $item = array(
          'loc' => $base_url . $node_url,
          'keys' => array(
            'thumbnail_loc' => $video_img,
            'title' => truncate_utf8($node->title, 100, FALSE, TRUE), //limits to 100 as spec from google
            'description' => truncate_utf8($subhead_markup['#markup'], 2048, FALSE, TRUE), //spec from google
            'content_loc' => $video_loc,
            'player_loc' => $player_loc,
            'publication_date' => date('c', $node->published_at)
          )
        );
      }
      
      /**
       *  @logic:
       *    Will check to ensure that player and video loc are not empty.
       *
       *    1. Doesnt allow for player loc and video loc to be empty
       *    2. Checks to ensure that the url is not a ^live/ url
       */
      if ((!empty($player_loc) && !empty($video_loc)) && (!preg_match('/\/live\//', $node_url))) {
        $xml->add_video_item($item);
      }
    }
  }
  
  //increment the counter
  $context['sandbox']['counter'] += 100;
  
  //continue only if its finish
  if ($context['sandbox']['counter'] > $context['sandbox']['total_counter']) {
    $context['finished'] = 1;
    $context['results']['sitemap'] = $xml;
  }
  else {
    $context['finished'] = 0;
    $context['sandbox']['sitemap'] = $xml;
  }

}

/**
 *  @Function:
 *    Batch process will generate the new xml in the correct location
 */
function _takepart_custom_video_xml(&$context) {
  //default variables
  $xml = $context['results']['sitemap'];
  $xml_final = $xml->generate_xml();
  
  //saves information onto the server
  file_unmanaged_save_data($xml_final, VIDEOSITEMAP, FILE_EXISTS_REPLACE);
  
  //marks this batch op as finish
  $context['finished'] = 1;
}

/**
 *  @function:
 *    batch operation for the finish portion
 */
function _takepart_custom_video_sitemap_finished($success, $results, $operations) {
  drupal_set_message('Batch Operation for regenating the sitemap is complete');
}
