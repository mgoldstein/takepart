<?php

class ViewHelperAuthor {
  public function __construct($name, $href) {
    $this->name = $name;
    $this->href = $href;
    $this->image = NULL;
    $this->summary = NULL;
    $this->follow = NULL;
  }
}

function article_support_next_article($wrapper) {

  // Get the first article from a list of articles created before this one
  // sorted from newest to oldest
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title'))
    ->condition('created', $wrapper->created->value(), '<')
    ->condition('type', 'openpublish_article')
    ->orderBy('created', 'DESC')
    ->orderBy('nid', 'DESC')
    ->range(0, 1);

  // Fetch the previous article.
  $previous = $query->execute()->fetchAssoc();
  if ($previous !== FALSE) {
    return new ViewHelperLink($previous['title'],
      url('node/' . $previous['nid']));
  }
}

/**
 * Implements hook_node_view().
 */
function article_support_node_view($node, $view_mode, $langcode) {

  if ($node->type === 'article' && $view_mode === 'full') {

    // Additional variables to make available to the template.
    $variables = array(
      'next_article' => NULL,
    );

    // Get the value of each additional variable.
    $wrapper = entity_metadata_wrapper('node', $node);
    foreach (array_keys($variables) as $name) {
      $function = "article_support_{$name}";
      if (function_exists($function)) {
        $variables[$name] = call_user_func_array($function, array($wrapper));
      }
    }

    // Pass the additional variables through to the preprocessor.
    $node->content['#additional_variables'] = $variables;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function article_support_preprocess_node(&$variables) {

  // Transfer all additional variables added when the view of the article was
  // built to the template.
  foreach ($variables['elements']['#additional_variables'] as $key => $value) {
    $variables[$key] = $value;
  }
}
