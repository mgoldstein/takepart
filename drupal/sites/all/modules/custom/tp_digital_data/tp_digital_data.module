<?php
/**
 * @file
 * Digital Data Module
 */

/**
 * Available data building strategies.
 *
 * Strategies should be listed decreasing order of precedence. The factory will
 * use the first strategy to claim the page, or the default strategy if the
 * page is not claimed.
 */
function tp_digital_data_strategies() {
  return array(
    'DDCampaign',
    'DDTopic',
    'DDSiteFrontPage',
  );
}

/**
 * Digital Data strategy factory singleton.
 */
function tp_digital_data_strategy_factory() {
  static $factory = NULL;
  if (is_null($factory)) {
    $strategies = tp_digital_data_strategies();
    $factory = new ddStrategyFactory($strategies);
  }
  return $factory;
}

/**
 * Implements hook_page_build().
 */
function tp_digital_data_page_build(&$page) {

  $path = current_path();

  // Skip if the page is part of the admin.
  if (path_is_admin($path)) { return; }

  $factory = tp_digital_data_strategy_factory();
  if ($strategy = $factory->createForPage($path, $page)) {
    $data = $strategy->build($page);
    $json = json_encode($data);
    $json = str_replace('"%document.location.href"', 'document.location.href', $json);
    $json = str_replace('"%document.referrer"', 'document.referrer', $json);
    $page['tp_digital_data'] = $json;
  }
}

/**
 * Implements hook form alter
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function tp_digital_data_form_alter(&$form, &$form_state, $form_id){
	if(isset($form_state['build_info']['base_form_id']) && $form_state['build_info']['base_form_id'] == 'node_form'){
		global $user;
		$roles = $user->roles;
		if(!in_array('administrator', $roles)){
			$form['field_permanent_title']['#disabled'] = true;
//			$form['field_permanent_title']['#access'] = false;
		}
		array_unshift($form['#submit'], 'tp_digital_data_perm_headline');
	}
}

/**
 * Submit handler for node forms in tp_digital_data_form_alter()
 * @param $form
 * @param $form_state
 */
function tp_digital_data_perm_headline(&$form, &$form_state){
	$perm_title = $form_state['values']['field_permanent_title']['und'][0]['value'];
	if($form_state['values']['status'] == 1 && empty($perm_title)){
		$title = $form_state['values']['title'];
		$form_state['values']['field_permanent_title']['und'][0]['value'] = $title;
	}
}

/**
 * Implements hook_token_info()
 * @return array
 */
function tp_digital_data_token_info(){

	$info = array();
	$info['types']['digital_data'] = array(
		'name' => t('Digital Data Layer'),
		'description' => t('Digital data layer tokens'),
	);
	$info['tokens']['digital_data']['perm_title'] = array(
		'name' => t('Permanent Titles'),
		'description' => t('Permanent title for analytics.'),
	);
	return $info;

}

/**
 * Implements hook_tokens()
 */
function tp_digital_data_tokens($type, $tokens, array $data = array(), array $options = array()){
	$replacements = array();

	if ($type == 'digital_data') {
		foreach ($tokens as $name => $original) {
			switch ($name) {
				case 'perm_title':
					$node = menu_get_object();
					$value = tp_digital_data_get_perm_headline($node);
					$replacements[$original] = $value;
					break;
			}
		}
	}
	return $replacements;
}

/**
 * Helper function for getting the permanent headline
 * @param $node
 * @return bool
 */
function tp_digital_data_get_perm_headline($node){
	if($perm_title = field_get_items('node', $node, 'field_permanent_title')){
		$perm_title = $perm_title[0]['value'];
	}else{
		$perm_title = $node->title;
	}
	return $perm_title;
}