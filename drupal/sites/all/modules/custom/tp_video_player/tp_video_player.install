<?php
/**
 * @file
 * Sets up the base tables for video player configurations and video player
 * ad schedule items.
 */

/**
 * Implements hook_schema().
 */
function tp_video_player_schema() {
  $schema = array();

  $schema['tp_video_player_configuration'] = array(
    'description' => 'The base table for video player configurations.',
    'fields' => array(

      'id' => array(
        'description' => 'Primary key identifier for the configuration.',
        'type' => 'serial',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Export name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Promo */
      'promo_image' => array(
        'description' => 'Promo image.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'promo_title' => array(
        'description' => 'Promo title.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'show_promo_title' => array(
        'description' => 'Display promo title.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Layout */
      'show_controls' => array(
        'description' => 'Show the player controls.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'responsive' => array(
        'description' => 'Responsive sizing.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'width' => array(
        'description' => 'Width of player in pixels for non-responsive players, width part of aspect ratio for responsive players.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'height' => array(
        'description' => 'Height of player in pixels for non-responsive players, height part of aspect ratio for responsive players.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'skin' => array(
        'description' => 'Player skin.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'stretching' => array(
        'description' => 'How to resize images and video to fit the display.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Playback */
      'auto_start' => array(
        'description' => 'Enable automatic automatic start of video playback.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'fallback' => array(
        'description' => 'Fallback to download link.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'mute_playback' => array(
        'description' => 'Enable muting of video playback.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'primary_player' => array(
        'description' => 'Which rendering mode to use for rendering the player if both are available.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'repeat_playback' => array(
        'description' => 'Enable looping of video playback.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Listbar */
      'playlist_position' => array(
        'description' => 'Position of the built in playlist control.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'playlist_layout' => array(
        'description' => 'Layout of the built in playlist control.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'playlist_size' => array(
        'description' => 'Size of the built in playlist control.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Sharing */
      'enable_share' => array(
        'description' => 'Enable social sharing.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'share_heading' => array(
        'description' => 'Heading to use when sharing from the player.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'share_url' => array(
        'description' => 'URL to use when sharing from the player.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'embed_code' => array(
        'description' => 'Embed code for adding the player to an external site.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Advertising */
      'ad_frequency' => array(
        'description' => 'Frequency at which pre-roll ads should be played in playlists.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'ad_client' => array(
        'description' => 'Player level ad client.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'ad_tag' => array(
        'description' => 'Player level ad tag.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'ad_message' => array(
        'description' => 'Player level ad message.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Analytics */
      'enable_jwplayer_analytics' => array(
        'description' => 'Enable JWPlayer analytics.',
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'google_analytics_title' => array(
        'description' => 'Playlist item property to use for GA tracking.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'google_analytics_object' => array(
        'description' => 'Name of the GA tracking object.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'site_catalyst_media_name' => array(
        'description' => 'Site catalyst media name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),
      'site_catalyst_player_name' => array(
        'description' => 'Site catalyst player name.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => NULL,
      ),

      /* Change tracking timestamps */
      'created_at' => array(
        'description' => 'The Unix timestamp when the configuration was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'updated_at' => array(
        'description' => 'The Unix timestamp when the configuration was last changed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('id'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['tp_video_player_entity_configuration'] = array(
    'description' => 'The table for attaching video player configurations to entities.',
    'fields' => array(

      'configuration_id' => array(
        'description' => 'Primary key identifier for the configuration.',
        'type' => 'int',
        'unsigned' => FALSE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'description' => 'The type of entity.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'entity_id' => array(
        'description' => 'Primary key identifer for the entity.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'view_mode' => array(
        'description' => 'View mode for the node.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
    ),
    'unique keys' => array(
      'configuration_id' => array('configuration_id'),
      'entity_type_and_id_view_mode' => array('entity_type', 'entity_id', 'view_mode'),
    ),
  );

  return $schema;
}

function tp_video_player_transfer_from_fields_sql() {
return <<<EOSQL
  SELECT
    n.nid,
    f1.field_sharing_enabled_value,
    f2.field_share_url_value,
    f3.field_player_embeddable_value,
    f4.field_auto_play_value,
    f5.field_mute_playback_value,
    f6.field_ads_client_value,
    f7.field_ads_tag_value,
    f8.field_playlist_position_value,
    f9.field_playlist_layout_value,
    f10.field_playlist_size_value,
    f11.field_player_skin_value
  FROM node n

  LEFT JOIN field_data_field_sharing_enabled f1
    ON  f1.entity_type = 'node'
    AND f1.entity_id = n.nid
    AND f1.bundle = n.type
    AND f1.field_sharing_enabled_value <= 0

  LEFT JOIN field_data_field_share_url f2
    ON  f2.entity_type = 'node'
    AND f2.entity_id = n.nid
    AND f2.bundle = n.type
    AND LENGTH(f2.field_share_url_value) > 0

  LEFT JOIN field_data_field_player_embeddable f3
    ON  f3.entity_type = 'node'
    AND f3.entity_id = n.nid
    AND f3.bundle = n.type
    AND f3.field_player_embeddable_value != 1

  LEFT JOIN field_data_field_auto_play f4
    ON  f4.entity_type = 'node'
    AND f4.entity_id = n.nid
    AND f4.bundle = n.type
    AND f4.field_auto_play_value != 0

  LEFT JOIN field_data_field_mute_playback f5
    ON  f5.entity_type = 'node'
    AND f5.entity_id = n.nid
    AND f5.bundle = n.type
    AND f5.field_mute_playback_value != 0

  LEFT JOIN field_data_field_ads_client f6
    ON  f6.entity_type = 'node'
    AND f6.entity_id = n.nid
    AND f6.bundle = n.type
    AND f6.field_ads_client_value != 'googima'

  LEFT JOIN field_data_field_ads_tag f7
    ON  f7.entity_type = 'node'
    AND f7.entity_id = n.nid
    AND f7.bundle = n.type
    AND f7.field_ads_tag_value != 'http://pubads.g.doubleclick.net/gampad/ads?sz=640x360&iu=/4355895/TP3_Video_640x360&ciu_szs&impl=s&gdfp_req=1&env=vp&output=xml_vast2&unviewed_position_start=1&url=[referrer_url]&correlator=[timestamp]'

  LEFT JOIN field_data_field_playlist_position f8
    ON  f8.entity_type = 'node'
    AND f8.entity_id = n.nid
    AND f8.bundle = n.type
    AND f8.field_playlist_position_value != 'none'

  LEFT JOIN field_data_field_playlist_layout f9
    ON  f9.entity_type = 'node'
    AND f9.entity_id = n.nid
    AND f9.bundle = n.type
    AND f9.field_playlist_layout_value != 'full'

  LEFT JOIN field_data_field_playlist_size f10
    ON  f10.entity_type = 'node'
    AND f10.entity_id = n.nid
    AND f10.bundle = n.type
    AND f10.field_playlist_size_value != 270

  LEFT JOIN field_data_field_player_skin f11
    ON  f11.entity_type = 'node'
    AND f11.entity_id = n.nid
    AND f11.bundle = n.type
    AND f11.field_player_skin_value != 'glow'

  WHERE n.type = 'video'
  AND (
       f1.field_sharing_enabled_value IS NOT NULL
    OR f2.field_share_url_value IS NOT NULL
    OR f3.field_player_embeddable_value IS NOT NULL
    OR f4.field_auto_play_value IS NOT NULL
    OR f5.field_mute_playback_value IS NOT NULL
    OR f6.field_ads_client_value IS NOT NULL
    OR f7.field_ads_tag_value IS NOT NULL
    OR f8.field_playlist_position_value IS NOT NULL
    OR f9.field_playlist_layout_value IS NOT NULL
    OR f10.field_playlist_size_value IS NOT NULL
    OR f11.field_player_skin_value IS NOT NULL
  )
EOSQL;
}

function tp_video_player_transfer_from_fields() {

  $controller = new TakePartVideoPlayerOverrideController();

  // Get a list of all the existing video nodes.
  $nids = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'video', '=')
    ->execute()
    ->fetchCol();

  // Create an override for each video node.
  foreach ($nids as $nid) {
    $override = $controller->create();
    $controller->save($override);
    $controller->attachOverrideToEntity($override, 'node', $nid, 'full_page');
  }

  // Get the field bases overrides
  $result = db_query(tp_video_player_transfer_from_fields_sql());
  while ($row = $result->fetchAssoc()) {

    $override = $controller->loadOverrideForEntity('node', $row['nid'], 'full_page');

    $override->enable_share = $row['field_sharing_enabled_value'];
    $override->share_url = $row['field_share_url_value'];
    if ($row['field_player_embeddable_value'] == 0) {
      $override->embed_code = '';
    }
    $override->auto_start = $row['field_auto_play_value'];
    $override->mute_playback = $row['field_mute_playback_value'];
    $override->ad_client = $row['field_ads_client_value'];
    $override->ad_tag = $row['field_ads_tag_value'];
    $override->playlist_position = $row['field_playlist_position_value'];
    $override->playlist_layout = $row['field_playlist_layout_value'];
    $override->playlist_size = $row['field_playlist_size_value'];
    $override->skin = $row['field_player_skin_value'];

    $controller->save($override);
  }
}

/**
 * Implements hook_install().
 */
function tp_video_player_install() {
  $controller = new TakePartVideoPlayerConfigurationController();
  foreach (TakePartVideoPlayerConfiguration::globalDefaultNames() as $name => $label) {
    $configuration = $controller->createGlobalDefault($name);
    $configuration->promo_image = '';
    $configuration->promo_title = '[node:title]';
    $configuration->auto_start = 1;
    $configuration->share_heading = 'Share This Video';
    $configuration->share_url = '[f:bool:{node:field_share_url}:{node:field_share_url}:{node:url:absolute}]?cmpid=longtailshare';
    $configuration->embed_code = '[node:iframe-embed-markup]';
    $configuration->site_catalyst_media_name = '[node:title]';
    $configuration->site_catalyst_player_name = $label;
    $configuration->ad_tag = 'http://pubads.g.doubleclick.net/gampad/ads?sz=640x360&iu=/4355895/TP3_Video_640x360&ciu_szs&impl=s&gdfp_req=1&ev=vp&output=xml_vast2&unviewed_position_start=1&url=[referrer_url]&correlator=[timestamp]';
    $configuration->ad_message = 'Your video will play after this brief advertisement';
    $controller->save($configuration);
  }
  tp_video_player_transfer_from_fields();
}

/**
 * Move node configurations to the entity configuration table.
 */
function tp_video_player_update_7100() {

  // Create the entity based configuration table
  $schema = tp_video_player_schema();
  db_create_table('tp_video_player_entity_configuration',
    $schema['tp_video_player_entity_configuration']);

  // Get all of the existing node configurations
  $node_configurations = db_select('tp_video_player_node_configuration', 'nc')
    ->fields('nc', array('configuration_id', 'nid', 'view_mode'))
    ->execute()
    ->fetchAllAssoc();

  // Add the node configurations to the entity based table
  foreach ($node_configurations as $configuration) {
    db_insert('tp_video_player_entity_configuration')
      ->fields(array(
        'configuration_id' => $configuration_id['configuration_id'],
        'entity_type' => 'node',
        'entity_id' => $configuration['nid'],
        'view_mode' => $configuration['view_mode'],
      ))
      ->execute();
  }
}

/**
 * Drop the node base configuration table.
 */
// function tp_video_player_update_7101() {
//   db_drop_table('tp_video_player_node_configuration');
// }
