<?php
/**
 * @file
 * TakePart custom video player module.
 */

/**
 * Include the configuration object functions.
 */
require_once __DIR__ . '/tp_video_player.configuration.inc';

/**
 * Include the settings build functions.
 */
require_once __DIR__ . '/tp_video_player.player_settings.inc';

/**
 * Implements hook_init().
 */
function tp_video_player_init() {
  // Add the CDN hosted JW Player to all pages.
  if ($token = variable_get('tp_video_player_account_token', NULL)) {
    drupal_add_js('//jwpsrv.com/library/' . $token . '.js', array(
      'type' => 'external',
      'scope' => 'header',
      'weight' => 5,
    ));
  }
}

/**
 * Implements hook_menu().
 */
function tp_video_player_menu() {

  // Top level admin item.
  $items = array(
    'admin/config/media/tp-video-player' => array(
      'title' => 'Default Video Player Configurations',
      'description' => 'Default TakePart video player configurations',
      'position' => 'right',
      'weight' => 0,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
  );

  // Page for each default.
  foreach (tp_video_player_defaults_info() as $name => $info) {
    $menu_name = str_replace('_', '-', $name);
    $items["admin/config/media/tp-video-player/defaults/{$menu_name}"] = array(
      'title' => $info['title'],
      'description' => $info['description'],
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array($name),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_form_HOOK_alter().
 */
function tp_video_player_form_node_form_alter(&$form, &$form_state) {

  $node = $form['#node'];

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    $configurations = array();

    // Load the full page defaults.
    $global_default = $node->type == 'video_playlist' ? 'playlist_full_page' : 'full_page';
    $defaults = tp_video_player_load_default_configuration($global_default);
    if (!is_null($defaults)) {
      $configurations[] = $defaults;
    }

    // Load any available node specific configuration.
    $override = tp_video_player_load_entity_configuration('node', $node->nid);
    if (is_null($override)) {
      $override = tp_video_player_create_configuration();
      
      //overrides the auto start to turn off by default for video playlist
      if ($node->type == 'video_playlist') {
        $override->auto_start = 0;
      }
    }
    $configurations[] = $override;

    // Merge the two configurations into the active configuration.
    $active = tp_video_player_merge_configurations($configurations);

    // Pull in the configuration form from the admin.
    module_load_include('inc', 'tp_video_player', 'tp_video_player.admin');
    $form['tp_video_player'] = tp_video_player_defaults_form(array(
      '#type' => 'fieldset',
      '#title' => t('Player Configuration'),
      '#weight' => -100,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
    ), $form_state, $active);
  }
}

/**
 * Implements hook_node_insert().
 */
function tp_video_player_node_insert($node) {
  tp_video_player_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function tp_video_player_node_update($node) {

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    // Load the full page defaults.
    $global_default = $node->type == 'video_playlist' ? 'playlist_full_page' : 'full_page';
    $defaults = tp_video_player_load_default_configuration($global_default);
    if (is_null($defaults)) {
      $defaults = tp_video_player_create_configuration();
    }

    // Load any available node specific configuration.
    $override = tp_video_player_load_entity_configuration('node', $node->nid);
    if (is_null($override)) {
      $override = tp_video_player_create_configuration();
    }

    // Update, save and attach the override.
    tp_video_player_update_override($defaults, $override, $node->tp_video_player);
    tp_video_player_save_configuration($override);
    tp_video_player_attach_entity_configuration('node', $node->nid, $override);
  }
}

/**
 * Updates an override configuration to have only those values that differ
 * from the defaults.
 */
function tp_video_player_update_override($defaults, $override, $values) {

  $boolean_fields = array(
    'layout' => array(
      'responsive',
    ),
    'playback' => array(
      'auto_start',
      'mute_playback',
      'repeat_playback',
    ),
    'sharing' => array(
      'enable_share',
    ),
  );
  foreach ($boolean_fields as $group => $fields) {
    foreach ($fields as $name) {
      if (empty($defaults->$name) == empty($values[$group][$name])) {
        // Value matches the default, so it is not overridden.
        $override->{$name} = NULL;
      }
      else {
        // Value does not match the default, store the override.
        $override->{$name} = !empty($values[$group][$name]) ? 1 : 0;
      }
    }
  }

  $scalar_fields = array(
    'layout' => array(
      'width',
      'height',
      'skin',
    ),
    'sharing' => array(
      'share_heading',
      'share_url',
      'embed_code',
    ),
    'advertising' => array(
      'ad_frequency',
      'ad_tag',
      'ad_message',
    ),
  );
  foreach ($scalar_fields as $group => $fields) {
    foreach ($fields as $name) {
      $value = $values[$group][$name];
      if ($defaults->{$name} == $value) {
        // Value matches the default, so it is not overridden.
        $override->{$name} = NULL;
      }
      else {
        // Value does not match the default, store the override.
        $override->{$name} = $value;
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function tp_video_player_node_delete($node) {
  tp_video_player_delete_entity_configuration('node', $node->nid);
}

/**
 * Implements hook_field_formatter_info().
 */
function tp_video_player_field_formatter_info() {
  return array(
    'tp_video_player' => array(
      'label' => t('TakePart Video Player'),
      'field types' => array('file'),
      'settings' => array(
        'global_default' => 'full_page',
      ),
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tp_video_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $elements = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] === 'tp_video_player') {
    $options = array();
    foreach (tp_video_player_defaults_info() as $name => $info) {
      $options[$name] = t($info['title']);
    }
    $elements['global_default'] = array(
      '#type' => 'select',
      '#title' => t('Global Default'),
      '#default_value' => $settings['global_default'],
      '#options' => $options,
    );
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tp_video_player_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $default = $settings['global_default'];

  if (!empty($default)) {
    $defaults = tp_video_player_defaults_info();
    return t('Default settings: @title', array(
      '@title' => isset($defaults[$default]) ? t($defaults[$default]['title']) : $default
    ));
  }

  return t('No default settings selected');
}

/**
 * Implements hook_field_formatter_view().
 */
function tp_video_player_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {

  $elements = array();
  $settings = $display['settings'];

  if ($display['type'] === 'tp_video_player' && count($items) > 0) {

    // Get the effective configuration (global default + entity override)
    $configuration = tp_video_player_video_override_configuration(
      $entity_type, $entity, $langcode, $settings['global_default']);

    // The allowed regions list attached to the same entity.
    $allowed_regions = tp_video_player_video_allowed_regions(
      $entity_type, $entity);
    foreach ($items as $delta => $item) {
      $items[$delta]['allowed_regions'] = $allowed_regions;
    }

    // The formatter only ever returns one player.
    $elements[] = tp_video_player_player_view($configuration, $items);
  }

  return $elements;
}

/**
 * Gets the active configuration for a video node.
 */
function tp_video_player_video_override_configuration($entity_type, $entity, $langcode, $global_default) {

  $configurations = array();

  // Start with the default configuration.
  $defaults = tp_video_player_load_default_configuration($global_default);
  if (!is_null($defaults)) {
    $configurations[] = $defaults;
  }

  // Add any specific entity overrides.
  $override = tp_video_player_load_entity_configuration($entity_type,
    entity_id($entity_type, $entity));
  if (!is_null($override)) {
    $configurations[] = $override;
  }

  // Merge the configurations into a single active configuration.
  $active = tp_video_player_merge_configurations($configurations);

  //overrides to make video_playlist always auto-start regardless of option
  $menu_obj = menu_get_object();
  if (is_object($menu_obj) && $menu_obj->type == 'video_playlist') {
    $active->auto_start = 1;
  }
  
  // The configuration can contain tokens, resolve them now.
  return tp_video_player_resolve_entity_configuration($entity_type, $entity, $langcode, $active);
}

/**
 * Get the list of allowed regions for a video node.
 */
function tp_video_player_video_allowed_regions($entity_type, $entity) {
  $regions = array();
  $items = field_get_items($entity_type, $entity,
    'field_allowed_regions');
  if ($items !== FALSE && count($items) > 0) {
    foreach ($items as $item) {
      $value = str_replace(array(','), ' ', $item['value']);
      $chunks = explode(' ', $value);
      $trimmed = array_map('trim', $chunks);
      $list = array_filter($trimmed, 'strlen');
      $regions += array_map('strtolower', $list);
    }
  }
  return $regions;
}

/**
 * Build a render array for a video player.
 */
function tp_video_player_player_view($configuration, $files) {

  $id = drupal_html_id('tp_video_player');
  $settings = tp_video_player_build_settings($configuration, $files);
  tp_video_player_add_player($id, $settings);

  $elements = array(
    '#theme' => 'tp_video_player',
    '#id' => $id,
  );

  return $elements;
}

/**
 * Helper function for adding client side player configurations.
 */
function tp_video_player_add_player($id, $settings) {
  static $setup_function_added = FALSE;

  if (!$setup_function_added) {
    $js_path = drupal_get_path('module', 'tp_video_player') . '/js/player.js';
    drupal_add_js($js_path, array(
      'type' => 'file',
      'scope' => 'header',
      'weight' => 6,
    ));
    drupal_add_js(array('tp_video_player' => array(
      'key' => variable_get('tp_video_player_key', ''),
    )), 'setting');
    $setup_function_added = TRUE;
  }

  drupal_add_js(array('tp_video_player' => array(
    'settings' => array($id => $settings),
  )), 'setting');
}

/**
 * Implements hook_theme().
 */
function tp_video_player_theme() {
  return array(
    'tp_video_player' => array(
      'variables' => array(
        'id' => NULL,
      ),
    ),
  );
}

/**
 * Theme hook for tp_video_player.
 */
function theme_tp_video_player($variables) {
  $id = $variables['id'];
  $attributes = array(
    'id' => $id,
    'class' => array('tp-video-player'),
  );
  return '<div' . drupal_attributes($attributes) . '></div>';
}
