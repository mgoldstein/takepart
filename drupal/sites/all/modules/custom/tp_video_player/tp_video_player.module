<?php
/**
 * @file
 * TakePart custom video player module.
 */

/**
 * Implements hook_init().
 */
function tp_video_player_init() {
  // Add the CDN hosted JW Player to all pages.
  if ($token = variable_get('tp_video_player_account_token', NULL)) {
    drupal_add_js('//jwpsrv.com/library/' . $token . '.js', array(
      'type' => 'external',
      'scope' => 'header',
      'weight' => 5,
    ));
  }
}

/**
 * Implements hook_menu().
 */
function tp_video_player_menu() {
  return array(
    'admin/config/media/tp-video-player' => array(
      'title' => 'Default Video Player Configurations',
      'description' => 'Default TakePart video player configurations',
      'position' => 'right',
      'weight' => 0,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
    'admin/config/media/tp-video-player/defaults/full-page' => array(
      'title' => 'Full Page',
      'description' => 'Full page video and playlist nodes.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('full_page'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/block' => array(
      'title' => 'Right Rail',
      'description' => 'Videos and playlists featured in a block.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('block'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/teaser' => array(
      'title' => 'Teaser View Mode',
      'description' => 'Videos and playlists featured in a block.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('teaser'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/iframe' => array(
      'title' => 'iFrame Embed',
      'description' => 'Videos and playlists embedded on other sites using an iframe.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('iframe'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/inline-content' => array(
      'title' => 'Inline Replacement',
      'description' => 'Videos and playlists embedded in other content as an inline replacement.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('inline_content'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/embed' => array(
      'title' => 'Embedded View Mode',
      'description' => 'Videos and playlists featured in a block.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('teaser'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/feature-main' => array(
      'title' => 'Front Page Feature',
      'description' => 'Videos and playlists featured on the front page.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('feature_main'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/feature-main-tpl' => array(
      'title' => 'Front Page Feature (TPL)',
      'description' => 'Videos and playlists featured on the front page.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('feature_main_tpl'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
    'admin/config/media/tp-video-player/defaults/feature-topic' => array(
      'title' => 'Topic Page Feature',
      'description' => 'Videos and playlists featured on the front page.',
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array('feature_topic'),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    ),
  );
}

/**
 * Implements hook_form_HOOK_alter().
 */

function tp_video_player_form_node_form_alter(&$form, &$form_state) {

  $node = $form['#node'];

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    $controller = new TakePartVideoPlayerOverrideController();

    // Get the configuration for the node.
    $override = $controller->loadOverrideForEntity('node', $node->nid, 'full_page');
    if (is_null($override)) {
      $override = $controller->create();
    }

    // Get the global defaults for nodes.
    $global_defaults = $controller->loadByName('full_page');

    // Merge to two configurations into the active configuration.
    $active = $controller->merge(array($global_defaults, $override));

    $form_controller = new TakePartVideoPlayerOverrideFormController($active);
    $form['tp_video_player'] = $form_controller->form(array(
      '#type' => 'fieldset',
      '#title' => t('Player Configuration'),
      '#weight' => -100,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
    ), $form_state);
  }
}

/**
 * Implements hook_node_insert().
 */
function tp_video_player_node_insert($node) {
  tp_video_player_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function tp_video_player_node_update($node) {

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    $controller = new TakePartVideoPlayerOverrideController();

    // Get the global defaults for nodes.
    $global_defaults = $controller->loadByName('full_page');

    // Get the existing overrides for the node.
    $override = $controller->loadOverrideForEntity('node', $node->nid, 'full_page');
    if (is_null($override)) {
      $override = $controller->create();
    }

    // Update the existing overrides.
    $form_controller = new TakePartVideoPlayerOverrideFormController($override);
    $updated_override = $form_controller->update($node->tp_video_player, $global_defaults);

    $controller->save($updated_override);
    $controller->attachOverrideToEntity($updated_override, 'node', $node->nid, 'full_page');
  }
}

/**
 * Implements hook_node_delete().
 */
function tp_video_player_node_delete($node) {
  $controller = new TakePartVideoPlayerOverrideController();
  $controller->deleteOverridesForEntity('node', $node->nid);
}

/**
 * Implements hook_theme().
 */
function tp_video_player_theme() {
  return array(
    'tp_video_player_override_form' => array(
      'render element' => 'form',
      'file' => 'tp_video_player.theme.inc',
    ),
    'tp_video_player' => array(
      'render element' => 'player',
      'file' => 'tp_video_player.theme.inc',
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function tp_video_player_field_formatter_info() {
  return array(
    'tp_video_player' => TakePartVideoPlayerFieldFormatter::info(),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tp_video_player_field_formatter_settings_form($field, $instance,
  $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  if ($display['type'] === 'tp_video_player') {
    $formatter = new TakePartVideoPlayerFieldFormatter($field, $instance, $display);
    return $formatter->settingsForm($form, $form_state);
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tp_video_player_field_formatter_settings_summary($field, $instance,
  $view_mode) {
  $display = $instance['display'][$view_mode];
  if ($display['type'] === 'tp_video_player') {
    $formatter = new TakePartVideoPlayerFieldFormatter($field, $instance, $display);
    return $formatter->settingsSummary();
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function tp_video_player_field_formatter_view($entity_type, $entity, $field,
  $instance, $langcode, $items, $display) {
  if ($display['type'] === 'tp_video_player') {
    $formatter = new TakePartVideoPlayerFieldFormatter($field, $instance, $display);
    return $formatter->viewItems($entity_type, $entity, $langcode, $items);
  }
}

function tp_video_player_settings_for_node($node, $field_name, $langcode = NULL) {
  $items = field_get_items('node', $node, $field_name, $langcode);
  if ($items !== FALSE) {
    $builder = new TakePartVideoPlayerFileFieldBuilder('node', $node, $langcode, $items);
    return $builder->settings('full_page');
  }
  return NULL;
}
