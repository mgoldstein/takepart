<?php
/**
 * @file
 * TakePart custom video player module.
 */

/**
 * Include the configuration object functions.
 */
require_once __DIR__ . '/tp_video_player.configuration.inc';

/**
 * Include the settings build functions.
 */
require_once __DIR__ . '/tp_video_player.player_settings.inc';

/**
 * Implements hook_init().
 */
function tp_video_player_init() {
  // Add the CDN hosted JW Player to all pages.
  if ($token = variable_get('tp_video_player_account_token', NULL)) {
    drupal_add_js('//jwpsrv.com/library/' . $token . '.js', array(
      'type' => 'external',
      'scope' => 'header',
      'weight' => 5,
    ));
  }
}

/**
 * Implements hook_menu().
 */
function tp_video_player_menu() {

  // Top level admin item.
  $items = array(
    'admin/config/media/tp-video-player' => array(
      'title' => 'Default Video Player Configurations',
      'description' => 'Default TakePart video player configurations',
      'position' => 'right',
      'weight' => 0,
      'page callback' => 'system_admin_menu_block_page',
      'access arguments' => array('access administration pages'),
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
    ),
  );

  // Page for each default.
  foreach (tp_video_player_defaults() as $name => $info) {
    $menu_name = str_replace('_', '-', $name);
    $items["admin/config/media/tp-video-player/defaults/{$menu_name}"] = array(
      'title' => $info['title'],
      'description' => $info['description'],
      'page callback' => 'tp_video_player_defaults_page',
      'page arguments' => array($name),
      'access arguments' => array('access administration pages'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'tp_video_player.admin.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_form_HOOK_alter().
 */
function tp_video_player_form_node_form_alter(&$form, &$form_state) {

  $node = $form['#node'];

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    $type = $node->type === 'video_playlist' ? 'playlist' : 'video';
    $default = "{$type}_full_page";

    // Load any available node specific configuration.
    $configuration = tp_video_player_load_entity_configuration('node', $node->nid, $default);
    if (is_null($configuration)) {
      $configuration = tp_video_player_clone_default_configuration($default);
    }

    // Pull in the configuration form from the admin.
    module_load_include('inc', 'tp_video_player', 'tp_video_player.admin');
    $form['tp_video_player'] = tp_video_player_configuration_form(array(
      '#type' => 'fieldset',
      '#title' => t('Player Configuration'),
      '#weight' => -100,
      '#group' => 'additional_settings',
      '#tree' => TRUE,
    ), $form_state, $configuration, $type);
  }
}

/**
 * Implements hook_node_insert().
 */
function tp_video_player_node_insert($node) {

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    $type = $node->type === 'video_playlist' ? 'playlist' : 'video';
    $default = "{$type}_full_page";

    // Load the default configuration.
    $configuration = tp_video_player_clone_default_configuration($default);

    // Pull in the configuration form from the admin.
    module_load_include('inc', 'tp_video_player', 'tp_video_player.admin');

    // Update, save and attach the node specific configuration.
    if (isset($node->tp_video_player)) {
      tp_video_player_update_configuration($configuration, $node->tp_video_player);
    }
    tp_video_player_save_configuration($configuration);
    tp_video_player_attach_entity_configuration('node', $node->nid, $default, $configuration);
  }
}

/**
 * Implements hook_node_update().
 */
function tp_video_player_node_update($node) {

  if ($node->type === 'video' || $node->type === 'video_playlist') {

    // Have to have updated data.
    if (isset($node->tp_video_player)) {

      $type = $node->type === 'video_playlist' ? 'playlist' : 'video';
      $default = "{$type}_full_page";

      // Load any available node specific configuration.
      $configuration = tp_video_player_load_entity_configuration('node', $node->nid, $default);
      if (is_null($configuration)) {
        $configuration = tp_video_player_clone_default_configuration($default);
      }

      // Pull in the configuration form from the admin.
      module_load_include('inc', 'tp_video_player', 'tp_video_player.admin');

      // Update, save and attach the node specific configuration.
      tp_video_player_update_configuration($configuration, $node->tp_video_player);
      tp_video_player_save_configuration($configuration);
      tp_video_player_attach_entity_configuration('node', $node->nid, $default, $configuration);
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function tp_video_player_node_delete($node) {
  tp_video_player_delete_entity_configuration('node', $node->nid);
}

/**
 * Implements hook_field_formatter_info().
 */
function tp_video_player_field_formatter_info() {
  return array(
    'tp_video_player' => array(
      'label' => t('TakePart Video Player'),
      'field types' => array('file'),
      'settings' => array(
        'global_default' => '',
      ),
    )
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function tp_video_player_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {

  $elements = array();
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if ($display['type'] === 'tp_video_player') {
    $options = array();
    foreach (tp_video_player_defaults() as $name => $info) {
      $options[$name] = t($info['title']);
    }
    $elements['global_default'] = array(
      '#type' => 'select',
      '#title' => t('Global Default'),
      '#default_value' => $settings['global_default'],
      '#options' => $options,
    );
  }

  return $elements;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function tp_video_player_field_formatter_settings_summary($field, $instance, $view_mode) {

  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $default = $settings['global_default'];

  if (!empty($default)) {
    $info = tp_video_player_defaults($default);
    return t('Default settings: @title', array(
      '@title' => is_null($info) ? $default : t($info['title'])
    ));
  }

  return t('No default settings selected');
}

/**
 * Implements hook_field_formatter_view().
 */
function tp_video_player_field_formatter_view($entity_type, $entity, $field,
  $instance, $langcode, $items, $display) {

  $elements = array();
  $settings = $display['settings'];

  if ($display['type'] === 'tp_video_player' && count($items) > 0) {
    // Load any available node specific configuration.
    $configuration = tp_video_player_load_entity_configuration($entity_type,
      entity_id($entity_type, $entity), $settings['global_default']);
    
    //by default load the global settings if no settings has been loaded
    if (is_null($configuration)) {
      $configuration = tp_video_player_clone_default_configuration(
        $settings['global_default']);
      
      //overrides the ads setting based on node so that all the other settings for video blocks
      //are the same
      if ($settings['global_default'] == 'video_block') {
        $full_page_conf = tp_video_player_load_entity_configuration(
          $entity_type,
          entity_id($entity_type, $entity),
          'video_full_page'
        );
  
        //only adds the tags if one exist
        if (isset($full_page_conf->ad_tag)) {
          //pulls the settings for ads from the node into video block
          $configuration->ad_tag = $full_page_conf->ad_tag;
        }
      }
    }

    // The path to the video node is stored in the MEDIAID to allow
    // the social share to change with each video.
    $uri = entity_uri($entity_type, $entity);
    $media_id = url($uri['path'], $uri['options']);

    // The allowed regions list attached to the same entity.
    $allowed_regions = tp_video_player_video_allowed_regions(
      $entity_type, $entity);
    foreach ($items as $delta => $item) {
      $items[$delta]['allowed_regions'] = $allowed_regions;
      $items[$delta]['media_id'] = $media_id;
      $items[$delta]['pre_roll_ad_tag'] = $configuration->ad_tag;
    }

    // The configuration can contain tokens, resolve them now.
    $configuration = tp_video_player_resolve_entity_configuration(
      $entity_type, $entity, $langcode, $configuration);

    // The formatter only ever returns one player.
    $elements[] = tp_video_player_player_view($configuration, $items);
  }

  return $elements;
}

/**
 * Get the list of allowed regions for a video node.
 */
function tp_video_player_video_allowed_regions($entity_type, $entity) {
  $regions = array();
  $items = field_get_items($entity_type, $entity, 'field_allowed_regions');
  if ($items !== FALSE && count($items) > 0) {
    foreach ($items as $item) {
      $value = str_replace(array(','), ' ', $item['value']);
      $chunks = explode(' ', $value);
      $trimmed = array_map('trim', $chunks);
      $list = array_filter($trimmed, 'strlen');
      $regions += array_map('strtolower', $list);
    }
  }
  return $regions;
}

/**
 * Build a render array for a video player.
 */
function tp_video_player_player_view($configuration, $files) {

  $id = drupal_html_id('tp_video_player');
  $settings = tp_video_player_build_settings($configuration, $files);
  tp_video_player_add_player($id, $settings);

  $elements = array(
    '#theme' => 'tp_video_player',
    '#id' => $id,
  );

  return $elements;
}

/**
 * Helper function for adding client side player configurations.
 */
function tp_video_player_add_player($id, $settings) {
  static $setup_function_added = FALSE;

  if (!$setup_function_added) {
    $js_path = drupal_get_path('module', 'tp_video_player') . '/js/player.js';
    drupal_add_js($js_path, array(
      'type' => 'file',
      'scope' => 'header',
      'weight' => 6,
    ));
    drupal_add_js(array('tp_video_player' => array(
      'key' => variable_get('tp_video_player_key', ''),
    )), 'setting');
    $setup_function_added = TRUE;
  }

  drupal_add_js(array('tp_video_player' => array(
    'settings' => array($id => $settings),
  )), 'setting');
}

/**
 * Implements hook_theme().
 */
function tp_video_player_theme() {
  return array(
    'tp_video_player' => array(
      'variables' => array(
        'id' => NULL,
      ),
    ),
  );
}

/**
 * Theme hook for tp_video_player.
 */
function theme_tp_video_player($variables) {
  $id = $variables['id'];
  $attributes = array(
    'id' => $id,
    'class' => array('tp-video-player'),
  );
  return '<div' . drupal_attributes($attributes) . '></div>';
}

/**
 *  @function:
 *    This function is used to return a renderable array from a video_playlist content type.
 *
 *  @param:
 *    nid = Node ID
 *    node = Node Object. If passed in this will not do a node load.
 *    view_mode = basic, detailed, hidelist, default. Default will pull in the node's setting. Fallback is basic.
 *    langcode = NULL by default.
 *
 *  @logic:
 *    This will load the default from the node. Otherwise the settings will pull from the global.
 *    View mode is defaulted to the node if nothing is passed in. Fallback is basic for view_mode.
 *
 *  @example:
 *    tp_video_player_list_from_nid(123, array(), 'detailed') => returns detailed view of playlist 123
 *    tp_video_player_list_from_nid(123) => returns basic view of playlist 123
 *
 *  @return:
 *    This will return a renderable array of the video playlist. Use drupal_render to render out the markup.
 */
function tp_video_player_list_from_nid($nid, $node = array(), $view_mode = 'default', $langcode = NULL) {
  $output = '';
  
  //loads just the entity if 
  if (empty($node)) {
    $node = node_load($nid);
  }
  
  //ensures that this is an object and the type is video playlist because of referencing
  if (is_object($node) && $node->type == 'video_playlist') {
    $items = field_get_items('node', $node, 'field_video_list');
    $videos = tp_videos_playlist_ordered_videos($node, $items);
    
    if (!empty($videos)) {
      /**
       *  Loads the first level which is node level.
       *  Followed by creating an empty one.
       */
      $player_configuration = tp_video_player_load_entity_configuration(
        'node',
        $nid,
        'playlist_full_page'
      );
      
      //if the playlist configuration is empty then load from the global default
      if (is_null($player_configuration)) {
        $player_configuration = tp_video_player_clone_default_configuration(
          'playlist_inline_content'
        );
      }
      
      // The configuration can contain tokens, resolve them now.
      $player_configuration = tp_video_player_resolve_entity_configuration(
        'node',
        $node,
        $langcode,
        $player_configuration
      );
      
      //pulls the defualt view mode from the node if neccessary otherwise fallback to basic
      if ($view_mode == 'default') {
        $view_mode_value = field_get_items('node', $node, 'field_playlist_view_mode');
        
        //assign view mode based on node otherwise fallback to basic
        if (!empty($view_mode_value[0]['value'])) {
          $view_mode = $view_mode_value[0]['value'];
        }
        else {
          $view_mode = 'basic';
        }
      }
      
      //builds the playlist
      $playlist = tp_videos_build_playlist(
        $player_configuration,
        $videos,
        $view_mode,
        $langcode
      );

      //renderable array
      $playlist_content = array(
        '#theme' => 'tp_videos_wrapper',
        '#title' => $node->title,
        '#playlist' => $playlist,
      );
      
      //returns the renderable array
      $output = $playlist_content;
    }
  }
  
  return $output;
}
