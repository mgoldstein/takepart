#
# Apache/PHP/Drupal settings:
#


# Send a "X-Robots-Tag" header when site is NOT accessed via Akamai, to
# prevent Google from indexing URLs other than those it finds at
# www.takepart.com via Akamai (keeps origin out of Akamai):
<ifModule mod_headers.c>
SetEnvIfNoCase Via akamai RequestFromAkamai
Header set X-Robots-Tag "noindex, nofollow" env=!RequestFromAkamai
</ifModule>



# If you don't visit as www.takepart.com or takepart.com, return "go-away" robots.txt to Google, etc.
<IfModule mod_rewrite.c>
RewriteEngine on
RewriteCond %{HTTP_HOST} =www.takepart.com [OR]
RewriteCond %{HTTP_HOST} =takepart.com
RewriteRule robots.txt robots.prod.txt [L]
# ..else..
RewriteRule robots.txt robots.dev.txt [L]

# If we're running on one of the production webheads...
# ..AND the request is not for origin.prod.takepart.com, origin.takepart.com,
# www.takepart.com, nor for any of the internal IP's of the webheads
# (that's how the ELB health check forms it's requests),
# then redirect the client to "www.takepart.com":
# web1:		10.169.5.88	web2:	10.169.18.45	web3:	10.159.65.54
# web4:		10.170.34.57	web5:	10.169.7.73	web6:	10.170.14.16
# web7:		10.158.92.165	web8:	10.157.31.198	web9:	10.169.0.201
# web10:	10.169.14.46	web11:	10.171.15.199	web12:	10.169.5.122
RewriteCond %{SERVER_ADDR} ^(10.169.5.88|10.169.18.45|10.159.65.54|10.170.34.57|10.169.7.73|10.170.14.16|10.158.92.165|10.157.31.198|10.169.0.201|10.169.14.46|10.171.15.199|10.169.5.122)$
RewriteCond %{HTTP_HOST} !^(10.169.5.88|10.169.18.45|10.159.65.54|10.170.34.57|10.169.7.73|10.170.14.16|10.158.92.165|10.157.31.198|10.169.0.201|10.169.14.46|10.171.15.199|10.169.5.122)$
RewriteCond %{HTTP_HOST} !^web(1|2|3|4|5|6|7|8|9|10|11|12).prod.takepart.com$
RewriteCond %{HTTP_HOST} !=www.takepart.com
RewriteCond %{HTTP_HOST} !=origin.takepart.com
RewriteCond %{HTTP_HOST} !=foodinc.takepart.com
RewriteCond %{HTTP_HOST} !=ssl.takepart.com
RewriteCond %{HTTP_HOST} !=origin.prod.takepart.com
RewriteRule (.*) http://www.takepart.com/$1 [R=301,L,NC]

  # Redirect actions to TAB platform
  RewriteCond %{REQUEST_URI} ^/actions/
  RewriteRule ^(.*)$ http://takeaction.takepart.com/$1 [R=301,L]
</IfModule>

# Protect files and directories from prying eyes.
<FilesMatch "\.(engine|inc|info|install|make|module|profile|test|po|sh|.*sql|theme|tpl(\.php)?|xtmpl)$|^(\..*|Entries.*|Repository|Root|Tag|Template)$">
  Order allow,deny
</FilesMatch>

# Don't show directory listings for URLs which map to a directory.
Options -Indexes

# Follow symbolic links in this directory.
Options +FollowSymLinks

# Make Drupal handle any 404 errors.
ErrorDocument 404 /index.php

# Set the default handler.
DirectoryIndex index.php index.html index.htm

# Override PHP settings that cannot be changed at runtime. See
# sites/default/default.settings.php and drupal_environment_initialize() in
# includes/bootstrap.inc for settings that can be changed at runtime.

# PHP 5, Apache 1 and 2.
<IfModule mod_php5.c>
  php_flag magic_quotes_gpc                 off
  php_flag magic_quotes_sybase              off
  php_flag register_globals                 off
  php_flag session.auto_start               off
  php_value mbstring.http_input             pass
  php_value mbstring.http_output            pass
  php_flag mbstring.encoding_translation    off
</IfModule>

# Requires mod_expires to be enabled.
<IfModule mod_expires.c>
  # Enable expirations.
  ExpiresActive On

  # Cache all files for 2 weeks after access (A).
  ExpiresDefault A1209600

  <FilesMatch \.php$>
    # Do not allow PHP scripts to be cached unless they explicitly send cache
    # headers themselves. Otherwise all scripts would have to overwrite the
    # headers set by mod_expires if they want another caching behavior. This may
    # fail if an error occurs early in the bootstrap process, and it may cause
    # problems if a non-Drupal PHP file is installed in a subdirectory.
    ExpiresActive Off
  </FilesMatch>
</IfModule>

# Various rewrite rules.
<IfModule mod_rewrite.c>
  RewriteEngine on

  # Block access to "hidden" directories whose names begin with a period. This
  # includes directories used by version control systems such as Subversion or
  # Git to store control files. Files whose names begin with a period, as well
  # as the control files used by CVS, are protected by the FilesMatch directive
  # above.
  #
  # NOTE: This only works when mod_rewrite is loaded. Without mod_rewrite, it is
  # not possible to block access to entire directories from .htaccess, because
  # <DirectoryMatch> is not allowed here.
  #
  # If you do not have mod_rewrite installed, you should remove these
  # directories from your webroot or otherwise protect them from being
  # downloaded.
  RewriteRule "(^|/)\." - [F]

  # If your site can be accessed both with and without the 'www.' prefix, you
  # can use one of the following settings to redirect users to your preferred
  # URL, either WITH or WITHOUT the 'www.' prefix. Choose ONLY one option:
  #
  # To redirect all users to access the site WITH the 'www.' prefix,
  # (http://example.com/... will be redirected to http://www.example.com/...)
  # uncomment the following:
  # RewriteCond %{HTTP_HOST} !^www\. [NC]
  # RewriteRule ^ http://www.%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
  #
  # To redirect all users to access the site WITHOUT the 'www.' prefix,
  # (http://www.example.com/... will be redirected to http://example.com/...)
  # uncomment the following:
  # RewriteCond %{HTTP_HOST} ^www\.(.+)$ [NC]
  # RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301]

  # Modify the RewriteBase if you are using Drupal in a subdirectory or in a
  # VirtualDocumentRoot and the rewrite rules are not working properly.
  # For example if your site is at http://example.com/drupal uncomment and
  # modify the following line:
  # RewriteBase /drupal
  #
  # If your site is running in a VirtualDocumentRoot at http://example.com/,
  # uncomment the following line:
  # RewriteBase /

  # Pass all requests not referring directly to files in the filesystem to
  # index.php. Clean URLs are handled in drupal_environment_initialize().
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_URI} !=/favicon.ico
  RewriteRule ^ index.php [L]

  # Rules to correctly serve gzip compressed CSS and JS files.
  # Requires both mod_rewrite and mod_headers to be enabled.
  <IfModule mod_headers.c>
    # Serve gzip compressed CSS files if they exist and the client accepts gzip.
    RewriteCond %{HTTP:Accept-encoding} gzip
    RewriteCond %{REQUEST_FILENAME}\.gz -s
    RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

    # Serve gzip compressed JS files if they exist and the client accepts gzip.
    RewriteCond %{HTTP:Accept-encoding} gzip
    RewriteCond %{REQUEST_FILENAME}\.gz -s
    RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

    # Serve correct content types, and prevent mod_deflate double gzip.
    RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
    RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]

    <FilesMatch "(\.js\.gz|\.css\.gz)$">
      # Serve correct encoding type.
      Header set Content-Encoding gzip
      # Force proxies to cache gzipped & non-gzipped css/js files separately.
      Header append Vary Accept-Encoding
    </FilesMatch>

    <FilesMatch "\.(eot|otf|woff|ttf)$">
      SetEnvIf Origin "^http(s)?://(.+\.)?(takepart\.com)$" origin_is=$0
      Header set Access-Controll-Allow-Origin %{origin_is}e env=origin_is
    </FilesMatch>
  </IfModule>
</IfModule>
