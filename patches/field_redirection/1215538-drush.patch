diff --git field_redirection.module field_redirection.module
index 7b2b6e5..dcb6aab 100644
--- field_redirection.module
+++ field_redirection.module
@@ -21,37 +21,47 @@ function field_redirection_permission() {
  */
 function field_redirection_field_formatter_info() {
   return array(
-    'redirect_300' => array(
-      'label' => t('Redirect - HTTP status code 300 - rarely used'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_301' => array(
-      'label' => t('Redirect - HTTP status code 301 - permanently moved'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_302' => array(
-      'label' => t('Redirect - HTTP status code 302 - rarely used'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_303' => array(
-      'label' => t('Redirect - HTTP status code 303 - rarely used'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_304' => array(
-      'label' => t('Redirect - HTTP status code 304 - rarely used'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_305' => array(
-      'label' => t('Redirect - HTTP status code 305 - rarely used'),
-      'field types' => array('link_field', 'node_reference', 'user_reference'),
-    ),
-    'redirect_307' => array(
-      'label' => t('Redirect - HTTP status code 307 - temporarily moved'),
+    'field_redirection' => array(
+      'label' => t('Redirect'),
+      'settings' => array('code'=>'301'),
       'field types' => array('link_field', 'node_reference', 'user_reference'),
     ),
   );
 }
 
+/*
+ * implementation of hook_field_formatter_settings_from()
+ */
+function field_redirection_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+  $form['code'] = array(
+    '#title' => 'HTTP status code',
+    '#type' => 'select',
+    '#options' => field_redirection_http_codes(),
+    '#default_value' => $settings['code'],
+  );
+  return $form;
+}
+function field_redirection_field_formatter_settings_summary($field, $instance, $view_mode) {
+  $codes = field_redirection_http_codes();
+  $display = $instance['display'][$view_mode];
+  $settings = $display['settings'];
+  return $codes[$settings['code']];
+}
+
+function field_redirection_http_codes() {
+  return array(
+    '300' => t('HTTP status code 300 - rarely used'),
+    '301' => t('HTTP status code 301 - permanently moved'),
+    '302' => t('HTTP status code 302 - rarely used'),
+    '303' => t('HTTP status code 303 - rarely used'),
+    '304' => t('HTTP status code 304 - rarely used'),
+    '305' => t('HTTP status code 305 - rarely used'),
+    '307' => t('HTTP status code 307 - temporarily moved'),
+  );
+}
+
 /**
  * Implements hook_field_formatter_view().
  *
@@ -64,49 +74,28 @@ function field_redirection_field_formatter_view($entity_type, $entity, $field, $
   // Only proceed if there's data.
   if (!empty($items[0])) {
     // There are different types of formatter allowed.
-    switch ($display['type']) {
-      // All of these are handled the same way, just with a different HTTP
-      // response code.  See http://en.wikipedia.org/wiki/URL_redirection for
-      // full details.
-      case 'redirect_300':
-        $response_code = 300;
-      case 'redirect_301':
-        $response_code = 301;
-      case 'redirect_302':
-        $response_code = 302;
-      case 'redirect_303':
-        $response_code = 303;
-      case 'redirect_304':
-        $response_code = 304;
-      case 'redirect_305':
-        $response_code = 305;
-      case 'redirect_307':
-        $response_code = 307;
-        $element = field_redirection_goto($instance, $items[0], $response_code);
-        break;
-    }
+    $element = field_redirection_goto($field['type'], $items[0], $settings['code']);
   }
-
   return $element;
 }
 
 /**
  * Redirect to the destination value from a given field.
  *
- * @param $instance
- *   The field settings.
+ * @param $type
+ *   The type of field used
  * @param $item
  *   The field data to work on.
  * @param $response_code
  *   The HTTP Response Code to use, defaults to "301".
  */
-function field_redirection_goto($instance, $item, $response_code = 301) {
+function field_redirection_goto($type, $item, $response_code = 301) {
   $element = array();
 
   // Work out the destination path to redirect to.
   $path = '';
-  if (!empty($instance['widget']['type'])) {
-    switch ($instance['widget']['type']) {
+  if (!empty($type)) {
+    switch ($type) {
       // Link field.
       case 'link_field':
         if (!empty($item['url'])) {
@@ -117,19 +106,23 @@ function field_redirection_goto($instance, $item, $response_code = 301) {
       // Node reference field.
       case 'node_reference':
         if (!empty($item['nid'])) {
-          $path = drupal_lookup_path('node/' . $item['nid']);
+          $path = 'node/' . $item['nid'];
+          //insure path is valid
+          $path = drupal_valid_path($path) ? $path : '';
+          
         }
         break;
 
       // User reference field.
       case 'user_reference':
         if (!empty($item['uid'])) {
-          $path = drupal_lookup_path('user/' . $item['uid']);
+          $path = 'user/' . $item['uid'];
+          //insure path is valid
+          $path = drupal_valid_path($path) ? $path : '';
         }
         break;
     }
   }
-
   // Only proceed if a path was identified.
   if (!empty($path)) {
     // If the user has permission to bypass the page redirection, return a
