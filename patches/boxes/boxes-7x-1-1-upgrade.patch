diff --git a/drupal/sites/all/modules/contrib/boxes/boxes.module b/drupal/sites/all/modules/contrib/boxes/boxes.module
index 8bb50b2..aa4c42f 100644
--- a/drupal/sites/all/modules/contrib/boxes/boxes.module
+++ b/drupal/sites/all/modules/contrib/boxes/boxes.module
@@ -813,7 +813,15 @@ function boxes_preprocess_block(&$vars) {
   if ($vars['block']->module === 'boxes') {
   }
   if ($vars['block']->module === 'boxes' && isset($vars['block']->boxes_plugin)) {
-    $vars['classes_array'][] = 'block-boxes-' . $vars['block']->boxes_plugin;
+    if (empty($vars['block']->additional_classes)) {
+      return;
+    }
+
+    $additional_classes = explode(' ', $vars['block']->additional_classes);
+
+    foreach ($additional_classes as $class) {
+      $vars['classes_array'][] = $class;
+    }
   }
   if ($vars['block']->module === 'boxes' && isset($vars['block']->additional_classes)) {
     $vars['classes_array'] = array_merge($vars['classes_array'], explode(' ', $vars['block']->additional_classes));
diff --git a/drupal/sites/all/modules/contrib/boxes/plugins/boxes_simple.inc b/drupal/sites/all/modules/contrib/boxes/plugins/boxes_simple.inc
index fd3eb0a..24ca206 100644
--- a/drupal/sites/all/modules/contrib/boxes/plugins/boxes_simple.inc
+++ b/drupal/sites/all/modules/contrib/boxes/plugins/boxes_simple.inc
@@ -4,6 +4,8 @@
  * Simple custom text box.
  */
 class boxes_simple extends boxes_box {
+  const BOXES_EDIT_IN_PLACE = 1;
+
   /**
    * Implementation of boxes_box::options_defaults().
    */
@@ -13,6 +15,7 @@ class boxes_simple extends boxes_box {
         'value' => '',
         'format' => filter_default_format(),
       ),
+      'additional_classes' => '',
     );
   }
 
@@ -20,9 +23,22 @@ class boxes_simple extends boxes_box {
    * Implementation of boxes_box::options_form().
    */
   public function options_form(&$form_state) {
-    $format = filter_format_load($this->options['body']['format']);
+    $option_format = isset($this->options['body']['format']) ? $this->options['body']['format'] : 'plain_text';
+    $format = filter_format_load($option_format);
 
-    if (filter_access($format)) {
+    // TODO: this currently breaks if you switch mode and try to edit existing
+    // simple boxes in the other mode. DO NOT USE IN PRODUCTION /!\
+    if (variable_get('boxes_edit_location', BOXES_EDIT_IN_PLACE) == BOXES_EDIT_IN_PLACE) {
+      $form['body'] = array(
+        '#type' => 'textarea',
+        '#title' => t('Box body'),
+        '#default_value' => $this->options['body'],
+        '#rows' => 6,
+        '#format' => '',
+        '#description' => t('The content of the block as shown to the user.'),
+      );
+    }
+    elseif (filter_access($format)) {
       $form = array();
       $form['body'] = array(
         '#type' => 'text_format',
@@ -33,8 +49,20 @@ class boxes_simple extends boxes_box {
         '#format' => $this->options['body']['format'] ? $this->options['body']['format'] : NULL,
         '#description' => t('The content of the block as shown to the user.'),
       );
-      return $form;
+      $form['view_advanced_settings'] = array(
+        '#type' => 'fieldset',
+        '#title' => t('Advanced settings'),
+        '#collapsed' => TRUE,
+        '#collapsible' => TRUE
+      );
+      $form['view_advanced_settings']['additional_classes'] = array(
+        '#title' => t('Additional CSS classes'),
+        '#description' => t('Optional CSS classes that will be added to the top-level div container for this box. Separate them with spaces.'),
+        '#type' => 'textfield',
+        '#default_value' => $this->options['additional_classes'],
+      );
     }
+    return $form;
   }
 
   /**
@@ -42,15 +70,27 @@ class boxes_simple extends boxes_box {
    */
   public function render() {
     $content = '';
-    if (!empty($this->options['body']['value']) && isset($this->options['body']['format'])) {
-      $content = check_markup($this->options['body']['value'], $this->options['body']['format'], $langcode = '' /* TODO Set this variable. */, FALSE);
+    if (!empty($this->options['body']['value'])) {
+      if (isset($this->options['body']['format']) && !$this->options['body']['format']) {
+        $content = check_markup($this->options['body']['value'], $this->options['body']['format'], $langcode = '' /* TODO Set this variable. */, FALSE);
+      }
+      else {
+        $content = $this->options['body'];
+      }
     }
     $title = isset($this->title) ? $this->title : NULL;
-    return array(
+    $box = array(
       'delta' => $this->delta, // Crucial.
       'title' => $title,
       'subject' => check_plain($title),
       'content' => $content,
     );
+
+    // Additional Classes
+    if (!empty($this->options['additional_classes'])) {
+      $box['additional_classes'] = $this->options['additional_classes'];
+    }
+
+    return $box;
   }
 }
